/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 692467.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 22.0], [4.8, 40.0], [4.9, 87.0], [5.0, 94.0], [5.1, 133.0], [5.2, 156.0], [5.3, 159.0], [5.4, 161.0], [5.5, 163.0], [5.6, 164.0], [5.7, 165.0], [5.8, 166.0], [5.9, 167.0], [6.0, 168.0], [6.1, 169.0], [6.2, 170.0], [6.3, 171.0], [6.4, 172.0], [6.5, 172.0], [6.6, 173.0], [6.7, 174.0], [6.8, 175.0], [6.9, 177.0], [7.0, 178.0], [7.1, 180.0], [7.2, 181.0], [7.3, 181.0], [7.4, 183.0], [7.5, 184.0], [7.6, 185.0], [7.7, 186.0], [7.8, 187.0], [7.9, 189.0], [8.0, 190.0], [8.1, 190.0], [8.2, 191.0], [8.3, 192.0], [8.4, 192.0], [8.5, 193.0], [8.6, 194.0], [8.7, 195.0], [8.8, 196.0], [8.9, 196.0], [9.0, 197.0], [9.1, 197.0], [9.2, 198.0], [9.3, 199.0], [9.4, 199.0], [9.5, 199.0], [9.6, 200.0], [9.7, 200.0], [9.8, 201.0], [9.9, 201.0], [10.0, 202.0], [10.1, 203.0], [10.2, 203.0], [10.3, 204.0], [10.4, 204.0], [10.5, 205.0], [10.6, 205.0], [10.7, 205.0], [10.8, 206.0], [10.9, 206.0], [11.0, 207.0], [11.1, 207.0], [11.2, 207.0], [11.3, 208.0], [11.4, 208.0], [11.5, 208.0], [11.6, 209.0], [11.7, 209.0], [11.8, 209.0], [11.9, 209.0], [12.0, 210.0], [12.1, 210.0], [12.2, 210.0], [12.3, 211.0], [12.4, 211.0], [12.5, 211.0], [12.6, 212.0], [12.7, 212.0], [12.8, 212.0], [12.9, 213.0], [13.0, 213.0], [13.1, 213.0], [13.2, 214.0], [13.3, 214.0], [13.4, 215.0], [13.5, 215.0], [13.6, 215.0], [13.7, 216.0], [13.8, 216.0], [13.9, 217.0], [14.0, 217.0], [14.1, 218.0], [14.2, 218.0], [14.3, 218.0], [14.4, 219.0], [14.5, 219.0], [14.6, 220.0], [14.7, 220.0], [14.8, 221.0], [14.9, 221.0], [15.0, 221.0], [15.1, 222.0], [15.2, 223.0], [15.3, 223.0], [15.4, 224.0], [15.5, 224.0], [15.6, 224.0], [15.7, 225.0], [15.8, 225.0], [15.9, 226.0], [16.0, 226.0], [16.1, 227.0], [16.2, 227.0], [16.3, 227.0], [16.4, 228.0], [16.5, 228.0], [16.6, 229.0], [16.7, 229.0], [16.8, 230.0], [16.9, 230.0], [17.0, 231.0], [17.1, 231.0], [17.2, 232.0], [17.3, 232.0], [17.4, 232.0], [17.5, 233.0], [17.6, 233.0], [17.7, 234.0], [17.8, 234.0], [17.9, 235.0], [18.0, 235.0], [18.1, 236.0], [18.2, 236.0], [18.3, 236.0], [18.4, 237.0], [18.5, 238.0], [18.6, 238.0], [18.7, 239.0], [18.8, 239.0], [18.9, 240.0], [19.0, 241.0], [19.1, 241.0], [19.2, 242.0], [19.3, 242.0], [19.4, 243.0], [19.5, 243.0], [19.6, 244.0], [19.7, 244.0], [19.8, 245.0], [19.9, 246.0], [20.0, 246.0], [20.1, 247.0], [20.2, 248.0], [20.3, 248.0], [20.4, 249.0], [20.5, 249.0], [20.6, 250.0], [20.7, 251.0], [20.8, 251.0], [20.9, 252.0], [21.0, 252.0], [21.1, 253.0], [21.2, 253.0], [21.3, 254.0], [21.4, 255.0], [21.5, 255.0], [21.6, 256.0], [21.7, 256.0], [21.8, 257.0], [21.9, 257.0], [22.0, 258.0], [22.1, 259.0], [22.2, 260.0], [22.3, 261.0], [22.4, 261.0], [22.5, 262.0], [22.6, 263.0], [22.7, 263.0], [22.8, 264.0], [22.9, 265.0], [23.0, 266.0], [23.1, 267.0], [23.2, 268.0], [23.3, 268.0], [23.4, 269.0], [23.5, 269.0], [23.6, 271.0], [23.7, 272.0], [23.8, 272.0], [23.9, 273.0], [24.0, 274.0], [24.1, 275.0], [24.2, 276.0], [24.3, 277.0], [24.4, 278.0], [24.5, 278.0], [24.6, 280.0], [24.7, 281.0], [24.8, 282.0], [24.9, 283.0], [25.0, 283.0], [25.1, 285.0], [25.2, 286.0], [25.3, 288.0], [25.4, 289.0], [25.5, 290.0], [25.6, 291.0], [25.7, 292.0], [25.8, 294.0], [25.9, 295.0], [26.0, 296.0], [26.1, 297.0], [26.2, 298.0], [26.3, 300.0], [26.4, 301.0], [26.5, 302.0], [26.6, 303.0], [26.7, 304.0], [26.8, 305.0], [26.9, 306.0], [27.0, 307.0], [27.1, 308.0], [27.2, 309.0], [27.3, 310.0], [27.4, 311.0], [27.5, 312.0], [27.6, 313.0], [27.7, 314.0], [27.8, 315.0], [27.9, 317.0], [28.0, 318.0], [28.1, 320.0], [28.2, 321.0], [28.3, 323.0], [28.4, 324.0], [28.5, 326.0], [28.6, 329.0], [28.7, 332.0], [28.8, 334.0], [28.9, 337.0], [29.0, 339.0], [29.1, 342.0], [29.2, 344.0], [29.3, 347.0], [29.4, 349.0], [29.5, 351.0], [29.6, 353.0], [29.7, 355.0], [29.8, 358.0], [29.9, 360.0], [30.0, 361.0], [30.1, 364.0], [30.2, 368.0], [30.3, 370.0], [30.4, 372.0], [30.5, 375.0], [30.6, 380.0], [30.7, 384.0], [30.8, 387.0], [30.9, 390.0], [31.0, 393.0], [31.1, 396.0], [31.2, 401.0], [31.3, 407.0], [31.4, 410.0], [31.5, 416.0], [31.6, 419.0], [31.7, 422.0], [31.8, 425.0], [31.9, 428.0], [32.0, 433.0], [32.1, 436.0], [32.2, 440.0], [32.3, 444.0], [32.4, 449.0], [32.5, 452.0], [32.6, 457.0], [32.7, 461.0], [32.8, 467.0], [32.9, 472.0], [33.0, 481.0], [33.1, 487.0], [33.2, 497.0], [33.3, 503.0], [33.4, 510.0], [33.5, 521.0], [33.6, 531.0], [33.7, 540.0], [33.8, 544.0], [33.9, 554.0], [34.0, 559.0], [34.1, 567.0], [34.2, 574.0], [34.3, 585.0], [34.4, 591.0], [34.5, 597.0], [34.6, 603.0], [34.7, 610.0], [34.8, 633.0], [34.9, 653.0], [35.0, 670.0], [35.1, 686.0], [35.2, 704.0], [35.3, 715.0], [35.4, 727.0], [35.5, 738.0], [35.6, 749.0], [35.7, 762.0], [35.8, 777.0], [35.9, 788.0], [36.0, 799.0], [36.1, 811.0], [36.2, 831.0], [36.3, 843.0], [36.4, 909.0], [36.5, 962.0], [36.6, 1000.0], [36.7, 1124.0], [36.8, 1152.0], [36.9, 1163.0], [37.0, 1166.0], [37.1, 1171.0], [37.2, 1174.0], [37.3, 1179.0], [37.4, 1183.0], [37.5, 1185.0], [37.6, 1190.0], [37.7, 1193.0], [37.8, 1196.0], [37.9, 1198.0], [38.0, 1201.0], [38.1, 1203.0], [38.2, 1205.0], [38.3, 1207.0], [38.4, 1209.0], [38.5, 1210.0], [38.6, 1213.0], [38.7, 1214.0], [38.8, 1217.0], [38.9, 1219.0], [39.0, 1221.0], [39.1, 1226.0], [39.2, 1228.0], [39.3, 1233.0], [39.4, 1236.0], [39.5, 1240.0], [39.6, 1247.0], [39.7, 1250.0], [39.8, 1259.0], [39.9, 1272.0], [40.0, 1295.0], [40.1, 1323.0], [40.2, 1342.0], [40.3, 1366.0], [40.4, 1406.0], [40.5, 1481.0], [40.6, 1508.0], [40.7, 1570.0], [40.8, 1932.0], [40.9, 2072.0], [41.0, 2345.0], [41.1, 2499.0], [41.2, 2580.0], [41.3, 2640.0], [41.4, 2707.0], [41.5, 2800.0], [41.6, 2870.0], [41.7, 2882.0], [41.8, 2944.0], [41.9, 2988.0], [42.0, 3186.0], [42.1, 3211.0], [42.2, 3229.0], [42.3, 3505.0], [42.4, 3525.0], [42.5, 3544.0], [42.6, 3567.0], [42.7, 3748.0], [42.8, 4384.0], [42.9, 4524.0], [43.0, 4906.0], [43.1, 4918.0], [43.2, 4948.0], [43.3, 5087.0], [43.4, 5102.0], [43.5, 5146.0], [43.6, 5210.0], [43.7, 5625.0], [43.8, 6194.0], [43.9, 6315.0], [44.0, 6687.0], [44.1, 6758.0], [44.2, 6881.0], [44.3, 6975.0], [44.4, 7179.0], [44.5, 7226.0], [44.6, 7509.0], [44.7, 7707.0], [44.8, 7922.0], [44.9, 8097.0], [45.0, 8156.0], [45.1, 8174.0], [45.2, 8201.0], [45.3, 8240.0], [45.4, 8478.0], [45.5, 8761.0], [45.6, 8814.0], [45.7, 8909.0], [45.8, 8979.0], [45.9, 8985.0], [46.0, 9013.0], [46.1, 9105.0], [46.2, 9833.0], [46.3, 9892.0], [46.4, 10021.0], [46.5, 10063.0], [46.6, 10096.0], [46.7, 10132.0], [46.8, 10213.0], [46.9, 10312.0], [47.0, 10517.0], [47.1, 10602.0], [47.2, 10622.0], [47.3, 10637.0], [47.4, 10662.0], [47.5, 10710.0], [47.6, 10802.0], [47.7, 11184.0], [47.8, 11222.0], [47.9, 11261.0], [48.0, 11304.0], [48.1, 11903.0], [48.2, 11974.0], [48.3, 12045.0], [48.4, 12132.0], [48.5, 12257.0], [48.6, 13381.0], [48.7, 13586.0], [48.8, 13594.0], [48.9, 13603.0], [49.0, 13614.0], [49.1, 13653.0], [49.2, 13967.0], [49.3, 14509.0], [49.4, 14581.0], [49.5, 14769.0], [49.6, 14864.0], [49.7, 15050.0], [49.8, 15128.0], [49.9, 15304.0], [50.0, 15867.0], [50.1, 15961.0], [50.2, 16055.0], [50.3, 16095.0], [50.4, 16135.0], [50.5, 16145.0], [50.6, 16306.0], [50.7, 16658.0], [50.8, 16985.0], [50.9, 17032.0], [51.0, 17100.0], [51.1, 17285.0], [51.2, 17422.0], [51.3, 17474.0], [51.4, 17530.0], [51.5, 17561.0], [51.6, 17607.0], [51.7, 17653.0], [51.8, 17720.0], [51.9, 17779.0], [52.0, 17893.0], [52.1, 17952.0], [52.2, 18095.0], [52.3, 18596.0], [52.4, 18945.0], [52.5, 18999.0], [52.6, 19008.0], [52.7, 19031.0], [52.8, 19224.0], [52.9, 19612.0], [53.0, 20146.0], [53.1, 20286.0], [53.2, 20395.0], [53.3, 20564.0], [53.4, 21067.0], [53.5, 21119.0], [53.6, 21553.0], [53.7, 21949.0], [53.8, 22859.0], [53.9, 23293.0], [54.0, 23402.0], [54.1, 23553.0], [54.2, 23592.0], [54.3, 23614.0], [54.4, 24070.0], [54.5, 24211.0], [54.6, 24247.0], [54.7, 24255.0], [54.8, 24284.0], [54.9, 24314.0], [55.0, 24516.0], [55.1, 24874.0], [55.2, 25043.0], [55.3, 25120.0], [55.4, 25136.0], [55.5, 25147.0], [55.6, 25159.0], [55.7, 25174.0], [55.8, 25210.0], [55.9, 25448.0], [56.0, 25492.0], [56.1, 25600.0], [56.2, 25688.0], [56.3, 25913.0], [56.4, 26061.0], [56.5, 26401.0], [56.6, 26601.0], [56.7, 26829.0], [56.8, 27098.0], [56.9, 27354.0], [57.0, 27557.0], [57.1, 27917.0], [57.2, 28028.0], [57.3, 28139.0], [57.4, 28454.0], [57.5, 28507.0], [57.6, 28803.0], [57.7, 28874.0], [57.8, 28942.0], [57.9, 29220.0], [58.0, 29530.0], [58.1, 29843.0], [58.2, 30057.0], [58.3, 30349.0], [58.4, 30705.0], [58.5, 31120.0], [58.6, 31826.0], [58.7, 32256.0], [58.8, 32338.0], [58.9, 32372.0], [59.0, 32412.0], [59.1, 32477.0], [59.2, 32658.0], [59.3, 32969.0], [59.4, 33260.0], [59.5, 34062.0], [59.6, 34315.0], [59.7, 34582.0], [59.8, 34786.0], [59.9, 34878.0], [60.0, 34925.0], [60.1, 34977.0], [60.2, 35069.0], [60.3, 35122.0], [60.4, 35253.0], [60.5, 35355.0], [60.6, 35422.0], [60.7, 35495.0], [60.8, 35686.0], [60.9, 35964.0], [61.0, 36062.0], [61.1, 36101.0], [61.2, 36134.0], [61.3, 36150.0], [61.4, 36175.0], [61.5, 36227.0], [61.6, 36247.0], [61.7, 36377.0], [61.8, 36635.0], [61.9, 36888.0], [62.0, 37049.0], [62.1, 37181.0], [62.2, 37242.0], [62.3, 37295.0], [62.4, 37349.0], [62.5, 37484.0], [62.6, 37589.0], [62.7, 37625.0], [62.8, 37664.0], [62.9, 37704.0], [63.0, 37750.0], [63.1, 37788.0], [63.2, 37834.0], [63.3, 37913.0], [63.4, 38004.0], [63.5, 38173.0], [63.6, 38349.0], [63.7, 38467.0], [63.8, 38647.0], [63.9, 38776.0], [64.0, 38875.0], [64.1, 38971.0], [64.2, 39081.0], [64.3, 39204.0], [64.4, 39279.0], [64.5, 39349.0], [64.6, 39399.0], [64.7, 39489.0], [64.8, 39588.0], [64.9, 39626.0], [65.0, 39709.0], [65.1, 39735.0], [65.2, 39758.0], [65.3, 39788.0], [65.4, 39803.0], [65.5, 39837.0], [65.6, 39866.0], [65.7, 39909.0], [65.8, 39959.0], [65.9, 40018.0], [66.0, 40042.0], [66.1, 40087.0], [66.2, 40122.0], [66.3, 40148.0], [66.4, 40158.0], [66.5, 40169.0], [66.6, 40182.0], [66.7, 40203.0], [66.8, 40220.0], [66.9, 40236.0], [67.0, 40305.0], [67.1, 40355.0], [67.2, 40438.0], [67.3, 40568.0], [67.4, 40618.0], [67.5, 40674.0], [67.6, 40730.0], [67.7, 40809.0], [67.8, 40843.0], [67.9, 40907.0], [68.0, 40934.0], [68.1, 40979.0], [68.2, 41008.0], [68.3, 41037.0], [68.4, 41082.0], [68.5, 41113.0], [68.6, 41148.0], [68.7, 41188.0], [68.8, 41227.0], [68.9, 41294.0], [69.0, 41343.0], [69.1, 41415.0], [69.2, 41447.0], [69.3, 41480.0], [69.4, 41557.0], [69.5, 41636.0], [69.6, 41774.0], [69.7, 41883.0], [69.8, 41938.0], [69.9, 42014.0], [70.0, 42084.0], [70.1, 42245.0], [70.2, 42313.0], [70.3, 42374.0], [70.4, 42440.0], [70.5, 42512.0], [70.6, 42706.0], [70.7, 42749.0], [70.8, 42807.0], [70.9, 42826.0], [71.0, 42844.0], [71.1, 42880.0], [71.2, 42923.0], [71.3, 42976.0], [71.4, 43021.0], [71.5, 43124.0], [71.6, 43146.0], [71.7, 43158.0], [71.8, 43170.0], [71.9, 43198.0], [72.0, 43277.0], [72.1, 43332.0], [72.2, 43380.0], [72.3, 43430.0], [72.4, 43454.0], [72.5, 43534.0], [72.6, 43791.0], [72.7, 43994.0], [72.8, 44150.0], [72.9, 44320.0], [73.0, 44372.0], [73.1, 44437.0], [73.2, 44560.0], [73.3, 44676.0], [73.4, 44766.0], [73.5, 44935.0], [73.6, 45480.0], [73.7, 45509.0], [73.8, 45565.0], [73.9, 45636.0], [74.0, 45955.0], [74.1, 46030.0], [74.2, 46279.0], [74.3, 46396.0], [74.4, 46466.0], [74.5, 46534.0], [74.6, 46583.0], [74.7, 46613.0], [74.8, 46658.0], [74.9, 46673.0], [75.0, 46704.0], [75.1, 46770.0], [75.2, 46842.0], [75.3, 46881.0], [75.4, 46909.0], [75.5, 46953.0], [75.6, 46987.0], [75.7, 47055.0], [75.8, 47136.0], [75.9, 47201.0], [76.0, 47237.0], [76.1, 47282.0], [76.2, 47332.0], [76.3, 47368.0], [76.4, 47424.0], [76.5, 47527.0], [76.6, 47566.0], [76.7, 47618.0], [76.8, 47726.0], [76.9, 47876.0], [77.0, 47933.0], [77.1, 47982.0], [77.2, 48026.0], [77.3, 48062.0], [77.4, 48255.0], [77.5, 48326.0], [77.6, 48619.0], [77.7, 48644.0], [77.8, 48679.0], [77.9, 48704.0], [78.0, 48739.0], [78.1, 48817.0], [78.2, 48856.0], [78.3, 48927.0], [78.4, 48964.0], [78.5, 49324.0], [78.6, 49398.0], [78.7, 49487.0], [78.8, 49525.0], [78.9, 49620.0], [79.0, 49720.0], [79.1, 49736.0], [79.2, 49744.0], [79.3, 49752.0], [79.4, 49757.0], [79.5, 49761.0], [79.6, 49767.0], [79.7, 49777.0], [79.8, 49795.0], [79.9, 49826.0], [80.0, 49858.0], [80.1, 49900.0], [80.2, 49961.0], [80.3, 49990.0], [80.4, 50062.0], [80.5, 50102.0], [80.6, 50146.0], [80.7, 50184.0], [80.8, 50217.0], [80.9, 50235.0], [81.0, 50276.0], [81.1, 50301.0], [81.2, 50332.0], [81.3, 50358.0], [81.4, 50387.0], [81.5, 50413.0], [81.6, 50441.0], [81.7, 50473.0], [81.8, 50499.0], [81.9, 50524.0], [82.0, 50558.0], [82.1, 50595.0], [82.2, 50618.0], [82.3, 50655.0], [82.4, 50683.0], [82.5, 50731.0], [82.6, 50781.0], [82.7, 50834.0], [82.8, 50884.0], [82.9, 50930.0], [83.0, 50964.0], [83.1, 51015.0], [83.2, 51068.0], [83.3, 51129.0], [83.4, 51154.0], [83.5, 51173.0], [83.6, 51199.0], [83.7, 51228.0], [83.8, 51255.0], [83.9, 51280.0], [84.0, 51298.0], [84.1, 51392.0], [84.2, 51431.0], [84.3, 51509.0], [84.4, 51587.0], [84.5, 51656.0], [84.6, 51713.0], [84.7, 51752.0], [84.8, 51857.0], [84.9, 51954.0], [85.0, 52081.0], [85.1, 52177.0], [85.2, 52252.0], [85.3, 52315.0], [85.4, 52480.0], [85.5, 52573.0], [85.6, 52641.0], [85.7, 52705.0], [85.8, 52776.0], [85.9, 52815.0], [86.0, 52869.0], [86.1, 52918.0], [86.2, 52961.0], [86.3, 52977.0], [86.4, 53001.0], [86.5, 53023.0], [86.6, 53071.0], [86.7, 53109.0], [86.8, 53152.0], [86.9, 53226.0], [87.0, 53333.0], [87.1, 53389.0], [87.2, 53489.0], [87.3, 53569.0], [87.4, 53625.0], [87.5, 53755.0], [87.6, 53829.0], [87.7, 53913.0], [87.8, 54032.0], [87.9, 54134.0], [88.0, 54477.0], [88.1, 54748.0], [88.2, 54923.0], [88.3, 55069.0], [88.4, 55160.0], [88.5, 55289.0], [88.6, 55333.0], [88.7, 55401.0], [88.8, 55483.0], [88.9, 55572.0], [89.0, 55666.0], [89.1, 55716.0], [89.2, 55755.0], [89.3, 55778.0], [89.4, 55821.0], [89.5, 55846.0], [89.6, 55885.0], [89.7, 55922.0], [89.8, 56001.0], [89.9, 56038.0], [90.0, 56085.0], [90.1, 56184.0], [90.2, 56291.0], [90.3, 56379.0], [90.4, 56696.0], [90.5, 56840.0], [90.6, 56937.0], [90.7, 57011.0], [90.8, 57176.0], [90.9, 57379.0], [91.0, 57475.0], [91.1, 57545.0], [91.2, 57664.0], [91.3, 58046.0], [91.4, 58128.0], [91.5, 58393.0], [91.6, 58582.0], [91.7, 58742.0], [91.8, 58806.0], [91.9, 59124.0], [92.0, 59298.0], [92.1, 59475.0], [92.2, 59587.0], [92.3, 60026.0], [92.4, 60365.0], [92.5, 60441.0], [92.6, 60483.0], [92.7, 60521.0], [92.8, 60579.0], [92.9, 60849.0], [93.0, 61054.0], [93.1, 61321.0], [93.2, 61847.0], [93.3, 62038.0], [93.4, 62249.0], [93.5, 62302.0], [93.6, 62383.0], [93.7, 62448.0], [93.8, 62465.0], [93.9, 62483.0], [94.0, 62507.0], [94.1, 62563.0], [94.2, 63081.0], [94.3, 63275.0], [94.4, 63385.0], [94.5, 63626.0], [94.6, 63735.0], [94.7, 64213.0], [94.8, 64361.0], [94.9, 64615.0], [95.0, 64879.0], [95.1, 64899.0], [95.2, 64954.0], [95.3, 65056.0], [95.4, 65384.0], [95.5, 65540.0], [95.6, 65774.0], [95.7, 65850.0], [95.8, 66035.0], [95.9, 66674.0], [96.0, 67200.0], [96.1, 67275.0], [96.2, 67387.0], [96.3, 67543.0], [96.4, 67636.0], [96.5, 67692.0], [96.6, 67741.0], [96.7, 67820.0], [96.8, 67925.0], [96.9, 67980.0], [97.0, 68000.0], [97.1, 68029.0], [97.2, 68192.0], [97.3, 68791.0], [97.4, 68977.0], [97.5, 69088.0], [97.6, 69210.0], [97.7, 69352.0], [97.8, 69754.0], [97.9, 70984.0], [98.0, 71318.0], [98.1, 71821.0], [98.2, 72094.0], [98.3, 72308.0], [98.4, 72809.0], [98.5, 77064.0], [98.6, 78294.0], [98.7, 78417.0], [98.8, 78518.0], [98.9, 78675.0], [99.0, 78741.0], [99.1, 78868.0], [99.2, 79637.0], [99.3, 79680.0], [99.4, 80465.0], [99.5, 87639.0], [99.6, 88938.0], [99.7, 90936.0], [99.8, 476802.0], [99.9, 476957.0], [100.0, 692467.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 2352.0, "series": [{"data": [[0.0, 705.0], [488000.0, 1.0], [68300.0, 2.0], [66700.0, 1.0], [71500.0, 3.0], [79500.0, 1.0], [77900.0, 3.0], [89100.0, 1.0], [90700.0, 1.0], [477000.0, 2.0], [692400.0, 2.0], [100.0, 636.0], [32900.0, 7.0], [34500.0, 6.0], [36100.0, 48.0], [35300.0, 21.0], [38500.0, 4.0], [36900.0, 7.0], [37700.0, 37.0], [39300.0, 26.0], [40100.0, 75.0], [40900.0, 40.0], [41700.0, 14.0], [42500.0, 6.0], [44100.0, 13.0], [44900.0, 5.0], [43300.0, 27.0], [46500.0, 27.0], [45700.0, 8.0], [48900.0, 23.0], [47300.0, 29.0], [48100.0, 6.0], [49700.0, 119.0], [50500.0, 45.0], [200.0, 2352.0], [52900.0, 47.0], [51300.0, 15.0], [52100.0, 19.0], [54500.0, 7.0], [53700.0, 21.0], [55300.0, 22.0], [56100.0, 9.0], [56900.0, 18.0], [58500.0, 7.0], [59300.0, 4.0], [60900.0, 7.0], [60100.0, 3.0], [62500.0, 18.0], [61700.0, 4.0], [63300.0, 13.0], [64900.0, 19.0], [64100.0, 8.0], [65800.0, 20.0], [67400.0, 7.0], [69000.0, 10.0], [72200.0, 10.0], [300.0, 687.0], [77000.0, 11.0], [78600.0, 12.0], [89800.0, 1.0], [88200.0, 1.0], [91400.0, 1.0], [400.0, 290.0], [500.0, 184.0], [600.0, 87.0], [700.0, 122.0], [800.0, 51.0], [900.0, 30.0], [1000.0, 11.0], [1100.0, 180.0], [1200.0, 290.0], [1300.0, 54.0], [1400.0, 23.0], [1500.0, 23.0], [1600.0, 1.0], [1700.0, 6.0], [1800.0, 2.0], [1900.0, 6.0], [2000.0, 11.0], [2100.0, 6.0], [2200.0, 6.0], [2300.0, 3.0], [2400.0, 12.0], [2500.0, 22.0], [2600.0, 19.0], [2700.0, 14.0], [2800.0, 35.0], [2900.0, 28.0], [3000.0, 1.0], [3100.0, 14.0], [3200.0, 27.0], [3300.0, 4.0], [3400.0, 3.0], [3500.0, 52.0], [3700.0, 7.0], [3600.0, 2.0], [3800.0, 4.0], [3900.0, 1.0], [4000.0, 1.0], [68100.0, 3.0], [66500.0, 1.0], [4300.0, 8.0], [4200.0, 1.0], [71300.0, 3.0], [72900.0, 1.0], [4500.0, 7.0], [4400.0, 6.0], [69700.0, 3.0], [4800.0, 4.0], [4900.0, 46.0], [5000.0, 15.0], [5100.0, 25.0], [5200.0, 11.0], [5300.0, 5.0], [5600.0, 2.0], [88900.0, 8.0], [5500.0, 1.0], [5400.0, 1.0], [5800.0, 1.0], [6100.0, 7.0], [5900.0, 2.0], [6000.0, 4.0], [6300.0, 14.0], [6200.0, 8.0], [6400.0, 2.0], [6500.0, 3.0], [6600.0, 2.0], [6800.0, 9.0], [6900.0, 13.0], [6700.0, 21.0], [7000.0, 6.0], [7100.0, 16.0], [7300.0, 2.0], [7200.0, 11.0], [7400.0, 3.0], [7500.0, 9.0], [7600.0, 6.0], [7900.0, 5.0], [7800.0, 9.0], [7700.0, 4.0], [8000.0, 12.0], [8100.0, 40.0], [8200.0, 19.0], [8600.0, 3.0], [8400.0, 5.0], [8800.0, 21.0], [9000.0, 18.0], [9200.0, 1.0], [10000.0, 33.0], [9800.0, 16.0], [10200.0, 17.0], [10400.0, 10.0], [10600.0, 54.0], [10800.0, 5.0], [11200.0, 35.0], [11000.0, 1.0], [11600.0, 2.0], [11400.0, 2.0], [12000.0, 12.0], [12200.0, 4.0], [11800.0, 3.0], [12400.0, 3.0], [13000.0, 1.0], [13600.0, 38.0], [13800.0, 1.0], [13400.0, 2.0], [14000.0, 5.0], [14200.0, 1.0], [14800.0, 15.0], [14400.0, 3.0], [14600.0, 4.0], [15200.0, 8.0], [15000.0, 13.0], [15800.0, 5.0], [15600.0, 1.0], [16000.0, 22.0], [16200.0, 4.0], [17200.0, 6.0], [16400.0, 4.0], [16800.0, 1.0], [18000.0, 4.0], [17600.0, 22.0], [18800.0, 4.0], [19200.0, 2.0], [20400.0, 13.0], [20000.0, 2.0], [19600.0, 2.0], [326000.0, 1.0], [21200.0, 1.0], [21600.0, 4.0], [23200.0, 14.0], [22800.0, 1.0], [24000.0, 9.0], [24400.0, 7.0], [23600.0, 14.0], [24800.0, 6.0], [25200.0, 9.0], [26000.0, 8.0], [26400.0, 8.0], [25600.0, 16.0], [26800.0, 6.0], [27200.0, 6.0], [27600.0, 7.0], [28000.0, 17.0], [28400.0, 15.0], [28800.0, 19.0], [29200.0, 6.0], [30400.0, 8.0], [30000.0, 1.0], [30800.0, 2.0], [31600.0, 1.0], [31200.0, 3.0], [32400.0, 29.0], [32000.0, 5.0], [34400.0, 4.0], [36000.0, 26.0], [35200.0, 14.0], [36800.0, 10.0], [38400.0, 5.0], [37600.0, 31.0], [39200.0, 17.0], [40000.0, 42.0], [40800.0, 29.0], [41600.0, 14.0], [42400.0, 20.0], [44800.0, 10.0], [44000.0, 5.0], [43200.0, 22.0], [45600.0, 13.0], [46400.0, 21.0], [48800.0, 27.0], [47200.0, 35.0], [48000.0, 28.0], [49600.0, 13.0], [50400.0, 48.0], [52800.0, 30.0], [52000.0, 11.0], [51200.0, 56.0], [55200.0, 14.0], [53600.0, 10.0], [54400.0, 3.0], [56000.0, 35.0], [56800.0, 13.0], [58400.0, 7.0], [57600.0, 11.0], [59200.0, 8.0], [60800.0, 9.0], [60000.0, 1.0], [62400.0, 51.0], [63200.0, 7.0], [64800.0, 23.0], [67200.0, 20.0], [68800.0, 7.0], [65600.0, 11.0], [70400.0, 1.0], [72000.0, 9.0], [78400.0, 14.0], [325900.0, 1.0], [67100.0, 3.0], [68700.0, 3.0], [71900.0, 4.0], [70300.0, 4.0], [78300.0, 12.0], [91100.0, 1.0], [477200.0, 1.0], [34700.0, 6.0], [33100.0, 1.0], [33900.0, 1.0], [36300.0, 14.0], [35500.0, 7.0], [37100.0, 7.0], [38700.0, 7.0], [37900.0, 15.0], [39500.0, 16.0], [40300.0, 26.0], [42700.0, 33.0], [41100.0, 36.0], [41900.0, 20.0], [44300.0, 19.0], [43500.0, 8.0], [45900.0, 8.0], [46700.0, 23.0], [47500.0, 26.0], [49100.0, 1.0], [48300.0, 5.0], [49900.0, 31.0], [50700.0, 28.0], [51500.0, 16.0], [52300.0, 7.0], [53100.0, 28.0], [54700.0, 4.0], [53900.0, 12.0], [56300.0, 15.0], [55500.0, 17.0], [57100.0, 13.0], [58700.0, 20.0], [57900.0, 3.0], [59500.0, 8.0], [60300.0, 11.0], [61100.0, 6.0], [476700.0, 1.0], [61900.0, 6.0], [62700.0, 1.0], [65100.0, 2.0], [63500.0, 11.0], [64300.0, 7.0], [69400.0, 9.0], [67800.0, 15.0], [71000.0, 7.0], [72600.0, 1.0], [77400.0, 1.0], [80600.0, 3.0], [79000.0, 6.0], [90200.0, 1.0], [66900.0, 2.0], [71700.0, 3.0], [70100.0, 1.0], [79700.0, 7.0], [78100.0, 1.0], [89300.0, 1.0], [90900.0, 1.0], [100500.0, 4.0], [17300.0, 9.0], [16900.0, 13.0], [16500.0, 5.0], [18100.0, 11.0], [17700.0, 25.0], [18900.0, 19.0], [18500.0, 1.0], [19300.0, 1.0], [20100.0, 11.0], [19700.0, 3.0], [20500.0, 1.0], [20900.0, 5.0], [21300.0, 1.0], [22100.0, 4.0], [21700.0, 1.0], [23300.0, 12.0], [24500.0, 6.0], [24100.0, 6.0], [23700.0, 2.0], [24900.0, 8.0], [25300.0, 5.0], [25700.0, 8.0], [26100.0, 6.0], [26500.0, 6.0], [26900.0, 8.0], [27300.0, 9.0], [28100.0, 4.0], [28500.0, 10.0], [28900.0, 16.0], [29300.0, 5.0], [30100.0, 10.0], [29700.0, 8.0], [31300.0, 2.0], [31700.0, 4.0], [30900.0, 2.0], [32500.0, 3.0], [32100.0, 2.0], [33000.0, 8.0], [34600.0, 8.0], [36200.0, 27.0], [35400.0, 16.0], [37000.0, 13.0], [38600.0, 19.0], [37800.0, 23.0], [40200.0, 42.0], [39400.0, 15.0], [42600.0, 6.0], [41800.0, 12.0], [41000.0, 42.0], [43400.0, 31.0], [44200.0, 6.0], [46600.0, 49.0], [45800.0, 2.0], [49000.0, 4.0], [47400.0, 18.0], [48200.0, 14.0], [49800.0, 39.0], [50600.0, 44.0], [53000.0, 38.0], [51400.0, 26.0], [52200.0, 20.0], [54600.0, 4.0], [53800.0, 16.0], [55400.0, 17.0], [56200.0, 15.0], [57000.0, 8.0], [58600.0, 5.0], [59400.0, 16.0], [60200.0, 3.0], [61000.0, 5.0], [61800.0, 4.0], [65000.0, 14.0], [64200.0, 13.0], [67600.0, 21.0], [69200.0, 10.0], [66000.0, 4.0], [72400.0, 1.0], [80400.0, 4.0], [78800.0, 3.0], [90000.0, 2.0], [67500.0, 15.0], [65900.0, 5.0], [69100.0, 12.0], [72300.0, 12.0], [78700.0, 22.0], [83500.0, 1.0], [34100.0, 7.0], [33300.0, 1.0], [35700.0, 7.0], [36500.0, 7.0], [34900.0, 21.0], [37300.0, 19.0], [38100.0, 6.0], [38900.0, 13.0], [40500.0, 11.0], [39700.0, 51.0], [41300.0, 24.0], [42100.0, 9.0], [42900.0, 32.0], [43700.0, 6.0], [44500.0, 11.0], [46100.0, 3.0], [46900.0, 33.0], [45300.0, 1.0], [48500.0, 4.0], [47700.0, 13.0], [49300.0, 15.0], [50900.0, 30.0], [50100.0, 33.0], [52500.0, 17.0], [51700.0, 31.0], [54900.0, 11.0], [54100.0, 9.0], [53300.0, 20.0], [55700.0, 42.0], [57300.0, 10.0], [56500.0, 2.0], [58900.0, 2.0], [58100.0, 10.0], [60500.0, 25.0], [59700.0, 4.0], [61300.0, 5.0], [62100.0, 7.0], [62900.0, 4.0], [63700.0, 3.0], [65300.0, 4.0], [64500.0, 4.0], [68200.0, 4.0], [66600.0, 11.0], [71400.0, 3.0], [69800.0, 1.0], [77800.0, 4.0], [82600.0, 1.0], [476900.0, 4.0], [67300.0, 11.0], [68900.0, 12.0], [65700.0, 4.0], [72100.0, 2.0], [76900.0, 1.0], [78500.0, 8.0], [88100.0, 1.0], [91300.0, 1.0], [8700.0, 10.0], [8500.0, 6.0], [8300.0, 7.0], [8900.0, 38.0], [9100.0, 4.0], [9700.0, 6.0], [9500.0, 2.0], [9900.0, 9.0], [10100.0, 23.0], [10300.0, 5.0], [10500.0, 14.0], [10700.0, 17.0], [10900.0, 1.0], [11100.0, 14.0], [11300.0, 3.0], [11500.0, 2.0], [11700.0, 2.0], [11900.0, 24.0], [12100.0, 17.0], [12500.0, 2.0], [12700.0, 2.0], [12300.0, 1.0], [13100.0, 2.0], [13300.0, 4.0], [13500.0, 34.0], [13700.0, 8.0], [13900.0, 3.0], [14100.0, 1.0], [14300.0, 1.0], [14700.0, 11.0], [14500.0, 17.0], [15300.0, 7.0], [15100.0, 11.0], [14900.0, 4.0], [15700.0, 5.0], [15900.0, 20.0], [16100.0, 35.0], [16300.0, 3.0], [17000.0, 23.0], [17400.0, 27.0], [16600.0, 5.0], [17800.0, 11.0], [19000.0, 37.0], [18600.0, 1.0], [19400.0, 5.0], [20200.0, 8.0], [19800.0, 1.0], [20600.0, 1.0], [21400.0, 2.0], [21000.0, 17.0], [22200.0, 3.0], [21800.0, 5.0], [22600.0, 1.0], [23400.0, 6.0], [24200.0, 52.0], [25000.0, 11.0], [24600.0, 4.0], [25400.0, 17.0], [25800.0, 5.0], [26600.0, 5.0], [26200.0, 2.0], [27000.0, 4.0], [27400.0, 10.0], [28600.0, 4.0], [28200.0, 2.0], [29000.0, 4.0], [29400.0, 4.0], [30600.0, 3.0], [30200.0, 2.0], [29800.0, 5.0], [31000.0, 2.0], [32600.0, 14.0], [32200.0, 8.0], [31800.0, 1.0], [34000.0, 13.0], [33200.0, 2.0], [34800.0, 24.0], [35600.0, 9.0], [36400.0, 3.0], [37200.0, 28.0], [38000.0, 11.0], [38800.0, 13.0], [39600.0, 23.0], [40400.0, 13.0], [42800.0, 49.0], [41200.0, 27.0], [42000.0, 21.0], [44400.0, 18.0], [43600.0, 4.0], [46000.0, 14.0], [46800.0, 30.0], [47600.0, 12.0], [49200.0, 4.0], [50000.0, 25.0], [50800.0, 30.0], [51600.0, 21.0], [53200.0, 15.0], [52400.0, 11.0], [54800.0, 6.0], [54000.0, 14.0], [56400.0, 4.0], [55600.0, 15.0], [57200.0, 3.0], [58800.0, 8.0], [58000.0, 17.0], [60400.0, 30.0], [59600.0, 2.0], [61200.0, 5.0], [62000.0, 8.0], [62800.0, 1.0], [64400.0, 4.0], [63600.0, 14.0], [65200.0, 1.0], [68000.0, 27.0], [66400.0, 1.0], [69600.0, 2.0], [71200.0, 4.0], [72800.0, 2.0], [79200.0, 2.0], [82400.0, 2.0], [88800.0, 8.0], [476800.0, 12.0], [67900.0, 32.0], [69500.0, 2.0], [71100.0, 2.0], [72700.0, 2.0], [80700.0, 3.0], [79100.0, 2.0], [82300.0, 1.0], [34300.0, 8.0], [36700.0, 4.0], [35100.0, 17.0], [35900.0, 2.0], [38300.0, 15.0], [37500.0, 20.0], [39100.0, 13.0], [39900.0, 25.0], [40700.0, 20.0], [42300.0, 21.0], [41500.0, 16.0], [43100.0, 59.0], [44700.0, 11.0], [43900.0, 12.0], [45500.0, 24.0], [46300.0, 11.0], [47100.0, 22.0], [48700.0, 26.0], [47900.0, 29.0], [49500.0, 23.0], [51100.0, 51.0], [50300.0, 52.0], [52700.0, 23.0], [51900.0, 12.0], [54300.0, 7.0], [55100.0, 16.0], [53500.0, 20.0], [55900.0, 22.0], [56700.0, 7.0], [57500.0, 12.0], [59100.0, 8.0], [58300.0, 7.0], [60700.0, 4.0], [59900.0, 4.0], [61500.0, 1.0], [62300.0, 21.0], [63100.0, 9.0], [64700.0, 6.0], [65500.0, 5.0], [67000.0, 1.0], [68600.0, 2.0], [71800.0, 3.0], [70200.0, 2.0], [78200.0, 5.0], [91000.0, 1.0], [100600.0, 2.0], [488100.0, 6.0], [477100.0, 1.0], [69300.0, 5.0], [67700.0, 20.0], [66100.0, 3.0], [70900.0, 3.0], [80500.0, 2.0], [88500.0, 1.0], [17100.0, 10.0], [16700.0, 3.0], [17900.0, 24.0], [18300.0, 2.0], [17500.0, 31.0], [19100.0, 5.0], [18700.0, 4.0], [20300.0, 14.0], [19500.0, 5.0], [19900.0, 3.0], [21100.0, 13.0], [21500.0, 3.0], [21900.0, 5.0], [22300.0, 3.0], [23100.0, 1.0], [23500.0, 31.0], [24300.0, 11.0], [23900.0, 1.0], [25100.0, 75.0], [25500.0, 12.0], [24700.0, 3.0], [25900.0, 9.0], [26300.0, 3.0], [26700.0, 6.0], [27500.0, 7.0], [27900.0, 13.0], [28300.0, 3.0], [29100.0, 3.0], [28700.0, 4.0], [29500.0, 3.0], [30700.0, 7.0], [30300.0, 3.0], [29900.0, 12.0], [31100.0, 6.0], [31900.0, 2.0], [32300.0, 27.0], [32700.0, 5.0], [34200.0, 2.0], [35800.0, 4.0], [36600.0, 2.0], [35000.0, 13.0], [37400.0, 9.0], [38200.0, 7.0], [39800.0, 45.0], [40600.0, 29.0], [39000.0, 13.0], [41400.0, 34.0], [42200.0, 14.0], [43000.0, 16.0], [44600.0, 14.0], [43800.0, 5.0], [45400.0, 17.0], [46200.0, 9.0], [47000.0, 19.0], [48600.0, 47.0], [47800.0, 14.0], [49400.0, 16.0], [51000.0, 26.0], [50200.0, 51.0], [52600.0, 21.0], [51800.0, 9.0], [55000.0, 10.0], [53400.0, 14.0], [54200.0, 1.0], [55800.0, 43.0], [56600.0, 5.0], [57400.0, 20.0], [59000.0, 4.0], [58200.0, 4.0], [61400.0, 3.0], [60600.0, 4.0], [59800.0, 3.0], [62200.0, 16.0], [63000.0, 5.0], [64600.0, 4.0], [65400.0, 9.0], [63800.0, 3.0], [68400.0, 2.0], [66800.0, 2.0], [71600.0, 1.0], [79600.0, 19.0], [87600.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 692400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 892.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 7892.0, "series": [{"data": [[0.0, 3826.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 892.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 7892.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1447.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 17.187499999999996, "minX": 1.6869093E12, "maxY": 600.0, "series": [{"data": [[1.6869093E12, 600.0], [1.68690978E12, 528.1028911564637], [1.6869096E12, 599.986111111111], [1.68691008E12, 17.187499999999996], [1.68690966E12, 598.9148745519711], [1.68690948E12, 600.0], [1.68690954E12, 600.0], [1.68690936E12, 600.0], [1.68690984E12, 391.7496025437201], [1.68690942E12, 600.0], [1.6869099E12, 169.64960629921276], [1.68690972E12, 580.1752793296082]], "isOverall": false, "label": "RestApi", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68691008E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 692467.0, "series": [{"data": [[2.0, 476810.0], [4.0, 482432.5], [5.0, 488174.0], [7.0, 476849.0], [9.0, 401606.5], [10.0, 488129.0], [12.0, 488176.0], [13.0, 482482.5], [14.0, 488125.0], [16.0, 401421.0], [17.0, 476916.0], [18.0, 476858.0], [20.0, 482510.0], [23.0, 476916.6666666667], [24.0, 477187.0], [26.0, 476874.0], [27.0, 476831.0], [29.0, 476803.0], [30.0, 477073.0], [33.0, 276.0], [32.0, 530841.75], [35.0, 2579.5], [34.0, 459.0], [37.0, 2941.0], [36.0, 2527.0], [39.0, 192.0], [38.0, 222.0], [41.0, 4000.5], [40.0, 2859.0], [43.0, 162.0], [45.0, 174.0], [44.0, 3966.5], [47.0, 6376.111111111111], [46.0, 6165.0], [49.0, 4733.666666666666], [48.0, 186.0], [51.0, 3262.0], [50.0, 4374.5], [53.0, 208.0], [52.0, 207.0], [59.0, 195.33333333333334], [61.0, 238.0], [60.0, 207.0], [63.0, 204.0], [62.0, 222.0], [67.0, 10040.470588235294], [66.0, 201.0], [65.0, 205.0], [64.0, 205.0], [71.0, 215.0], [70.0, 3478.0], [69.0, 5242.0], [68.0, 209.0], [75.0, 4638.333333333334], [74.0, 6654.0], [73.0, 3687.5], [72.0, 181.0], [79.0, 202.0], [78.0, 200.0], [77.0, 215.5], [82.0, 203.0], [81.0, 193.0], [80.0, 235.0], [87.0, 5819.0], [86.0, 11538.083333333336], [85.0, 11236.0], [84.0, 190.0], [91.0, 7127.333333333334], [90.0, 5496.5], [89.0, 217.0], [88.0, 5677.0], [95.0, 206.5], [94.0, 223.0], [93.0, 6795.666666666666], [92.0, 220.0], [99.0, 211.0], [97.0, 147.0], [96.0, 192.0], [103.0, 180.0], [102.0, 169.0], [101.0, 220.0], [100.0, 221.0], [107.0, 160.0], [106.0, 197.0], [104.0, 155.0], [111.0, 165.0], [110.0, 5874.333333333334], [109.0, 10657.826086956522], [108.0, 14944.0], [115.0, 202.0], [114.0, 9469.0], [113.0, 11820.666666666668], [112.0, 200.0], [119.0, 770.3333333333333], [118.0, 164.0], [117.0, 159.0], [116.0, 190.5], [123.0, 228.5], [122.0, 14967.0], [121.0, 10308.5], [120.0, 198.0], [127.0, 240.0], [124.0, 208.0], [135.0, 219.66666666666666], [134.0, 197.5], [133.0, 248.6], [130.0, 247.0], [129.0, 252.0], [128.0, 250.0], [143.0, 252.0], [142.0, 189.75], [141.0, 282.0], [140.0, 252.0], [138.0, 137.5], [137.0, 0.0], [136.0, 196.0], [151.0, 303.0], [150.0, 216.0], [149.0, 226.5], [147.0, 217.8], [146.0, 263.0], [145.0, 321.0], [144.0, 226.0], [159.0, 16166.2], [157.0, 6500.000000000001], [154.0, 269.0], [153.0, 273.0], [152.0, 19000.5], [167.0, 248.0], [166.0, 223.5], [165.0, 206.0], [164.0, 9225.400000000001], [163.0, 14321.5], [162.0, 8565.0], [161.0, 16761.454545454544], [160.0, 24618.269230769227], [174.0, 227.0], [173.0, 11704.2], [172.0, 210.0], [171.0, 225.0], [170.0, 11873.3], [181.0, 202.0], [180.0, 21976.999999999993], [179.0, 5092.666666666667], [177.0, 227.0], [191.0, 165.0], [190.0, 214.33333333333331], [186.0, 173.0], [185.0, 197.0], [184.0, 195.75], [199.0, 227.33333333333334], [197.0, 299.0], [196.0, 148.66666666666666], [195.0, 250.0], [194.0, 209.0], [193.0, 16709.058823529413], [192.0, 235.0], [205.0, 293.5], [204.0, 246.0], [203.0, 303.0], [202.0, 201.33333333333334], [200.0, 169.66666666666666], [214.0, 261.0], [211.0, 93.33333333333333], [210.0, 252.0], [209.0, 294.0], [208.0, 274.6666666666667], [223.0, 261.0], [222.0, 251.0], [221.0, 313.0], [220.0, 4733.25], [219.0, 1.0], [218.0, 252.66666666666666], [217.0, 274.3333333333333], [231.0, 35619.0], [230.0, 131.5], [229.0, 254.0], [228.0, 214.25], [226.0, 295.0], [225.0, 297.0], [224.0, 251.0], [239.0, 170.0], [238.0, 5120.2], [237.0, 16876.0], [236.0, 30439.77272727273], [234.0, 22300.5], [233.0, 258.0], [232.0, 310.3333333333333], [246.0, 213.0], [245.0, 205.0], [244.0, 25160.333333333325], [243.0, 17778.75], [242.0, 17185.21052631579], [241.0, 173.0], [240.0, 171.0], [254.0, 234.0], [253.0, 232.5], [251.0, 232.5], [249.0, 207.5], [248.0, 169.66666666666666], [270.0, 27117.0], [271.0, 209.0], [269.0, 216.0], [268.0, 144.83333333333331], [267.0, 194.0], [266.0, 7895.285714285714], [265.0, 5197.454545454546], [264.0, 17211.0], [263.0, 37882.95238095239], [256.0, 179.0], [259.0, 235.0], [258.0, 233.5], [262.0, 33501.42857142857], [261.0, 178.0], [260.0, 198.0], [286.0, 191.25], [287.0, 437.5], [285.0, 18822.333333333336], [284.0, 13603.75], [283.0, 18288.555555555555], [282.0, 10852.599999999999], [281.0, 47279.71428571429], [280.0, 303.0], [279.0, 248.5], [273.0, 11085.2], [272.0, 204.0], [275.0, 36689.666666666664], [274.0, 27924.5], [278.0, 257.0], [277.0, 32992.1], [276.0, 27640.833333333332], [300.0, 20717.125], [302.0, 323.0], [303.0, 10932.0], [301.0, 340.0], [299.0, 218.33333333333334], [298.0, 312.6666666666667], [295.0, 75.25], [288.0, 18136.0], [291.0, 263.25], [289.0, 288.0], [294.0, 482.0], [293.0, 36635.66666666667], [292.0, 339.0], [317.0, 164.0], [319.0, 249.0], [316.0, 200.0], [307.0, 262.0], [306.0, 23078.14285714286], [305.0, 18059.666666666664], [304.0, 7751.5], [315.0, 20632.0], [314.0, 40750.87654320987], [313.0, 201.0], [312.0, 31457.285714285717], [311.0, 22270.799999999996], [310.0, 12761.384615384617], [309.0, 253.5], [308.0, 185.5], [334.0, 208.0], [335.0, 241.5], [333.0, 16435.53846153846], [332.0, 13393.0], [331.0, 169.0], [330.0, 168.0], [329.0, 19354.58139534884], [328.0, 205.0], [327.0, 205.0], [321.0, 212.0], [320.0, 229.0], [323.0, 169.0], [322.0, 196.0], [326.0, 206.0], [325.0, 208.0], [324.0, 214.0], [350.0, 1158.0], [351.0, 229.33333333333331], [349.0, 1187.5], [339.0, 224.0], [338.0, 255.5], [337.0, 257.0], [347.0, 1214.0], [346.0, 20897.529411764703], [345.0, 426.0], [344.0, 47350.89655172414], [343.0, 39607.5], [342.0, 231.0], [341.0, 234.0], [340.0, 244.33333333333334], [365.0, 26204.199999999997], [367.0, 19219.0], [364.0, 9579.083333333332], [355.0, 14421.999999999998], [354.0, 590.0], [353.0, 604.0], [352.0, 211.0], [362.0, 161.5], [361.0, 27316.114285714288], [360.0, 7391.333333333334], [358.0, 13763.363636363634], [357.0, 250.0], [356.0, 209.0], [383.0, 342.0], [382.0, 355.5], [377.0, 12071.25], [376.0, 18900.0], [375.0, 307.0], [374.0, 16019.0], [373.0, 40712.27272727273], [372.0, 329.0], [371.0, 302.6], [397.0, 372.0], [399.0, 314.6666666666667], [396.0, 377.5], [387.0, 343.0], [394.0, 13820.571428571428], [393.0, 64180.0], [392.0, 8157.0], [391.0, 15371.789473684212], [389.0, 361.0], [388.0, 355.0], [414.0, 177.5], [415.0, 199.33333333333334], [413.0, 215.0], [412.0, 48881.914285714294], [411.0, 21034.0], [410.0, 23444.5], [409.0, 23761.5], [408.0, 414.5], [406.0, 17891.55555555556], [401.0, 388.33333333333337], [400.0, 28352.6], [403.0, 28741.6], [402.0, 339.0], [405.0, 422.0], [404.0, 16032.333333333332], [430.0, 220.0], [431.0, 21519.0], [429.0, 217.0], [428.0, 25872.2], [427.0, 170.0], [426.0, 206.0], [425.0, 215.0], [424.0, 6360.571428571429], [423.0, 207.0], [417.0, 203.0], [416.0, 227.0], [419.0, 18261.5], [418.0, 46481.258064516136], [422.0, 15728.375000000002], [421.0, 226.0], [420.0, 190.33333333333334], [446.0, 10931.5], [447.0, 17344.1], [445.0, 243.0], [444.0, 14589.0], [443.0, 269.0], [442.0, 260.5], [441.0, 238.0], [440.0, 221.0], [439.0, 175.0], [433.0, 6277.142857142857], [432.0, 14508.333333333334], [435.0, 32357.75], [434.0, 25973.4], [438.0, 227.0], [437.0, 225.66666666666666], [436.0, 228.0], [462.0, 186.42857142857142], [463.0, 122.75], [461.0, 105.5], [460.0, 161.7], [459.0, 119.5], [458.0, 135.66666666666666], [457.0, 244.0], [456.0, 31282.827586206895], [455.0, 201.0], [449.0, 21742.5], [448.0, 21593.0], [451.0, 25794.4], [450.0, 210.0], [454.0, 187.0], [453.0, 40008.177777777775], [452.0, 241.5], [477.0, 34057.6], [479.0, 13116.250000000002], [476.0, 23877.91666666667], [467.0, 388.5], [466.0, 147.0], [465.0, 222.25], [464.0, 201.75], [475.0, 466.0], [474.0, 269.5], [473.0, 264.33333333333337], [472.0, 280.2], [471.0, 281.75], [469.0, 299.25], [494.0, 169.25], [495.0, 274.0], [493.0, 10402.0], [492.0, 110.5], [491.0, 3158.1176470588234], [490.0, 182.0], [489.0, 6595.124999999998], [488.0, 31213.704918032785], [487.0, 27149.181818181816], [481.0, 13035.0], [480.0, 152.5], [483.0, 42584.416666666664], [482.0, 28722.75], [486.0, 25646.5], [485.0, 51639.81818181818], [484.0, 29310.384615384613], [508.0, 25621.5], [510.0, 25497.333333333336], [511.0, 25560.5], [509.0, 240.0], [507.0, 254.09090909090912], [505.0, 22746.44444444445], [503.0, 15103.846153846152], [497.0, 0.0], [496.0, 215.0], [499.0, 185.0], [498.0, 21399.250000000004], [501.0, 19915.44444444444], [500.0, 254.0], [538.0, 1236.0], [542.0, 2152.363636363636], [543.0, 563.0], [529.0, 2103.423728813559], [528.0, 392.1052631578947], [531.0, 8712.42105263158], [530.0, 10862.4], [533.0, 28995.197530864207], [532.0, 18096.555555555555], [541.0, 1227.8], [540.0, 1252.0], [539.0, 1218.0], [536.0, 44676.5465116279], [519.0, 12898.875], [518.0, 10338.400000000001], [517.0, 6553.125], [515.0, 480.5], [514.0, 11849.769230769229], [513.0, 309.0], [512.0, 5260.8], [527.0, 713.1363636363637], [526.0, 1210.0], [525.0, 43181.94252873565], [524.0, 12820.75], [523.0, 395.5], [522.0, 10310.9], [521.0, 25436.5], [520.0, 21417.105263157893], [535.0, 45560.42857142857], [534.0, 8577.057142857147], [572.0, 16774.0], [575.0, 524.448275862069], [560.0, 322.75], [562.0, 17735.714285714286], [561.0, 20771.100000000002], [565.0, 217.0], [563.0, 13969.288888888885], [574.0, 1182.5], [573.0, 34787.32394366196], [571.0, 4826.88888888889], [570.0, 16610.6], [569.0, 33111.4], [568.0, 12617.4], [559.0, 21584.020134228183], [545.0, 206.8], [544.0, 39725.55633802816], [547.0, 206.0909090909091], [546.0, 183.0], [549.0, 35363.08108108108], [548.0, 223.8], [551.0, 1202.25], [550.0, 1190.0], [558.0, 54645.799999999996], [557.0, 48169.590909090904], [556.0, 451.0], [555.0, 3463.848484848486], [554.0, 616.2105263157895], [553.0, 1047.6666666666667], [552.0, 1186.0], [567.0, 304.5], [566.0, 16677.8], [600.0, 23352.188354920756], [596.0, 261.125], [599.0, 31025.130643611872], [598.0, 20364.94444444444], [597.0, 250.16666666666669], [594.0, 284.0], [593.0, 260.3], [592.0, 16583.166666666664], [591.0, 28012.0], [577.0, 369.44444444444446], [576.0, 421.875], [579.0, 253.33333333333334], [578.0, 153.0], [581.0, 47368.097457627104], [580.0, 234.0], [583.0, 16964.717391304355], [582.0, 3362.1538461538457], [590.0, 30509.409756097546], [589.0, 4118.818181818182], [588.0, 8902.837209302326], [587.0, 1907.4000000000005], [586.0, 28172.375], [585.0, 275.49999999999994], [584.0, 35914.87142857145], [1.0, 692467.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[548.5859714021437, 24662.021839652836]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 600.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.6869093E12, "maxY": 2307255.45, "series": [{"data": [[1.6869093E12, 1323489.4666666666], [1.68690978E12, 1757319.0], [1.6869096E12, 2095181.4833333334], [1.68691008E12, 1440.5333333333333], [1.68690966E12, 2088973.1666666667], [1.68690948E12, 2250422.3666666667], [1.68690954E12, 2071982.0666666667], [1.68690936E12, 2192143.683333333], [1.68690984E12, 2307255.45], [1.68690942E12, 1756991.5666666667], [1.6869099E12, 1471988.9333333333], [1.68690972E12, 2136459.183333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6869093E12, 6720.933333333333], [1.68690978E12, 3587.366666666667], [1.6869096E12, 5134.616666666667], [1.68691008E12, 0.0], [1.68690966E12, 3510.016666666667], [1.68690948E12, 3810.5833333333335], [1.68690954E12, 4719.2], [1.68690936E12, 6552.55], [1.68690984E12, 3899.3166666666666], [1.68690942E12, 4497.4], [1.6869099E12, 2445.25], [1.68690972E12, 5390.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68691008E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 10481.820355191267, "minX": 1.6869093E12, "maxY": 483410.71875000006, "series": [{"data": [[1.6869093E12, 10481.820355191267], [1.68690978E12, 22105.539115646257], [1.6869096E12, 25782.744444444434], [1.68691008E12, 483410.71875000006], [1.68690966E12, 30439.438172043032], [1.68690948E12, 24076.2014925373], [1.68690954E12, 27421.408417770857], [1.68690936E12, 25302.578011849913], [1.68690984E12, 24397.883942766333], [1.68690942E12, 27988.91497975708], [1.6869099E12, 12485.733595800511], [1.68690972E12, 26616.245810055836]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68691008E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6869093E12, "maxY": 26455.343189964125, "series": [{"data": [[1.6869093E12, 9749.945355191252], [1.68690978E12, 19248.329081632648], [1.6869096E12, 23409.395138888918], [1.68691008E12, 0.0], [1.68690966E12, 26455.343189964125], [1.68690948E12, 19968.908955223862], [1.68690954E12, 25409.115354637568], [1.68690936E12, 22733.468729427248], [1.68690984E12, 21354.28537360887], [1.68690942E12, 25340.927125506085], [1.6869099E12, 11023.779527559049], [1.68690972E12, 24476.567039106136]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68691008E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6869093E12, "maxY": 522.300546448088, "series": [{"data": [[1.6869093E12, 522.300546448088], [1.68690978E12, 214.8214285714283], [1.6869096E12, 154.2138888888888], [1.68691008E12, 0.0], [1.68690966E12, 372.2365591397853], [1.68690948E12, 224.17014925373144], [1.68690954E12, 132.90257209664873], [1.68690936E12, 270.8301514154049], [1.68690984E12, 174.67806041335422], [1.68690942E12, 211.57165991902843], [1.6869099E12, 71.99999999999999], [1.68690972E12, 110.88756983240232]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68691008E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 147.0, "minX": 1.6869093E12, "maxY": 100620.0, "series": [{"data": [[1.6869093E12, 43199.0], [1.68690978E12, 57588.0], [1.6869096E12, 79088.0], [1.68690966E12, 100620.0], [1.68690948E12, 72912.0], [1.68690954E12, 83576.0], [1.68690936E12, 58894.0], [1.68690984E12, 65131.0], [1.68690942E12, 71741.0], [1.6869099E12, 57100.0], [1.68690972E12, 88976.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6869093E12, 154.0], [1.68690978E12, 156.0], [1.6869096E12, 156.0], [1.68690966E12, 155.0], [1.68690948E12, 156.0], [1.68690954E12, 159.0], [1.68690936E12, 154.0], [1.68690984E12, 157.0], [1.68690942E12, 156.0], [1.6869099E12, 147.0], [1.68690972E12, 162.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6869093E12, 36024.2], [1.68690978E12, 53346.4], [1.6869096E12, 63638.0], [1.68690966E12, 67917.4], [1.68690948E12, 54620.799999999996], [1.68690954E12, 67829.6], [1.68690936E12, 49750.1], [1.68690984E12, 55824.6], [1.68690942E12, 57553.4], [1.6869099E12, 31774.7], [1.68690972E12, 62456.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6869093E12, 43168.46], [1.68690978E12, 54126.84], [1.6869096E12, 78771.4], [1.68690966E12, 91020.48], [1.68690948E12, 65762.90000000001], [1.68690954E12, 80577.22], [1.68690936E12, 58755.57], [1.68690984E12, 64543.219999999994], [1.68690942E12, 71393.31999999999], [1.6869099E12, 44060.11], [1.68690972E12, 88844.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6869093E12, 6912.0], [1.68690978E12, 32607.0], [1.6869096E12, 38309.0], [1.68690966E12, 37301.0], [1.68690948E12, 37832.0], [1.68690954E12, 30421.0], [1.68690936E12, 33813.5], [1.68690984E12, 21825.0], [1.68690942E12, 41911.0], [1.6869099E12, 9828.5], [1.68690972E12, 34977.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.6869093E12, 40444.5], [1.68690978E12, 53763.7], [1.6869096E12, 78435.0], [1.68690966E12, 69196.6], [1.68690948E12, 56369.4], [1.68690954E12, 68225.0], [1.68690936E12, 52564.1], [1.68690984E12, 63264.49999999999], [1.68690942E12, 64953.6], [1.6869099E12, 35473.65], [1.68690972E12, 71896.79999999999]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6869099E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 476927.0, "series": [{"data": [[2.0, 4336.5], [3.0, 227.0], [4.0, 11544.5], [5.0, 707.0], [6.0, 1219.5], [7.0, 1184.0], [8.0, 269.0], [9.0, 1170.5], [10.0, 15856.0], [11.0, 215.0], [12.0, 3216.0], [13.0, 3204.5], [14.0, 9835.0], [15.0, 4938.0], [16.0, 10360.0], [17.0, 1238.5], [18.0, 22810.0], [19.0, 1001.0], [20.0, 236.0], [22.0, 224.5], [23.0, 13244.0], [24.0, 43969.0], [25.0, 1210.0], [26.0, 232.5], [27.0, 5277.0], [28.0, 7987.0], [29.0, 13651.0], [30.0, 8492.0], [31.0, 18123.0], [33.0, 36194.0], [35.0, 803.0], [34.0, 41569.0], [36.0, 1221.5], [38.0, 267.5], [41.0, 1213.0], [42.0, 1198.0], [43.0, 229.5], [44.0, 50163.0], [45.0, 224.0], [49.0, 14569.5], [48.0, 13463.0], [51.0, 23569.0], [50.0, 15117.5], [52.0, 386.0], [53.0, 4917.0], [55.0, 55332.0], [54.0, 11232.0], [57.0, 555.0], [56.0, 351.0], [59.0, 23223.5], [60.0, 25147.0], [63.0, 6780.0], [65.0, 288.5], [67.0, 39628.0], [71.0, 46529.0], [69.0, 258.0], [70.0, 18128.0], [73.0, 11288.0], [75.0, 1215.5], [74.0, 260.0], [72.0, 25342.5], [78.0, 10636.0], [82.0, 38851.0], [80.0, 40511.5], [90.0, 1209.0], [89.0, 52172.0], [91.0, 36523.0], [95.0, 10132.0], [96.0, 1805.0], [102.0, 3121.5], [100.0, 42852.0], [107.0, 38193.0], [104.0, 21561.5], [111.0, 10079.0], [109.0, 279.5], [115.0, 9111.0], [114.0, 39326.5], [124.0, 8169.5], [127.0, 256.0], [130.0, 8979.0], [133.0, 31078.0], [129.0, 67790.5], [132.0, 456.5], [137.0, 43274.0], [136.0, 53025.0], [143.0, 27960.5], [149.0, 39802.0], [146.0, 50830.5], [144.0, 57968.0], [150.0, 40610.5], [159.0, 10641.0], [157.0, 33937.5], [153.0, 22879.0], [165.0, 12063.0], [160.0, 44089.0], [163.0, 51294.0], [171.0, 49736.0], [170.0, 37701.0], [181.0, 56470.5], [183.0, 32410.0], [188.0, 358.5], [197.0, 738.0], [193.0, 41092.0], [207.0, 40179.0], [206.0, 627.0], [200.0, 12266.0], [213.0, 67695.5], [223.0, 364.0], [221.0, 51271.0], [226.0, 17915.0], [224.0, 46607.0], [262.0, 50108.5], [275.0, 463.0], [273.0, 48268.0], [287.0, 28449.0], [292.0, 525.0], [344.0, 35033.0], [1.0, 20211.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 3800.0], [3.0, 0.0], [4.0, 11723.5], [5.0, 5921.5], [6.0, 10630.0], [8.0, 0.5], [9.0, 0.0], [10.0, 8173.0], [11.0, 7139.0], [12.0, 1.0], [13.0, 1.0], [14.0, 0.0], [15.0, 4523.0], [17.0, 1458.0], [18.0, 2691.0], [19.0, 2528.0], [24.0, 3258.5], [25.0, 382.0], [29.0, 8039.0], [30.0, 8836.0], [31.0, 16006.5], [33.0, 8164.0], [32.0, 476927.0], [35.0, 2667.0], [34.0, 15954.0], [36.0, 1.0], [42.0, 0.0], [43.0, 0.5], [45.0, 6286.0], [44.0, 6791.0], [49.0, 5280.0], [55.0, 0.0], [54.0, 1534.5], [57.0, 3329.0], [56.0, 0.0], [59.0, 4524.0], [60.0, 994.0], [65.0, 983.0], [71.0, 1199.0], [70.0, 0.0], [73.0, 1.0], [75.0, 0.0], [74.0, 0.0], [78.0, 1583.0], [90.0, 600.0], [91.0, 2882.0], [104.0, 12.0], [109.0, 0.0], [115.0, 1684.0], [114.0, 2876.0], [129.0, 1337.0], [136.0, 26.5], [143.0, 1.0], [146.0, 14697.0], [150.0, 1473.0], [159.0, 149.0], [157.0, 0.0], [153.0, 7225.0], [165.0, 1.0], [160.0, 1100.0], [163.0, 0.0], [171.0, 0.0], [181.0, 5383.0], [183.0, 119.0], [188.0, 0.0], [197.0, 293.5], [193.0, 0.0], [207.0, 1.0], [206.0, 0.0], [200.0, 92.5], [213.0, 7848.0], [223.0, 1.0], [226.0, 0.0], [224.0, 0.0], [262.0, 17123.5], [275.0, 0.0], [273.0, 10481.0], [287.0, 0.0], [292.0, 0.0], [344.0, 334.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 344.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 67790.5, "series": [{"data": [[2.0, 4336.5], [3.0, 227.0], [4.0, 11337.0], [5.0, 707.0], [6.0, 1219.5], [7.0, 1184.0], [8.0, 269.0], [9.0, 1170.5], [10.0, 14665.5], [11.0, 215.0], [12.0, 3216.0], [13.0, 3204.5], [14.0, 9835.0], [15.0, 4725.5], [16.0, 10360.0], [17.0, 1238.5], [18.0, 20783.5], [19.0, 1001.0], [20.0, 236.0], [22.0, 224.5], [23.0, 12768.0], [24.0, 41359.5], [25.0, 1210.0], [26.0, 232.5], [27.0, 5277.0], [28.0, 7912.0], [29.0, 13628.0], [30.0, 8492.0], [31.0, 12057.0], [33.0, 28770.0], [35.0, 803.0], [34.0, 32510.0], [36.0, 1221.5], [38.0, 267.5], [41.0, 1213.0], [42.0, 1198.0], [43.0, 229.5], [44.0, 37533.5], [45.0, 224.0], [49.0, 11978.5], [48.0, 13463.0], [51.0, 23569.0], [50.0, 15117.5], [52.0, 386.0], [53.0, 4917.0], [55.0, 40858.0], [54.0, 11232.0], [57.0, 555.0], [56.0, 351.0], [59.0, 20938.0], [60.0, 25147.0], [63.0, 6780.0], [65.0, 288.5], [67.0, 35616.5], [71.0, 37005.0], [69.0, 258.0], [70.0, 18128.0], [73.0, 10002.0], [75.0, 1215.5], [74.0, 260.0], [72.0, 25342.5], [78.0, 10636.0], [82.0, 33296.0], [80.0, 31932.0], [90.0, 1209.0], [89.0, 32849.0], [91.0, 33627.0], [95.0, 10132.0], [96.0, 1805.0], [102.0, 3061.5], [100.0, 37538.0], [107.0, 32721.5], [104.0, 21561.5], [111.0, 8740.0], [109.0, 279.5], [115.0, 9093.0], [114.0, 36470.5], [124.0, 5523.5], [127.0, 256.0], [130.0, 8979.0], [133.0, 27281.0], [129.0, 67790.5], [132.0, 456.5], [137.0, 37644.0], [136.0, 36635.5], [143.0, 25076.0], [149.0, 33953.0], [146.0, 42608.5], [144.0, 49971.0], [150.0, 39697.0], [159.0, 8003.0], [157.0, 30386.0], [153.0, 18958.0], [165.0, 8800.0], [160.0, 38425.0], [163.0, 44276.0], [171.0, 49736.0], [170.0, 30449.0], [181.0, 56470.5], [183.0, 30314.5], [188.0, 358.5], [197.0, 738.0], [193.0, 33281.0], [207.0, 32546.0], [206.0, 627.0], [200.0, 8807.5], [213.0, 59524.5], [223.0, 364.0], [221.0, 37853.0], [226.0, 17205.0], [224.0, 39387.5], [262.0, 47351.0], [275.0, 463.0], [273.0, 48268.0], [287.0, 28449.0], [292.0, 525.0], [344.0, 28593.0], [1.0, 19660.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 0.0], [3.0, 0.0], [4.0, 0.0], [5.0, 0.0], [6.0, 0.0], [8.0, 0.0], [9.0, 0.0], [10.0, 0.0], [11.0, 0.0], [12.0, 0.0], [13.0, 0.0], [14.0, 0.0], [15.0, 0.0], [17.0, 0.0], [18.0, 0.0], [19.0, 0.0], [24.0, 0.0], [25.0, 0.0], [29.0, 0.0], [30.0, 0.0], [31.0, 0.0], [33.0, 0.0], [32.0, 0.0], [35.0, 0.0], [34.0, 0.0], [36.0, 0.0], [42.0, 0.0], [43.0, 0.0], [45.0, 0.0], [44.0, 0.0], [49.0, 0.0], [55.0, 0.0], [54.0, 0.0], [57.0, 0.0], [56.0, 0.0], [59.0, 0.0], [60.0, 0.0], [65.0, 0.0], [71.0, 0.0], [70.0, 0.0], [73.0, 0.0], [75.0, 0.0], [74.0, 0.0], [78.0, 0.0], [90.0, 0.0], [91.0, 0.0], [104.0, 0.0], [109.0, 0.0], [115.0, 0.0], [114.0, 0.0], [129.0, 0.0], [136.0, 0.0], [143.0, 0.0], [146.0, 0.0], [150.0, 0.0], [159.0, 0.0], [157.0, 0.0], [153.0, 0.0], [165.0, 0.0], [160.0, 0.0], [163.0, 0.0], [171.0, 0.0], [181.0, 0.0], [183.0, 0.0], [188.0, 0.0], [197.0, 0.0], [193.0, 0.0], [207.0, 0.0], [206.0, 0.0], [200.0, 0.0], [213.0, 0.0], [223.0, 0.0], [226.0, 0.0], [224.0, 0.0], [262.0, 0.0], [275.0, 0.0], [273.0, 0.0], [287.0, 0.0], [292.0, 0.0], [344.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 344.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.816666666666666, "minX": 1.6869093E12, "maxY": 34.4, "series": [{"data": [[1.6869093E12, 34.4], [1.68690978E12, 18.466666666666665], [1.6869096E12, 23.983333333333334], [1.68690966E12, 18.583333333333332], [1.68690948E12, 22.333333333333332], [1.68690954E12, 21.383333333333333], [1.68690936E12, 25.316666666666666], [1.68690984E12, 17.266666666666666], [1.68690942E12, 20.583333333333332], [1.6869099E12, 8.816666666666666], [1.68690972E12, 23.15]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6869099E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.6869093E12, "maxY": 16.2, "series": [{"data": [[1.6869093E12, 14.066666666666666], [1.68690978E12, 13.25], [1.6869096E12, 14.7], [1.68690966E12, 14.7], [1.68690948E12, 16.05], [1.68690954E12, 14.566666666666666], [1.68690936E12, 15.4], [1.68690984E12, 16.2], [1.68690942E12, 12.416666666666666], [1.6869099E12, 10.4], [1.68690972E12, 14.083333333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6869093E12, 9.55], [1.68690978E12, 3.1666666666666665], [1.6869096E12, 5.95], [1.68690966E12, 2.5166666666666666], [1.68690948E12, 2.7], [1.68690954E12, 5.116666666666666], [1.68690936E12, 8.733333333333333], [1.68690984E12, 2.8333333333333335], [1.68690942E12, 5.366666666666666], [1.6869099E12, 1.7], [1.68690972E12, 6.7]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.6869093E12, 0.6833333333333333], [1.68690978E12, 2.8833333333333333], [1.6869096E12, 0.7333333333333333], [1.68690948E12, 0.9333333333333333], [1.68690936E12, 0.75], [1.68690984E12, 1.2833333333333334], [1.68690942E12, 2.55], [1.6869099E12, 0.3333333333333333], [1.68690972E12, 1.5]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.6869093E12, 0.1], [1.68690978E12, 0.3], [1.6869096E12, 2.6166666666666667], [1.68691008E12, 0.5333333333333333], [1.68690966E12, 1.3833333333333333], [1.68690948E12, 2.65], [1.68690954E12, 1.7], [1.68690936E12, 0.43333333333333335], [1.68690984E12, 0.65], [1.68690942E12, 0.25], [1.6869099E12, 0.26666666666666666], [1.68690972E12, 1.5833333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68691008E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.5333333333333333, "minX": 1.6869093E12, "maxY": 24.133333333333333, "series": [{"data": [[1.6869093E12, 23.616666666666667], [1.68690978E12, 16.416666666666668], [1.6869096E12, 20.65], [1.68690966E12, 17.216666666666665], [1.68690948E12, 18.75], [1.68690954E12, 19.683333333333334], [1.68690936E12, 24.133333333333333], [1.68690984E12, 19.033333333333335], [1.68690942E12, 17.783333333333335], [1.6869099E12, 12.1], [1.68690972E12, 20.783333333333335]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.6869093E12, 0.7833333333333333], [1.68690978E12, 3.183333333333333], [1.6869096E12, 3.35], [1.68691008E12, 0.5333333333333333], [1.68690966E12, 1.3833333333333333], [1.68690948E12, 3.5833333333333335], [1.68690954E12, 1.7], [1.68690936E12, 1.1833333333333333], [1.68690984E12, 1.9333333333333333], [1.68690942E12, 2.8], [1.6869099E12, 0.6], [1.68690972E12, 3.0833333333333335]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68691008E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.5333333333333333, "minX": 1.6869093E12, "maxY": 24.133333333333333, "series": [{"data": [[1.6869093E12, 23.616666666666667], [1.68690978E12, 16.416666666666668], [1.6869096E12, 20.65], [1.68690966E12, 17.216666666666665], [1.68690948E12, 18.75], [1.68690954E12, 19.683333333333334], [1.68690936E12, 24.133333333333333], [1.68690984E12, 19.033333333333335], [1.68690942E12, 17.783333333333335], [1.6869099E12, 12.1], [1.68690972E12, 20.783333333333335]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6869093E12, 0.7833333333333333], [1.68690978E12, 3.183333333333333], [1.6869096E12, 3.35], [1.68691008E12, 0.5333333333333333], [1.68690966E12, 1.3833333333333333], [1.68690948E12, 3.5833333333333335], [1.68690954E12, 1.7], [1.68690936E12, 1.1833333333333333], [1.68690984E12, 1.9333333333333333], [1.68690942E12, 2.8], [1.6869099E12, 0.6], [1.68690972E12, 3.0833333333333335]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68691008E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

