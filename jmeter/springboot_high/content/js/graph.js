/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 39.0, "minX": 0.0, "maxY": 271818.0, "series": [{"data": [[0.0, 39.0], [0.1, 53.0], [0.2, 57.0], [0.3, 62.0], [0.4, 65.0], [0.5, 67.0], [0.6, 69.0], [0.7, 71.0], [0.8, 72.0], [0.9, 74.0], [1.0, 75.0], [1.1, 77.0], [1.2, 78.0], [1.3, 79.0], [1.4, 81.0], [1.5, 82.0], [1.6, 83.0], [1.7, 84.0], [1.8, 85.0], [1.9, 86.0], [2.0, 88.0], [2.1, 89.0], [2.2, 90.0], [2.3, 92.0], [2.4, 93.0], [2.5, 95.0], [2.6, 96.0], [2.7, 97.0], [2.8, 98.0], [2.9, 99.0], [3.0, 101.0], [3.1, 102.0], [3.2, 103.0], [3.3, 104.0], [3.4, 105.0], [3.5, 107.0], [3.6, 108.0], [3.7, 109.0], [3.8, 110.0], [3.9, 112.0], [4.0, 113.0], [4.1, 114.0], [4.2, 115.0], [4.3, 117.0], [4.4, 118.0], [4.5, 118.0], [4.6, 119.0], [4.7, 120.0], [4.8, 121.0], [4.9, 122.0], [5.0, 122.0], [5.1, 123.0], [5.2, 124.0], [5.3, 125.0], [5.4, 126.0], [5.5, 127.0], [5.6, 128.0], [5.7, 129.0], [5.8, 130.0], [5.9, 131.0], [6.0, 132.0], [6.1, 133.0], [6.2, 134.0], [6.3, 135.0], [6.4, 136.0], [6.5, 137.0], [6.6, 138.0], [6.7, 139.0], [6.8, 140.0], [6.9, 141.0], [7.0, 142.0], [7.1, 143.0], [7.2, 144.0], [7.3, 145.0], [7.4, 145.0], [7.5, 146.0], [7.6, 147.0], [7.7, 148.0], [7.8, 149.0], [7.9, 150.0], [8.0, 151.0], [8.1, 152.0], [8.2, 153.0], [8.3, 154.0], [8.4, 154.0], [8.5, 156.0], [8.6, 156.0], [8.7, 157.0], [8.8, 158.0], [8.9, 159.0], [9.0, 160.0], [9.1, 160.0], [9.2, 161.0], [9.3, 162.0], [9.4, 163.0], [9.5, 163.0], [9.6, 164.0], [9.7, 165.0], [9.8, 166.0], [9.9, 167.0], [10.0, 168.0], [10.1, 169.0], [10.2, 170.0], [10.3, 171.0], [10.4, 172.0], [10.5, 172.0], [10.6, 173.0], [10.7, 174.0], [10.8, 175.0], [10.9, 176.0], [11.0, 177.0], [11.1, 178.0], [11.2, 179.0], [11.3, 179.0], [11.4, 180.0], [11.5, 181.0], [11.6, 182.0], [11.7, 183.0], [11.8, 183.0], [11.9, 184.0], [12.0, 185.0], [12.1, 186.0], [12.2, 187.0], [12.3, 187.0], [12.4, 188.0], [12.5, 189.0], [12.6, 190.0], [12.7, 191.0], [12.8, 193.0], [12.9, 194.0], [13.0, 195.0], [13.1, 196.0], [13.2, 197.0], [13.3, 198.0], [13.4, 199.0], [13.5, 200.0], [13.6, 201.0], [13.7, 202.0], [13.8, 203.0], [13.9, 204.0], [14.0, 205.0], [14.1, 206.0], [14.2, 207.0], [14.3, 208.0], [14.4, 209.0], [14.5, 210.0], [14.6, 211.0], [14.7, 211.0], [14.8, 212.0], [14.9, 213.0], [15.0, 214.0], [15.1, 216.0], [15.2, 217.0], [15.3, 217.0], [15.4, 218.0], [15.5, 219.0], [15.6, 220.0], [15.7, 221.0], [15.8, 222.0], [15.9, 223.0], [16.0, 224.0], [16.1, 225.0], [16.2, 226.0], [16.3, 227.0], [16.4, 228.0], [16.5, 229.0], [16.6, 230.0], [16.7, 231.0], [16.8, 232.0], [16.9, 233.0], [17.0, 234.0], [17.1, 236.0], [17.2, 237.0], [17.3, 238.0], [17.4, 240.0], [17.5, 241.0], [17.6, 242.0], [17.7, 243.0], [17.8, 244.0], [17.9, 246.0], [18.0, 247.0], [18.1, 249.0], [18.2, 250.0], [18.3, 251.0], [18.4, 252.0], [18.5, 253.0], [18.6, 255.0], [18.7, 256.0], [18.8, 257.0], [18.9, 259.0], [19.0, 261.0], [19.1, 263.0], [19.2, 264.0], [19.3, 265.0], [19.4, 267.0], [19.5, 269.0], [19.6, 270.0], [19.7, 272.0], [19.8, 273.0], [19.9, 275.0], [20.0, 276.0], [20.1, 278.0], [20.2, 280.0], [20.3, 282.0], [20.4, 283.0], [20.5, 285.0], [20.6, 287.0], [20.7, 289.0], [20.8, 291.0], [20.9, 293.0], [21.0, 295.0], [21.1, 297.0], [21.2, 299.0], [21.3, 301.0], [21.4, 303.0], [21.5, 305.0], [21.6, 307.0], [21.7, 310.0], [21.8, 312.0], [21.9, 314.0], [22.0, 316.0], [22.1, 319.0], [22.2, 322.0], [22.3, 325.0], [22.4, 327.0], [22.5, 330.0], [22.6, 334.0], [22.7, 337.0], [22.8, 339.0], [22.9, 341.0], [23.0, 345.0], [23.1, 348.0], [23.2, 352.0], [23.3, 354.0], [23.4, 356.0], [23.5, 360.0], [23.6, 364.0], [23.7, 367.0], [23.8, 371.0], [23.9, 375.0], [24.0, 378.0], [24.1, 382.0], [24.2, 387.0], [24.3, 391.0], [24.4, 396.0], [24.5, 399.0], [24.6, 402.0], [24.7, 405.0], [24.8, 409.0], [24.9, 413.0], [25.0, 419.0], [25.1, 424.0], [25.2, 431.0], [25.3, 435.0], [25.4, 442.0], [25.5, 446.0], [25.6, 453.0], [25.7, 466.0], [25.8, 474.0], [25.9, 485.0], [26.0, 499.0], [26.1, 522.0], [26.2, 548.0], [26.3, 570.0], [26.4, 595.0], [26.5, 634.0], [26.6, 694.0], [26.7, 748.0], [26.8, 778.0], [26.9, 827.0], [27.0, 871.0], [27.1, 919.0], [27.2, 953.0], [27.3, 973.0], [27.4, 1010.0], [27.5, 1043.0], [27.6, 1071.0], [27.7, 1123.0], [27.8, 1155.0], [27.9, 1181.0], [28.0, 1200.0], [28.1, 1213.0], [28.2, 1227.0], [28.3, 1240.0], [28.4, 1250.0], [28.5, 1261.0], [28.6, 1269.0], [28.7, 1280.0], [28.8, 1293.0], [28.9, 1304.0], [29.0, 1311.0], [29.1, 1320.0], [29.2, 1336.0], [29.3, 1354.0], [29.4, 1373.0], [29.5, 1385.0], [29.6, 1401.0], [29.7, 1419.0], [29.8, 1429.0], [29.9, 1439.0], [30.0, 1452.0], [30.1, 1463.0], [30.2, 1473.0], [30.3, 1494.0], [30.4, 1504.0], [30.5, 1516.0], [30.6, 1528.0], [30.7, 1542.0], [30.8, 1559.0], [30.9, 1586.0], [31.0, 1613.0], [31.1, 1655.0], [31.2, 1696.0], [31.3, 1742.0], [31.4, 1778.0], [31.5, 1807.0], [31.6, 1836.0], [31.7, 1860.0], [31.8, 1893.0], [31.9, 1916.0], [32.0, 1935.0], [32.1, 1963.0], [32.2, 1996.0], [32.3, 2034.0], [32.4, 2079.0], [32.5, 2110.0], [32.6, 2137.0], [32.7, 2172.0], [32.8, 2194.0], [32.9, 2211.0], [33.0, 2231.0], [33.1, 2245.0], [33.2, 2262.0], [33.3, 2273.0], [33.4, 2295.0], [33.5, 2319.0], [33.6, 2354.0], [33.7, 2383.0], [33.8, 2416.0], [33.9, 2441.0], [34.0, 2476.0], [34.1, 2518.0], [34.2, 2548.0], [34.3, 2597.0], [34.4, 2634.0], [34.5, 2665.0], [34.6, 2724.0], [34.7, 2749.0], [34.8, 2771.0], [34.9, 2785.0], [35.0, 2815.0], [35.1, 2844.0], [35.2, 2895.0], [35.3, 2936.0], [35.4, 2980.0], [35.5, 3022.0], [35.6, 3058.0], [35.7, 3102.0], [35.8, 3152.0], [35.9, 3181.0], [36.0, 3209.0], [36.1, 3222.0], [36.2, 3232.0], [36.3, 3249.0], [36.4, 3264.0], [36.5, 3275.0], [36.6, 3287.0], [36.7, 3295.0], [36.8, 3303.0], [36.9, 3314.0], [37.0, 3329.0], [37.1, 3340.0], [37.2, 3355.0], [37.3, 3369.0], [37.4, 3387.0], [37.5, 3404.0], [37.6, 3428.0], [37.7, 3476.0], [37.8, 3535.0], [37.9, 3611.0], [38.0, 3680.0], [38.1, 3764.0], [38.2, 3862.0], [38.3, 3968.0], [38.4, 4089.0], [38.5, 4188.0], [38.6, 4223.0], [38.7, 4296.0], [38.8, 4337.0], [38.9, 4387.0], [39.0, 4443.0], [39.1, 4497.0], [39.2, 4529.0], [39.3, 4579.0], [39.4, 4642.0], [39.5, 4715.0], [39.6, 4804.0], [39.7, 4881.0], [39.8, 4959.0], [39.9, 5028.0], [40.0, 5100.0], [40.1, 5215.0], [40.2, 5365.0], [40.3, 5491.0], [40.4, 5627.0], [40.5, 5722.0], [40.6, 5845.0], [40.7, 5922.0], [40.8, 5965.0], [40.9, 6032.0], [41.0, 6141.0], [41.1, 6245.0], [41.2, 6270.0], [41.3, 6328.0], [41.4, 6440.0], [41.5, 6505.0], [41.6, 6580.0], [41.7, 6654.0], [41.8, 6730.0], [41.9, 6820.0], [42.0, 6900.0], [42.1, 6932.0], [42.2, 6988.0], [42.3, 7022.0], [42.4, 7113.0], [42.5, 7171.0], [42.6, 7260.0], [42.7, 7335.0], [42.8, 7389.0], [42.9, 7444.0], [43.0, 7576.0], [43.1, 7673.0], [43.2, 7757.0], [43.3, 7801.0], [43.4, 7863.0], [43.5, 7923.0], [43.6, 8007.0], [43.7, 8132.0], [43.8, 8215.0], [43.9, 8280.0], [44.0, 8346.0], [44.1, 8381.0], [44.2, 8452.0], [44.3, 8496.0], [44.4, 8577.0], [44.5, 8645.0], [44.6, 8762.0], [44.7, 8862.0], [44.8, 8909.0], [44.9, 8931.0], [45.0, 8962.0], [45.1, 8991.0], [45.2, 9040.0], [45.3, 9084.0], [45.4, 9140.0], [45.5, 9212.0], [45.6, 9250.0], [45.7, 9279.0], [45.8, 9325.0], [45.9, 9368.0], [46.0, 9403.0], [46.1, 9423.0], [46.2, 9442.0], [46.3, 9473.0], [46.4, 9523.0], [46.5, 9558.0], [46.6, 9613.0], [46.7, 9643.0], [46.8, 9680.0], [46.9, 9710.0], [47.0, 9756.0], [47.1, 9789.0], [47.2, 9838.0], [47.3, 9887.0], [47.4, 9951.0], [47.5, 10015.0], [47.6, 10054.0], [47.7, 10110.0], [47.8, 10158.0], [47.9, 10208.0], [48.0, 10230.0], [48.1, 10269.0], [48.2, 10311.0], [48.3, 10338.0], [48.4, 10393.0], [48.5, 10449.0], [48.6, 10514.0], [48.7, 10546.0], [48.8, 10587.0], [48.9, 10669.0], [49.0, 10762.0], [49.1, 10828.0], [49.2, 10866.0], [49.3, 10915.0], [49.4, 10958.0], [49.5, 10993.0], [49.6, 11040.0], [49.7, 11093.0], [49.8, 11141.0], [49.9, 11197.0], [50.0, 11255.0], [50.1, 11299.0], [50.2, 11359.0], [50.3, 11379.0], [50.4, 11414.0], [50.5, 11455.0], [50.6, 11490.0], [50.7, 11535.0], [50.8, 11585.0], [50.9, 11649.0], [51.0, 11701.0], [51.1, 11732.0], [51.2, 11773.0], [51.3, 11827.0], [51.4, 11868.0], [51.5, 11902.0], [51.6, 11955.0], [51.7, 12001.0], [51.8, 12041.0], [51.9, 12123.0], [52.0, 12224.0], [52.1, 12320.0], [52.2, 12375.0], [52.3, 12431.0], [52.4, 12487.0], [52.5, 12553.0], [52.6, 12606.0], [52.7, 12662.0], [52.8, 12741.0], [52.9, 12798.0], [53.0, 12872.0], [53.1, 12929.0], [53.2, 13024.0], [53.3, 13091.0], [53.4, 13176.0], [53.5, 13239.0], [53.6, 13294.0], [53.7, 13343.0], [53.8, 13403.0], [53.9, 13460.0], [54.0, 13532.0], [54.1, 13600.0], [54.2, 13653.0], [54.3, 13683.0], [54.4, 13751.0], [54.5, 13823.0], [54.6, 13875.0], [54.7, 13929.0], [54.8, 13980.0], [54.9, 14021.0], [55.0, 14044.0], [55.1, 14094.0], [55.2, 14132.0], [55.3, 14160.0], [55.4, 14197.0], [55.5, 14236.0], [55.6, 14268.0], [55.7, 14299.0], [55.8, 14331.0], [55.9, 14367.0], [56.0, 14403.0], [56.1, 14437.0], [56.2, 14480.0], [56.3, 14513.0], [56.4, 14584.0], [56.5, 14628.0], [56.6, 14682.0], [56.7, 14734.0], [56.8, 14803.0], [56.9, 14850.0], [57.0, 14902.0], [57.1, 14967.0], [57.2, 15048.0], [57.3, 15101.0], [57.4, 15186.0], [57.5, 15233.0], [57.6, 15286.0], [57.7, 15341.0], [57.8, 15385.0], [57.9, 15458.0], [58.0, 15497.0], [58.1, 15522.0], [58.2, 15564.0], [58.3, 15584.0], [58.4, 15607.0], [58.5, 15644.0], [58.6, 15672.0], [58.7, 15703.0], [58.8, 15736.0], [58.9, 15758.0], [59.0, 15808.0], [59.1, 15864.0], [59.2, 15882.0], [59.3, 15910.0], [59.4, 15943.0], [59.5, 15973.0], [59.6, 15989.0], [59.7, 16026.0], [59.8, 16061.0], [59.9, 16086.0], [60.0, 16123.0], [60.1, 16159.0], [60.2, 16191.0], [60.3, 16211.0], [60.4, 16260.0], [60.5, 16313.0], [60.6, 16347.0], [60.7, 16399.0], [60.8, 16454.0], [60.9, 16505.0], [61.0, 16565.0], [61.1, 16624.0], [61.2, 16665.0], [61.3, 16712.0], [61.4, 16751.0], [61.5, 16827.0], [61.6, 16881.0], [61.7, 16935.0], [61.8, 16993.0], [61.9, 17032.0], [62.0, 17070.0], [62.1, 17104.0], [62.2, 17145.0], [62.3, 17191.0], [62.4, 17237.0], [62.5, 17270.0], [62.6, 17300.0], [62.7, 17346.0], [62.8, 17414.0], [62.9, 17471.0], [63.0, 17512.0], [63.1, 17547.0], [63.2, 17586.0], [63.3, 17633.0], [63.4, 17677.0], [63.5, 17725.0], [63.6, 17781.0], [63.7, 17865.0], [63.8, 17916.0], [63.9, 17982.0], [64.0, 18026.0], [64.1, 18078.0], [64.2, 18148.0], [64.3, 18207.0], [64.4, 18274.0], [64.5, 18321.0], [64.6, 18390.0], [64.7, 18472.0], [64.8, 18550.0], [64.9, 18613.0], [65.0, 18701.0], [65.1, 18748.0], [65.2, 18796.0], [65.3, 18839.0], [65.4, 18894.0], [65.5, 18940.0], [65.6, 19023.0], [65.7, 19083.0], [65.8, 19145.0], [65.9, 19202.0], [66.0, 19262.0], [66.1, 19308.0], [66.2, 19363.0], [66.3, 19447.0], [66.4, 19510.0], [66.5, 19583.0], [66.6, 19627.0], [66.7, 19730.0], [66.8, 19813.0], [66.9, 19922.0], [67.0, 20004.0], [67.1, 20062.0], [67.2, 20136.0], [67.3, 20201.0], [67.4, 20288.0], [67.5, 20382.0], [67.6, 20456.0], [67.7, 20518.0], [67.8, 20582.0], [67.9, 20623.0], [68.0, 20714.0], [68.1, 20795.0], [68.2, 20839.0], [68.3, 20914.0], [68.4, 20991.0], [68.5, 21072.0], [68.6, 21147.0], [68.7, 21224.0], [68.8, 21316.0], [68.9, 21367.0], [69.0, 21419.0], [69.1, 21449.0], [69.2, 21495.0], [69.3, 21562.0], [69.4, 21628.0], [69.5, 21707.0], [69.6, 21780.0], [69.7, 21844.0], [69.8, 21915.0], [69.9, 21972.0], [70.0, 22026.0], [70.1, 22078.0], [70.2, 22147.0], [70.3, 22243.0], [70.4, 22319.0], [70.5, 22381.0], [70.6, 22444.0], [70.7, 22491.0], [70.8, 22558.0], [70.9, 22617.0], [71.0, 22665.0], [71.1, 22727.0], [71.2, 22787.0], [71.3, 22862.0], [71.4, 22917.0], [71.5, 22965.0], [71.6, 23006.0], [71.7, 23037.0], [71.8, 23065.0], [71.9, 23099.0], [72.0, 23134.0], [72.1, 23176.0], [72.2, 23229.0], [72.3, 23258.0], [72.4, 23309.0], [72.5, 23401.0], [72.6, 23438.0], [72.7, 23480.0], [72.8, 23514.0], [72.9, 23579.0], [73.0, 23630.0], [73.1, 23665.0], [73.2, 23705.0], [73.3, 23762.0], [73.4, 23829.0], [73.5, 23901.0], [73.6, 23987.0], [73.7, 24048.0], [73.8, 24129.0], [73.9, 24207.0], [74.0, 24320.0], [74.1, 24395.0], [74.2, 24507.0], [74.3, 24638.0], [74.4, 24756.0], [74.5, 24898.0], [74.6, 24988.0], [74.7, 25053.0], [74.8, 25139.0], [74.9, 25233.0], [75.0, 25344.0], [75.1, 25435.0], [75.2, 25502.0], [75.3, 25586.0], [75.4, 25650.0], [75.5, 25696.0], [75.6, 25733.0], [75.7, 25814.0], [75.8, 25901.0], [75.9, 26004.0], [76.0, 26054.0], [76.1, 26097.0], [76.2, 26161.0], [76.3, 26267.0], [76.4, 26423.0], [76.5, 26602.0], [76.6, 26687.0], [76.7, 26844.0], [76.8, 26983.0], [76.9, 27106.0], [77.0, 27244.0], [77.1, 27378.0], [77.2, 27418.0], [77.3, 27492.0], [77.4, 27590.0], [77.5, 27695.0], [77.6, 27843.0], [77.7, 27996.0], [77.8, 28143.0], [77.9, 28306.0], [78.0, 28488.0], [78.1, 28620.0], [78.2, 28777.0], [78.3, 28894.0], [78.4, 29025.0], [78.5, 29166.0], [78.6, 29252.0], [78.7, 29397.0], [78.8, 29527.0], [78.9, 29685.0], [79.0, 29879.0], [79.1, 30021.0], [79.2, 30195.0], [79.3, 30350.0], [79.4, 30470.0], [79.5, 30607.0], [79.6, 30726.0], [79.7, 30836.0], [79.8, 30898.0], [79.9, 30948.0], [80.0, 31014.0], [80.1, 31105.0], [80.2, 31169.0], [80.3, 31229.0], [80.4, 31288.0], [80.5, 31373.0], [80.6, 31462.0], [80.7, 31546.0], [80.8, 31601.0], [80.9, 31660.0], [81.0, 31754.0], [81.1, 31819.0], [81.2, 31896.0], [81.3, 31949.0], [81.4, 32015.0], [81.5, 32095.0], [81.6, 32161.0], [81.7, 32239.0], [81.8, 32350.0], [81.9, 32432.0], [82.0, 32536.0], [82.1, 32645.0], [82.2, 32743.0], [82.3, 32827.0], [82.4, 32924.0], [82.5, 33012.0], [82.6, 33143.0], [82.7, 33179.0], [82.8, 33281.0], [82.9, 33387.0], [83.0, 33501.0], [83.1, 33567.0], [83.2, 33703.0], [83.3, 33808.0], [83.4, 33933.0], [83.5, 34009.0], [83.6, 34083.0], [83.7, 34142.0], [83.8, 34236.0], [83.9, 34307.0], [84.0, 34369.0], [84.1, 34461.0], [84.2, 34521.0], [84.3, 34610.0], [84.4, 34662.0], [84.5, 34747.0], [84.6, 34833.0], [84.7, 34882.0], [84.8, 34936.0], [84.9, 35012.0], [85.0, 35099.0], [85.1, 35173.0], [85.2, 35260.0], [85.3, 35332.0], [85.4, 35416.0], [85.5, 35512.0], [85.6, 35671.0], [85.7, 35792.0], [85.8, 35886.0], [85.9, 35967.0], [86.0, 36116.0], [86.1, 36223.0], [86.2, 36337.0], [86.3, 36447.0], [86.4, 36537.0], [86.5, 36646.0], [86.6, 36734.0], [86.7, 36903.0], [86.8, 37006.0], [86.9, 37180.0], [87.0, 37275.0], [87.1, 37382.0], [87.2, 37519.0], [87.3, 37625.0], [87.4, 37770.0], [87.5, 37921.0], [87.6, 38029.0], [87.7, 38206.0], [87.8, 38338.0], [87.9, 38494.0], [88.0, 38567.0], [88.1, 38645.0], [88.2, 38782.0], [88.3, 38913.0], [88.4, 39066.0], [88.5, 39214.0], [88.6, 39327.0], [88.7, 39446.0], [88.8, 39553.0], [88.9, 39678.0], [89.0, 39788.0], [89.1, 39864.0], [89.2, 40011.0], [89.3, 40107.0], [89.4, 40258.0], [89.5, 40387.0], [89.6, 40486.0], [89.7, 40624.0], [89.8, 40827.0], [89.9, 40968.0], [90.0, 41182.0], [90.1, 41357.0], [90.2, 41490.0], [90.3, 41608.0], [90.4, 41767.0], [90.5, 41917.0], [90.6, 42094.0], [90.7, 42262.0], [90.8, 42421.0], [90.9, 42542.0], [91.0, 42646.0], [91.1, 42752.0], [91.2, 42851.0], [91.3, 42943.0], [91.4, 43175.0], [91.5, 43329.0], [91.6, 43452.0], [91.7, 43653.0], [91.8, 43974.0], [91.9, 44205.0], [92.0, 44449.0], [92.1, 44652.0], [92.2, 44923.0], [92.3, 45106.0], [92.4, 45378.0], [92.5, 45581.0], [92.6, 45896.0], [92.7, 46166.0], [92.8, 46467.0], [92.9, 46689.0], [93.0, 47027.0], [93.1, 47260.0], [93.2, 47515.0], [93.3, 47746.0], [93.4, 48187.0], [93.5, 48455.0], [93.6, 48815.0], [93.7, 49164.0], [93.8, 49600.0], [93.9, 50072.0], [94.0, 50452.0], [94.1, 50754.0], [94.2, 51044.0], [94.3, 51429.0], [94.4, 51831.0], [94.5, 52208.0], [94.6, 52564.0], [94.7, 53012.0], [94.8, 53367.0], [94.9, 53757.0], [95.0, 54145.0], [95.1, 54468.0], [95.2, 54797.0], [95.3, 55275.0], [95.4, 55727.0], [95.5, 56157.0], [95.6, 56738.0], [95.7, 57163.0], [95.8, 57543.0], [95.9, 57915.0], [96.0, 58170.0], [96.1, 58578.0], [96.2, 58916.0], [96.3, 59273.0], [96.4, 59686.0], [96.5, 60005.0], [96.6, 60680.0], [96.7, 61537.0], [96.8, 62005.0], [96.9, 62594.0], [97.0, 63213.0], [97.1, 63602.0], [97.2, 64130.0], [97.3, 64526.0], [97.4, 65017.0], [97.5, 65751.0], [97.6, 66282.0], [97.7, 67156.0], [97.8, 67897.0], [97.9, 68651.0], [98.0, 69244.0], [98.1, 69656.0], [98.2, 70563.0], [98.3, 71618.0], [98.4, 72792.0], [98.5, 73653.0], [98.6, 74586.0], [98.7, 75655.0], [98.8, 76771.0], [98.9, 77843.0], [99.0, 79199.0], [99.1, 80357.0], [99.2, 81501.0], [99.3, 82705.0], [99.4, 84551.0], [99.5, 86365.0], [99.6, 88777.0], [99.7, 90994.0], [99.8, 94205.0], [99.9, 99865.0], [100.0, 271818.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 2281.0, "series": [{"data": [[0.0, 628.0], [66700.0, 4.0], [69900.0, 6.0], [73100.0, 2.0], [76300.0, 2.0], [79500.0, 1.0], [85900.0, 1.0], [82700.0, 3.0], [98700.0, 1.0], [105100.0, 1.0], [265300.0, 1.0], [100.0, 2281.0], [34500.0, 28.0], [32900.0, 24.0], [36100.0, 19.0], [37700.0, 8.0], [40900.0, 16.0], [39300.0, 18.0], [42500.0, 15.0], [44100.0, 9.0], [45700.0, 2.0], [47300.0, 9.0], [48900.0, 6.0], [50500.0, 9.0], [200.0, 1678.0], [52100.0, 7.0], [53700.0, 5.0], [55300.0, 4.0], [56900.0, 7.0], [58500.0, 10.0], [60100.0, 1.0], [61700.0, 3.0], [63300.0, 3.0], [64900.0, 6.0], [69000.0, 4.0], [65800.0, 5.0], [72200.0, 1.0], [300.0, 711.0], [75400.0, 2.0], [78600.0, 1.0], [81800.0, 1.0], [85000.0, 2.0], [400.0, 318.0], [107400.0, 1.0], [500.0, 88.0], [600.0, 43.0], [700.0, 51.0], [800.0, 46.0], [900.0, 67.0], [1000.0, 64.0], [1100.0, 72.0], [1200.0, 184.0], [1300.0, 161.0], [1400.0, 161.0], [1500.0, 134.0], [1600.0, 54.0], [1700.0, 57.0], [1800.0, 80.0], [1900.0, 82.0], [2000.0, 54.0], [2100.0, 80.0], [2200.0, 127.0], [2300.0, 70.0], [2400.0, 63.0], [2500.0, 56.0], [2600.0, 55.0], [2700.0, 86.0], [2800.0, 54.0], [2900.0, 55.0], [3000.0, 50.0], [3100.0, 55.0], [3200.0, 173.0], [3300.0, 154.0], [3400.0, 55.0], [3500.0, 36.0], [3600.0, 33.0], [3700.0, 22.0], [3800.0, 22.0], [3900.0, 16.0], [4000.0, 21.0], [4200.0, 41.0], [68100.0, 5.0], [4400.0, 35.0], [4600.0, 37.0], [71300.0, 2.0], [4800.0, 27.0], [77700.0, 3.0], [74500.0, 2.0], [5000.0, 33.0], [80900.0, 1.0], [5200.0, 13.0], [84100.0, 2.0], [5400.0, 16.0], [5600.0, 14.0], [5800.0, 28.0], [6000.0, 23.0], [6200.0, 43.0], [6400.0, 23.0], [6600.0, 26.0], [6800.0, 29.0], [7000.0, 33.0], [7200.0, 26.0], [7400.0, 24.0], [7600.0, 23.0], [7800.0, 40.0], [8000.0, 15.0], [8400.0, 36.0], [8800.0, 32.0], [9200.0, 54.0], [9600.0, 62.0], [10000.0, 41.0], [10400.0, 37.0], [10800.0, 46.0], [11200.0, 43.0], [11600.0, 35.0], [12000.0, 36.0], [12400.0, 37.0], [12800.0, 30.0], [13200.0, 40.0], [13600.0, 52.0], [14000.0, 62.0], [14400.0, 60.0], [14800.0, 45.0], [15200.0, 41.0], [15600.0, 68.0], [16000.0, 71.0], [16800.0, 37.0], [17600.0, 46.0], [18400.0, 25.0], [19200.0, 43.0], [20000.0, 37.0], [20800.0, 33.0], [22400.0, 42.0], [21600.0, 25.0], [23200.0, 54.0], [24000.0, 33.0], [24800.0, 19.0], [25600.0, 39.0], [26400.0, 13.0], [27200.0, 13.0], [28000.0, 12.0], [29600.0, 14.0], [28800.0, 19.0], [30400.0, 19.0], [31200.0, 33.0], [32000.0, 29.0], [33600.0, 14.0], [35200.0, 30.0], [36800.0, 10.0], [38400.0, 14.0], [40000.0, 20.0], [41600.0, 15.0], [43200.0, 15.0], [44800.0, 10.0], [46400.0, 6.0], [48000.0, 8.0], [49600.0, 5.0], [51200.0, 3.0], [52800.0, 4.0], [54400.0, 9.0], [56000.0, 7.0], [57600.0, 1.0], [59200.0, 5.0], [60800.0, 3.0], [62400.0, 2.0], [64000.0, 2.0], [67200.0, 2.0], [73600.0, 2.0], [70400.0, 3.0], [76800.0, 1.0], [80000.0, 3.0], [86400.0, 2.0], [89600.0, 2.0], [102400.0, 1.0], [115200.0, 1.0], [67100.0, 3.0], [73500.0, 4.0], [70300.0, 1.0], [76700.0, 2.0], [79900.0, 2.0], [83100.0, 2.0], [89500.0, 1.0], [86300.0, 1.0], [34700.0, 22.0], [33100.0, 33.0], [36300.0, 16.0], [37900.0, 17.0], [39500.0, 19.0], [41100.0, 14.0], [42700.0, 24.0], [44300.0, 9.0], [45900.0, 9.0], [47500.0, 7.0], [49100.0, 10.0], [50700.0, 7.0], [52300.0, 6.0], [53900.0, 3.0], [57100.0, 5.0], [55500.0, 5.0], [58700.0, 5.0], [60300.0, 3.0], [61900.0, 3.0], [63500.0, 5.0], [65100.0, 5.0], [66200.0, 5.0], [72600.0, 3.0], [75800.0, 5.0], [79000.0, 1.0], [82200.0, 2.0], [85400.0, 2.0], [95000.0, 1.0], [98200.0, 1.0], [68500.0, 1.0], [74900.0, 3.0], [78100.0, 3.0], [84500.0, 2.0], [90900.0, 3.0], [100500.0, 1.0], [103700.0, 1.0], [16900.0, 40.0], [17700.0, 35.0], [19300.0, 36.0], [18500.0, 31.0], [20100.0, 28.0], [20900.0, 35.0], [22500.0, 32.0], [21700.0, 29.0], [23300.0, 25.0], [24100.0, 27.0], [24900.0, 26.0], [25700.0, 36.0], [26500.0, 12.0], [27300.0, 30.0], [28100.0, 15.0], [28900.0, 17.0], [30500.0, 11.0], [29700.0, 10.0], [31300.0, 31.0], [32100.0, 34.0], [33800.0, 18.0], [35400.0, 20.0], [37000.0, 14.0], [38600.0, 22.0], [40200.0, 19.0], [41800.0, 14.0], [43400.0, 16.0], [45000.0, 12.0], [46600.0, 6.0], [48200.0, 9.0], [49800.0, 4.0], [51400.0, 6.0], [53000.0, 8.0], [54600.0, 5.0], [56200.0, 4.0], [57800.0, 2.0], [59400.0, 5.0], [61000.0, 5.0], [62600.0, 4.0], [64200.0, 8.0], [67600.0, 2.0], [70800.0, 2.0], [74000.0, 2.0], [77200.0, 4.0], [80400.0, 5.0], [90000.0, 4.0], [93200.0, 1.0], [67500.0, 2.0], [70700.0, 4.0], [77100.0, 1.0], [73900.0, 2.0], [80300.0, 2.0], [83500.0, 2.0], [33300.0, 20.0], [34900.0, 26.0], [36500.0, 15.0], [38100.0, 10.0], [39700.0, 22.0], [41300.0, 11.0], [42900.0, 16.0], [44500.0, 9.0], [46100.0, 8.0], [47700.0, 7.0], [49300.0, 4.0], [50900.0, 10.0], [52500.0, 3.0], [54100.0, 10.0], [57300.0, 5.0], [55700.0, 3.0], [58900.0, 8.0], [60500.0, 7.0], [62100.0, 3.0], [63700.0, 5.0], [65300.0, 3.0], [66600.0, 2.0], [73000.0, 3.0], [69800.0, 2.0], [76200.0, 2.0], [79400.0, 1.0], [85800.0, 1.0], [89000.0, 1.0], [92200.0, 3.0], [98600.0, 1.0], [68900.0, 5.0], [65700.0, 3.0], [72100.0, 1.0], [75300.0, 3.0], [78500.0, 4.0], [81700.0, 3.0], [84900.0, 1.0], [88100.0, 1.0], [94500.0, 1.0], [97700.0, 1.0], [8500.0, 29.0], [8900.0, 73.0], [9300.0, 53.0], [9700.0, 56.0], [10100.0, 49.0], [10500.0, 50.0], [10900.0, 52.0], [11300.0, 57.0], [11700.0, 57.0], [12100.0, 26.0], [12500.0, 31.0], [12900.0, 31.0], [13300.0, 38.0], [13700.0, 29.0], [14100.0, 62.0], [14500.0, 36.0], [15300.0, 39.0], [14900.0, 29.0], [15700.0, 62.0], [16100.0, 63.0], [17000.0, 59.0], [17800.0, 33.0], [18600.0, 26.0], [19400.0, 27.0], [20200.0, 27.0], [21000.0, 22.0], [21800.0, 32.0], [23400.0, 56.0], [22600.0, 43.0], [24200.0, 18.0], [25000.0, 26.0], [25800.0, 27.0], [26600.0, 25.0], [27400.0, 33.0], [28200.0, 14.0], [29000.0, 14.0], [29800.0, 14.0], [30600.0, 23.0], [31400.0, 18.0], [32200.0, 21.0], [34000.0, 32.0], [35600.0, 10.0], [37200.0, 23.0], [38800.0, 16.0], [40400.0, 18.0], [42000.0, 11.0], [43600.0, 5.0], [45200.0, 8.0], [46800.0, 7.0], [48400.0, 8.0], [50000.0, 3.0], [53200.0, 2.0], [51600.0, 4.0], [54800.0, 8.0], [56400.0, 4.0], [58000.0, 9.0], [59600.0, 4.0], [61200.0, 5.0], [62800.0, 3.0], [64400.0, 7.0], [68000.0, 4.0], [71200.0, 3.0], [74400.0, 6.0], [80800.0, 4.0], [93600.0, 1.0], [96800.0, 1.0], [100000.0, 2.0], [103200.0, 1.0], [67900.0, 2.0], [71100.0, 2.0], [74300.0, 3.0], [83900.0, 2.0], [93500.0, 2.0], [96700.0, 3.0], [33500.0, 29.0], [35100.0, 25.0], [36700.0, 19.0], [38300.0, 18.0], [39900.0, 13.0], [41500.0, 19.0], [43100.0, 18.0], [44700.0, 3.0], [46300.0, 8.0], [47900.0, 1.0], [51100.0, 9.0], [49500.0, 3.0], [52700.0, 1.0], [54300.0, 4.0], [55900.0, 5.0], [57500.0, 9.0], [59100.0, 6.0], [62300.0, 8.0], [65500.0, 4.0], [63900.0, 6.0], [67000.0, 1.0], [73400.0, 1.0], [70200.0, 1.0], [76600.0, 1.0], [79800.0, 2.0], [83000.0, 1.0], [86200.0, 3.0], [92600.0, 2.0], [99000.0, 1.0], [102200.0, 1.0], [69300.0, 9.0], [72500.0, 1.0], [75700.0, 3.0], [78900.0, 1.0], [82100.0, 1.0], [85300.0, 1.0], [88500.0, 2.0], [91700.0, 3.0], [94900.0, 2.0], [17100.0, 52.0], [17900.0, 37.0], [18700.0, 47.0], [20300.0, 25.0], [19500.0, 33.0], [21100.0, 31.0], [21900.0, 32.0], [22700.0, 38.0], [23500.0, 36.0], [24300.0, 29.0], [25100.0, 24.0], [25900.0, 22.0], [26700.0, 11.0], [27500.0, 22.0], [28300.0, 12.0], [29100.0, 22.0], [29900.0, 12.0], [30700.0, 14.0], [31500.0, 33.0], [32300.0, 21.0], [34200.0, 27.0], [35800.0, 20.0], [37400.0, 12.0], [39000.0, 15.0], [40600.0, 14.0], [42200.0, 17.0], [43800.0, 8.0], [45400.0, 13.0], [47000.0, 7.0], [48600.0, 6.0], [50200.0, 5.0], [51800.0, 3.0], [55000.0, 5.0], [53400.0, 4.0], [56600.0, 6.0], [58200.0, 6.0], [61400.0, 2.0], [59800.0, 4.0], [63000.0, 4.0], [64600.0, 4.0], [68400.0, 2.0], [71600.0, 3.0], [74800.0, 1.0], [81200.0, 2.0], [78000.0, 1.0], [84400.0, 2.0], [90800.0, 1.0], [68300.0, 2.0], [71500.0, 2.0], [74700.0, 1.0], [77900.0, 2.0], [81100.0, 2.0], [84300.0, 1.0], [87500.0, 1.0], [90700.0, 2.0], [93900.0, 1.0], [97100.0, 1.0], [33700.0, 20.0], [35300.0, 29.0], [38500.0, 30.0], [36900.0, 21.0], [40100.0, 13.0], [41700.0, 13.0], [44900.0, 12.0], [43300.0, 14.0], [46500.0, 12.0], [48100.0, 5.0], [49700.0, 5.0], [51300.0, 3.0], [52900.0, 9.0], [54500.0, 8.0], [56100.0, 6.0], [57700.0, 7.0], [59300.0, 6.0], [60900.0, 1.0], [62500.0, 4.0], [64100.0, 3.0], [67400.0, 4.0], [70600.0, 2.0], [77000.0, 3.0], [73800.0, 2.0], [80200.0, 1.0], [86600.0, 1.0], [96200.0, 1.0], [4300.0, 50.0], [4100.0, 25.0], [4500.0, 45.0], [69700.0, 2.0], [4700.0, 21.0], [76100.0, 2.0], [5100.0, 21.0], [4900.0, 29.0], [79300.0, 3.0], [5300.0, 17.0], [85700.0, 3.0], [82500.0, 4.0], [5500.0, 16.0], [88900.0, 2.0], [5700.0, 23.0], [5900.0, 36.0], [6100.0, 18.0], [95300.0, 1.0], [6300.0, 30.0], [6500.0, 30.0], [6700.0, 26.0], [6900.0, 51.0], [7100.0, 32.0], [7300.0, 35.0], [7500.0, 19.0], [7700.0, 36.0], [7900.0, 24.0], [8100.0, 27.0], [8200.0, 30.0], [8600.0, 25.0], [9000.0, 46.0], [9400.0, 77.0], [150200.0, 1.0], [10200.0, 62.0], [9800.0, 43.0], [10600.0, 30.0], [11000.0, 42.0], [11400.0, 57.0], [11800.0, 53.0], [12200.0, 22.0], [12600.0, 33.0], [13000.0, 26.0], [13400.0, 35.0], [13800.0, 38.0], [14200.0, 64.0], [14600.0, 47.0], [15000.0, 35.0], [15400.0, 45.0], [15800.0, 64.0], [16200.0, 57.0], [17200.0, 57.0], [16400.0, 37.0], [18000.0, 40.0], [18800.0, 46.0], [19600.0, 28.0], [20400.0, 25.0], [21200.0, 24.0], [22000.0, 46.0], [22800.0, 27.0], [23600.0, 56.0], [24400.0, 17.0], [25200.0, 29.0], [26000.0, 44.0], [27600.0, 21.0], [26800.0, 13.0], [28400.0, 13.0], [29200.0, 21.0], [30000.0, 13.0], [31600.0, 34.0], [30800.0, 34.0], [32400.0, 22.0], [32800.0, 24.0], [34400.0, 26.0], [36000.0, 14.0], [37600.0, 22.0], [39200.0, 17.0], [40800.0, 16.0], [42400.0, 22.0], [44000.0, 8.0], [45600.0, 8.0], [48800.0, 7.0], [47200.0, 9.0], [50400.0, 7.0], [52000.0, 4.0], [53600.0, 8.0], [55200.0, 3.0], [56800.0, 5.0], [58400.0, 5.0], [60000.0, 5.0], [63200.0, 9.0], [61600.0, 2.0], [64800.0, 2.0], [68800.0, 3.0], [65600.0, 3.0], [72000.0, 1.0], [75200.0, 2.0], [78400.0, 2.0], [81600.0, 1.0], [84800.0, 1.0], [68700.0, 3.0], [71900.0, 2.0], [75100.0, 3.0], [81500.0, 3.0], [84700.0, 1.0], [87900.0, 1.0], [100700.0, 2.0], [103900.0, 1.0], [33900.0, 21.0], [35500.0, 17.0], [37100.0, 17.0], [38700.0, 14.0], [40300.0, 18.0], [41900.0, 14.0], [43500.0, 12.0], [45100.0, 12.0], [46700.0, 5.0], [48300.0, 8.0], [49900.0, 7.0], [53100.0, 5.0], [51500.0, 4.0], [54700.0, 7.0], [56300.0, 2.0], [57900.0, 11.0], [59500.0, 7.0], [61100.0, 3.0], [62700.0, 3.0], [64300.0, 2.0], [67800.0, 3.0], [74200.0, 2.0], [80600.0, 2.0], [83800.0, 1.0], [87000.0, 1.0], [99800.0, 1.0], [66900.0, 4.0], [73300.0, 3.0], [70100.0, 2.0], [76500.0, 1.0], [79700.0, 1.0], [82900.0, 2.0], [105300.0, 1.0], [17300.0, 37.0], [16500.0, 38.0], [18100.0, 33.0], [18900.0, 33.0], [19700.0, 28.0], [20500.0, 44.0], [21300.0, 40.0], [22100.0, 22.0], [22900.0, 50.0], [23700.0, 39.0], [24500.0, 19.0], [25300.0, 15.0], [26100.0, 34.0], [26900.0, 19.0], [27700.0, 13.0], [28500.0, 16.0], [29300.0, 13.0], [30100.0, 15.0], [31700.0, 22.0], [30900.0, 34.0], [32500.0, 23.0], [33000.0, 18.0], [34600.0, 38.0], [36200.0, 21.0], [37800.0, 13.0], [39400.0, 21.0], [41000.0, 6.0], [42600.0, 21.0], [44200.0, 10.0], [45800.0, 11.0], [47400.0, 7.0], [49000.0, 3.0], [50600.0, 5.0], [52200.0, 9.0], [53800.0, 3.0], [57000.0, 5.0], [55400.0, 5.0], [58600.0, 7.0], [60200.0, 2.0], [63400.0, 6.0], [61800.0, 6.0], [65000.0, 4.0], [66000.0, 8.0], [69200.0, 7.0], [75600.0, 4.0], [78800.0, 2.0], [82000.0, 2.0], [85200.0, 1.0], [88400.0, 4.0], [91600.0, 1.0], [98000.0, 1.0], [69100.0, 3.0], [65900.0, 3.0], [72300.0, 1.0], [75500.0, 4.0], [81900.0, 3.0], [78700.0, 1.0], [85100.0, 1.0], [91500.0, 1.0], [110700.0, 1.0], [34100.0, 28.0], [35700.0, 21.0], [38900.0, 14.0], [37300.0, 20.0], [40500.0, 14.0], [42100.0, 12.0], [43700.0, 6.0], [46900.0, 7.0], [45300.0, 4.0], [48500.0, 4.0], [50100.0, 7.0], [51700.0, 9.0], [53300.0, 10.0], [54900.0, 2.0], [56500.0, 3.0], [58100.0, 7.0], [59700.0, 8.0], [61300.0, 1.0], [62900.0, 4.0], [64500.0, 6.0], [68200.0, 4.0], [71400.0, 1.0], [77800.0, 1.0], [81000.0, 3.0], [84200.0, 1.0], [87400.0, 1.0], [90600.0, 2.0], [93800.0, 2.0], [97000.0, 1.0], [109800.0, 1.0], [67300.0, 5.0], [70500.0, 3.0], [73700.0, 2.0], [76900.0, 3.0], [83300.0, 3.0], [86500.0, 1.0], [89700.0, 2.0], [92900.0, 1.0], [8300.0, 46.0], [8700.0, 19.0], [9100.0, 32.0], [9500.0, 50.0], [9900.0, 34.0], [10300.0, 50.0], [10700.0, 25.0], [11100.0, 41.0], [11500.0, 41.0], [11900.0, 45.0], [12300.0, 39.0], [12700.0, 36.0], [13100.0, 27.0], [13500.0, 31.0], [14300.0, 60.0], [13900.0, 40.0], [14700.0, 32.0], [15100.0, 31.0], [15500.0, 75.0], [15900.0, 74.0], [16300.0, 46.0], [17400.0, 44.0], [16600.0, 47.0], [18200.0, 37.0], [19000.0, 29.0], [19800.0, 19.0], [20600.0, 26.0], [21400.0, 54.0], [22200.0, 30.0], [23000.0, 68.0], [23800.0, 29.0], [25400.0, 28.0], [24600.0, 16.0], [26200.0, 15.0], [27000.0, 17.0], [27800.0, 17.0], [28600.0, 17.0], [29400.0, 15.0], [30200.0, 10.0], [31000.0, 28.0], [31800.0, 33.0], [32600.0, 22.0], [34800.0, 43.0], [33200.0, 20.0], [36400.0, 30.0], [38000.0, 19.0], [39600.0, 22.0], [42800.0, 20.0], [41200.0, 11.0], [44400.0, 7.0], [46000.0, 7.0], [47600.0, 10.0], [49200.0, 3.0], [50800.0, 7.0], [52400.0, 6.0], [54000.0, 7.0], [57200.0, 6.0], [55600.0, 6.0], [58800.0, 7.0], [60400.0, 3.0], [62000.0, 4.0], [63600.0, 3.0], [65200.0, 1.0], [66400.0, 4.0], [69600.0, 5.0], [72800.0, 4.0], [79200.0, 1.0], [88800.0, 2.0], [92000.0, 1.0], [101600.0, 1.0], [66300.0, 3.0], [69500.0, 4.0], [72700.0, 3.0], [75900.0, 2.0], [79100.0, 2.0], [82300.0, 1.0], [88700.0, 2.0], [98300.0, 1.0], [34300.0, 35.0], [35900.0, 25.0], [37500.0, 22.0], [39100.0, 14.0], [40700.0, 8.0], [42300.0, 9.0], [43900.0, 9.0], [47100.0, 12.0], [45500.0, 8.0], [48700.0, 6.0], [50300.0, 4.0], [51900.0, 8.0], [53500.0, 5.0], [55100.0, 4.0], [56700.0, 3.0], [58300.0, 2.0], [59900.0, 8.0], [61500.0, 7.0], [63100.0, 1.0], [64700.0, 5.0], [68600.0, 3.0], [71800.0, 7.0], [78200.0, 1.0], [84600.0, 1.0], [87800.0, 3.0], [94200.0, 1.0], [67700.0, 1.0], [70900.0, 1.0], [77300.0, 5.0], [74100.0, 1.0], [80500.0, 1.0], [86900.0, 2.0], [16700.0, 41.0], [17500.0, 59.0], [18300.0, 36.0], [19100.0, 39.0], [19900.0, 24.0], [21500.0, 36.0], [20700.0, 28.0], [22300.0, 30.0], [23100.0, 49.0], [23900.0, 24.0], [25500.0, 28.0], [24700.0, 16.0], [26300.0, 12.0], [27100.0, 13.0], [27900.0, 13.0], [28700.0, 12.0], [29500.0, 15.0], [30300.0, 18.0], [31100.0, 37.0], [31900.0, 35.0], [32700.0, 22.0], [33400.0, 19.0], [35000.0, 26.0], [36600.0, 22.0], [38200.0, 14.0], [39800.0, 22.0], [41400.0, 19.0], [43000.0, 3.0], [44600.0, 15.0], [46200.0, 9.0], [47800.0, 7.0], [51000.0, 5.0], [49400.0, 8.0], [52600.0, 7.0], [54200.0, 6.0], [55800.0, 3.0], [59000.0, 4.0], [57400.0, 5.0], [60600.0, 3.0], [62200.0, 2.0], [63800.0, 6.0], [66800.0, 3.0], [271800.0, 1.0], [73200.0, 2.0], [70000.0, 2.0], [76400.0, 1.0], [79600.0, 6.0], [92400.0, 1.0], [95600.0, 2.0], [108400.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 271800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 22.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 15022.0, "series": [{"data": [[0.0, 5618.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 938.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 15022.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 22.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 231.8507812500001, "minX": 1.6869111E12, "maxY": 1200.0, "series": [{"data": [[1.6869114E12, 648.171689989236], [1.68691122E12, 1199.9968017057572], [1.6869111E12, 1200.0], [1.68691134E12, 989.7279503105613], [1.68691128E12, 1166.2133934767517], [1.68691146E12, 231.8507812500001], [1.68691116E12, 1200.0]], "isOverall": false, "label": "RestApi", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68691146E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 39.0, "minX": 1.0, "maxY": 85608.0, "series": [{"data": [[2.0, 39.0], [3.0, 2448.666666666667], [4.0, 1522.0], [5.0, 9284.5], [6.0, 7155.5], [7.0, 3152.5], [8.0, 1384.0], [9.0, 104.0], [10.0, 19089.333333333336], [11.0, 12476.0], [12.0, 18346.0], [13.0, 129.0], [14.0, 64.0], [16.0, 23307.75], [17.0, 53.0], [18.0, 9242.25], [19.0, 19872.25], [20.0, 22193.5], [21.0, 88.0], [22.0, 125.0], [24.0, 90.0], [25.0, 9735.5], [26.0, 86.0], [27.0, 33422.28571428571], [28.0, 2518.0], [29.0, 92.0], [30.0, 18542.0], [31.0, 115.0], [33.0, 22690.0], [35.0, 93.0], [34.0, 12768.5], [37.0, 92.0], [36.0, 96.5], [38.0, 39659.8], [41.0, 88.0], [40.0, 21996.333333333336], [42.0, 31163.333333333332], [44.0, 13852.857142857141], [47.0, 8744.6], [46.0, 88.66666666666667], [49.0, 1655.0], [48.0, 163.0], [51.0, 3381.333333333333], [50.0, 12670.999999999998], [53.0, 401.5], [52.0, 85608.0], [55.0, 49.0], [54.0, 121.5], [57.0, 22928.5], [56.0, 136.5], [59.0, 39291.0], [58.0, 131.0], [61.0, 23135.166666666668], [63.0, 17726.0], [62.0, 73.0], [67.0, 86.0], [66.0, 124.0], [65.0, 8753.25], [64.0, 73.0], [71.0, 35495.8], [70.0, 107.5], [69.0, 91.0], [68.0, 23476.5], [75.0, 112.0], [74.0, 4323.0], [73.0, 15706.749999999998], [72.0, 25456.333333333336], [79.0, 23702.5], [77.0, 22615.333333333336], [76.0, 211.0], [82.0, 21517.333333333332], [81.0, 25479.4], [87.0, 8276.833333333332], [86.0, 75.66666666666667], [85.0, 9851.571428571428], [84.0, 72.5], [91.0, 127.5], [90.0, 35040.0], [89.0, 147.0], [88.0, 15223.0], [95.0, 133.0], [94.0, 25656.2], [93.0, 74.0], [92.0, 130.0], [99.0, 29362.0], [98.0, 16751.0], [97.0, 9938.0], [96.0, 45993.5], [102.0, 45.0], [101.0, 124.0], [100.0, 17173.75], [107.0, 16137.0], [105.0, 6479.000000000001], [111.0, 27077.0], [110.0, 119.0], [109.0, 19054.0], [108.0, 156.0], [115.0, 28333.5], [114.0, 13683.4], [113.0, 95.0], [112.0, 37855.66666666667], [119.0, 47477.5], [118.0, 38776.5], [116.0, 21508.666666666664], [123.0, 56.0], [122.0, 563.2], [120.0, 53.0], [126.0, 29707.5], [125.0, 6756.333333333334], [124.0, 435.0], [135.0, 163.0], [134.0, 17426.0], [133.0, 37958.66666666667], [132.0, 37157.5], [131.0, 157.0], [130.0, 160.5], [129.0, 70.0], [128.0, 154.0], [143.0, 20493.999999999996], [142.0, 18003.5], [141.0, 13647.333333333334], [140.0, 27618.0], [139.0, 29192.0], [138.0, 68.0], [137.0, 15129.5], [136.0, 29198.0], [151.0, 32890.0], [150.0, 14067.5], [149.0, 142.0], [148.0, 156.0], [147.0, 164.0], [146.0, 21623.0], [145.0, 26066.4], [144.0, 27337.833333333336], [159.0, 95.0], [158.0, 16762.0], [157.0, 121.0], [156.0, 14161.5], [155.0, 28570.2], [154.0, 33603.0], [152.0, 8523.5], [167.0, 26999.666666666664], [166.0, 22661.0], [165.0, 127.0], [163.0, 30611.5], [162.0, 177.0], [161.0, 12136.0], [160.0, 8400.666666666668], [175.0, 66.0], [174.0, 47255.5], [173.0, 168.0], [172.0, 436.6], [171.0, 36655.11111111111], [170.0, 30615.5], [169.0, 8251.0], [168.0, 26605.0], [183.0, 18135.666666666664], [182.0, 28309.6], [181.0, 125.0], [180.0, 123.0], [179.0, 72.0], [178.0, 27764.0], [176.0, 10669.5], [191.0, 813.5], [190.0, 30098.5], [189.0, 7127.0], [188.0, 29540.0], [187.0, 84.0], [186.0, 130.0], [185.0, 35489.09090909091], [184.0, 132.0], [199.0, 17339.333333333336], [198.0, 167.0], [197.0, 18406.666666666664], [196.0, 22507.285714285714], [195.0, 39538.33333333333], [194.0, 163.25], [192.0, 32831.666666666664], [207.0, 24765.5], [206.0, 34670.25], [205.0, 25007.0], [204.0, 20285.6], [203.0, 130.0], [202.0, 24400.833333333336], [201.0, 82.0], [215.0, 506.0], [214.0, 25613.5], [213.0, 93.0], [212.0, 174.0], [211.0, 17135.0], [210.0, 29020.5], [209.0, 114.0], [208.0, 47887.5], [223.0, 172.0], [222.0, 9899.0], [221.0, 45637.33333333333], [220.0, 25763.214285714286], [218.0, 158.0], [217.0, 14484.2], [216.0, 6115.5], [231.0, 173.0], [230.0, 25178.142857142855], [229.0, 142.0], [228.0, 3397.0], [227.0, 43802.5], [226.0, 174.4], [239.0, 6980.714285714284], [238.0, 78.0], [235.0, 16694.0], [234.0, 21733.0], [233.0, 27575.25], [232.0, 19327.5], [247.0, 14200.500000000002], [245.0, 40207.25000000001], [244.0, 185.0], [243.0, 58.0], [242.0, 144.0], [241.0, 1891.8333333333335], [240.0, 415.0], [255.0, 185.0], [254.0, 27132.5], [253.0, 11083.57142857143], [251.0, 48.0], [250.0, 16524.333333333332], [249.0, 39717.5], [248.0, 155.5], [270.0, 178.0], [271.0, 7578.0], [269.0, 109.0], [268.0, 7815.666666666666], [267.0, 108.0], [266.0, 8533.333333333332], [265.0, 9327.5], [264.0, 116.0], [263.0, 48416.0], [257.0, 22796.800000000003], [256.0, 159.0], [259.0, 178.0], [258.0, 28823.249999999996], [262.0, 4843.333333333334], [261.0, 42668.0], [260.0, 11174.666666666666], [286.0, 156.0], [287.0, 27544.0], [285.0, 16622.4], [284.0, 6783.0], [283.0, 175.0], [282.0, 15651.333333333334], [281.0, 24620.5], [280.0, 142.66666666666666], [278.0, 1236.0], [275.0, 25867.0], [272.0, 27653.666666666664], [277.0, 122.0], [276.0, 28559.714285714286], [302.0, 6503.333333333334], [303.0, 4164.0], [301.0, 36497.33333333333], [300.0, 2142.5], [299.0, 5645.666666666666], [298.0, 141.0], [297.0, 56.0], [296.0, 52558.66666666667], [295.0, 14785.25], [289.0, 89.0], [288.0, 27652.6], [291.0, 129.0], [290.0, 643.5], [294.0, 171.0], [293.0, 20390.333333333336], [292.0, 161.0], [318.0, 8894.5], [319.0, 4563.666666666666], [317.0, 2685.666666666667], [316.0, 97.5], [314.0, 227.0], [313.0, 16758.0], [312.0, 46252.5], [311.0, 3643.2499999999995], [305.0, 29520.666666666664], [304.0, 78.0], [307.0, 1391.3333333333333], [306.0, 2617.666666666667], [310.0, 13370.333333333332], [309.0, 22834.5], [308.0, 158.0], [334.0, 45106.0], [335.0, 132.0], [333.0, 43396.33333333333], [332.0, 197.5], [331.0, 9713.577777777777], [330.0, 11562.166666666666], [329.0, 263.0], [328.0, 44388.0], [327.0, 34281.99999999999], [320.0, 436.0], [322.0, 3236.5], [321.0, 593.0], [326.0, 10772.666666666668], [325.0, 813.0], [324.0, 593.0], [350.0, 23093.333333333336], [351.0, 86.0], [349.0, 37843.0], [348.0, 31106.0], [347.0, 12887.4], [346.0, 1801.4999999999998], [344.0, 5369.333333333334], [343.0, 185.5], [337.0, 196.0], [336.0, 3893.5], [339.0, 33068.25], [338.0, 37922.75], [342.0, 197.0], [341.0, 5793.666666666666], [340.0, 88.0], [365.0, 188.0], [366.0, 38642.33333333333], [364.0, 44699.0], [355.0, 37654.833333333336], [354.0, 108.0], [353.0, 21799.200000000004], [352.0, 6845.6], [363.0, 16909.5], [362.0, 124.0], [361.0, 16685.5], [360.0, 2693.0], [359.0, 23613.75], [357.0, 23749.25], [356.0, 8729.333333333332], [382.0, 33385.2], [383.0, 6379.0], [381.0, 41920.0], [380.0, 244.0], [379.0, 11071.0], [378.0, 149.0], [377.0, 14009.0], [376.0, 7833.333333333334], [375.0, 22985.75], [369.0, 4892.0], [368.0, 26007.285714285714], [371.0, 28412.333333333336], [370.0, 18629.4], [374.0, 215.0], [373.0, 9542.75], [372.0, 80.0], [397.0, 7884.0], [398.0, 138.0], [396.0, 232.0], [387.0, 2130.75], [386.0, 1618.0], [384.0, 41423.5], [395.0, 31377.857142857145], [394.0, 164.0], [393.0, 11028.0], [392.0, 32125.0], [391.0, 807.5], [390.0, 41539.0], [389.0, 1234.0], [388.0, 1227.0], [414.0, 15197.666666666668], [415.0, 71.0], [413.0, 23257.6], [412.0, 16425.76190476191], [411.0, 7654.5], [410.0, 218.0], [409.0, 21795.0], [408.0, 16062.666666666668], [407.0, 91.5], [400.0, 235.5], [403.0, 32922.0], [401.0, 33446.83333333333], [406.0, 33831.3], [405.0, 11754.218749999998], [404.0, 37207.428571428565], [430.0, 25167.555555555555], [431.0, 131.0], [429.0, 21414.285714285717], [428.0, 17946.230769230766], [427.0, 21455.699999999997], [426.0, 37100.2], [424.0, 53552.0], [423.0, 208.0], [417.0, 18176.444444444445], [416.0, 15515.500000000002], [419.0, 18779.0], [418.0, 147.0], [422.0, 38388.0], [421.0, 213.0], [420.0, 18018.5], [446.0, 141.0], [447.0, 30439.6], [445.0, 19226.25], [444.0, 223.0], [443.0, 208.0], [442.0, 238.0], [441.0, 29318.916666666664], [439.0, 16010.0], [433.0, 12408.5], [432.0, 334.0], [435.0, 19525.5], [434.0, 29030.916666666668], [438.0, 15969.0], [437.0, 244.0], [436.0, 86.0], [463.0, 43594.0], [462.0, 16058.5], [450.0, 50050.6], [449.0, 289.0], [448.0, 44153.0], [459.0, 34188.8], [458.0, 7332.0], [457.0, 50818.0], [456.0, 145.0], [455.0, 155.0], [454.0, 51456.5], [453.0, 161.0], [452.0, 7811.0], [477.0, 37355.5], [479.0, 147.5], [476.0, 40049.333333333336], [467.0, 15021.666666666668], [466.0, 212.0], [465.0, 17368.0], [464.0, 8610.8], [475.0, 9892.666666666668], [474.0, 183.0], [473.0, 178.0], [472.0, 31000.0], [471.0, 190.0], [470.0, 49901.0], [469.0, 10602.75], [468.0, 25399.666666666664], [494.0, 21282.75], [495.0, 39941.5], [493.0, 12659.4], [492.0, 11541.3], [491.0, 42947.5], [490.0, 117.0], [489.0, 9602.5], [488.0, 39350.0], [487.0, 9694.75], [480.0, 207.0], [483.0, 133.5], [481.0, 31237.333333333336], [486.0, 9735.5], [485.0, 82.0], [484.0, 413.0], [510.0, 75.0], [511.0, 28434.833333333332], [509.0, 224.5], [508.0, 8196.0], [507.0, 38393.0], [506.0, 8700.0], [505.0, 30715.0], [504.0, 98.0], [503.0, 126.0], [496.0, 108.0], [498.0, 18724.75], [497.0, 33764.66666666667], [502.0, 9518.0], [501.0, 87.0], [500.0, 22346.6], [537.0, 158.0], [542.0, 23002.714285714286], [543.0, 184.0], [529.0, 140.0], [528.0, 35036.0], [531.0, 29994.8], [530.0, 12752.666666666668], [533.0, 193.0], [532.0, 16849.833333333332], [541.0, 39957.57142857143], [540.0, 117.0], [539.0, 14611.666666666668], [536.0, 33102.0], [519.0, 222.0], [518.0, 45246.0], [517.0, 24015.0], [516.0, 196.0], [515.0, 7935.0], [514.0, 8886.0], [513.0, 26454.57142857143], [512.0, 84.0], [527.0, 176.0], [526.0, 220.0], [525.0, 13548.454545454544], [524.0, 103.0], [523.0, 103.0], [522.0, 8678.0], [521.0, 20752.166666666664], [520.0, 34270.5], [535.0, 27203.333333333336], [534.0, 111.0], [568.0, 20150.399999999998], [572.0, 85.0], [575.0, 19341.85714285714], [563.0, 14215.333333333334], [560.0, 19507.85714285714], [565.0, 23409.5], [564.0, 9396.5], [574.0, 19453.666666666664], [573.0, 16232.499999999998], [571.0, 21386.0], [570.0, 4716.0], [569.0, 17593.846153846152], [558.0, 28323.500000000004], [545.0, 31172.583333333336], [544.0, 16891.25], [547.0, 7192.0], [546.0, 185.0], [549.0, 6968.0], [548.0, 18425.6], [551.0, 5282.0], [550.0, 94.0], [557.0, 12199.666666666668], [556.0, 12948.999999999998], [555.0, 221.5], [554.0, 19712.666666666664], [553.0, 11320.5], [552.0, 176.0], [567.0, 69.0], [566.0, 28528.500000000004], [601.0, 4013.0], [605.0, 27825.5], [607.0, 18636.444444444445], [593.0, 7002.0], [592.0, 4378.333333333334], [595.0, 31258.0], [594.0, 21375.333333333336], [597.0, 32227.5], [596.0, 37195.6], [604.0, 199.0], [603.0, 6160.5], [602.0, 194.0], [600.0, 28700.75], [583.0, 185.0], [582.0, 29592.749999999996], [581.0, 14809.5], [580.0, 275.0], [579.0, 227.0], [578.0, 17458.8], [577.0, 28905.555555555555], [576.0, 81.0], [591.0, 6393.0], [590.0, 301.0], [589.0, 276.0], [588.0, 26478.2], [587.0, 26110.22222222222], [586.0, 51477.2], [585.0, 232.0], [584.0, 32421.25], [599.0, 21073.666666666668], [598.0, 19402.75], [634.0, 32382.75], [638.0, 169.0], [639.0, 36975.5], [625.0, 17373.958333333336], [624.0, 19438.722222222223], [627.0, 19514.42857142857], [626.0, 22204.6], [629.0, 27309.833333333332], [628.0, 22688.666666666664], [637.0, 110.0], [636.0, 34872.666666666664], [635.0, 30294.777777777777], [633.0, 7224.2], [615.0, 3249.0], [614.0, 1709.5], [612.0, 26528.636363636364], [611.0, 230.0], [610.0, 137.0], [609.0, 9292.5], [608.0, 20066.0], [623.0, 706.75], [622.0, 1267.0], [621.0, 11453.599999999999], [620.0, 20316.333333333336], [619.0, 23293.75], [618.0, 10559.6], [617.0, 36960.33333333333], [616.0, 3297.0], [631.0, 22701.8], [630.0, 198.0], [668.0, 268.0], [671.0, 17730.75], [656.0, 182.0], [659.0, 31347.499999999996], [657.0, 211.0], [661.0, 277.5], [660.0, 41354.71428571428], [670.0, 50900.0], [669.0, 47835.66666666667], [667.0, 23930.0], [666.0, 33623.99999999999], [665.0, 27793.5], [664.0, 18353.5], [655.0, 38047.33333333333], [641.0, 26133.666666666664], [640.0, 23963.25], [643.0, 32157.11764705883], [642.0, 37385.6], [645.0, 212.0], [644.0, 11276.25], [647.0, 38254.7], [646.0, 22097.666666666668], [654.0, 24060.666666666664], [653.0, 18063.5], [652.0, 29126.4], [651.0, 39295.0], [650.0, 39235.0], [649.0, 224.0], [648.0, 18092.8], [663.0, 164.0], [662.0, 28384.5], [697.0, 47195.0], [702.0, 39645.0], [703.0, 31235.0], [689.0, 191.0], [688.0, 46979.83333333333], [691.0, 33872.653846153844], [690.0, 18131.0], [693.0, 38965.5], [692.0, 18469.0], [701.0, 228.0], [700.0, 273.0], [698.0, 32797.846153846156], [696.0, 18882.5], [679.0, 27052.5], [678.0, 46107.4], [677.0, 236.0], [676.0, 29448.25], [675.0, 121.0], [674.0, 34017.25], [673.0, 93.0], [672.0, 244.5], [687.0, 51014.66666666667], [686.0, 30318.333333333336], [685.0, 143.0], [684.0, 23119.5], [683.0, 236.5], [682.0, 17570.5], [681.0, 26763.666666666664], [680.0, 149.0], [695.0, 336.0], [694.0, 35780.6], [732.0, 35743.6], [735.0, 304.5], [721.0, 43913.25], [720.0, 35954.153846153844], [723.0, 37940.5], [722.0, 42407.66666666667], [725.0, 30264.666666666668], [724.0, 60098.99999999999], [734.0, 243.0], [733.0, 19739.5], [731.0, 31270.142857142855], [730.0, 99.0], [729.0, 220.0], [728.0, 41215.25], [719.0, 1755.3333333333333], [705.0, 29679.142857142855], [704.0, 36607.041666666664], [707.0, 58606.166666666664], [706.0, 8845.2], [709.0, 192.5], [708.0, 21565.0], [711.0, 1166.0], [710.0, 1217.0], [718.0, 9380.0], [717.0, 1084.0], [716.0, 781.0], [715.0, 17535.8], [714.0, 1626.0], [713.0, 19226.666666666664], [727.0, 30303.11111111111], [726.0, 181.0], [764.0, 12296.0], [767.0, 268.0], [753.0, 36971.36363636363], [752.0, 13718.428571428572], [755.0, 17698.0], [754.0, 18984.5], [757.0, 26313.333333333336], [756.0, 22702.0], [766.0, 23072.666666666668], [765.0, 1394.0], [763.0, 1275.0], [762.0, 32019.500000000004], [761.0, 400.0], [760.0, 785.5], [751.0, 31804.6], [737.0, 39970.4], [736.0, 14015.333333333334], [739.0, 314.0], [738.0, 55225.2], [741.0, 128.0], [740.0, 307.0], [743.0, 28937.142857142855], [742.0, 128.0], [750.0, 46716.5], [749.0, 23452.88235294118], [748.0, 18402.75], [747.0, 24837.5], [746.0, 40390.5], [745.0, 33916.25], [744.0, 16288.428571428572], [759.0, 1239.0], [758.0, 218.0], [796.0, 253.0], [799.0, 24452.0], [784.0, 35416.5], [786.0, 167.0], [785.0, 29939.785714285714], [788.0, 8271.4], [787.0, 42316.5625], [798.0, 7288.0], [797.0, 50964.0], [795.0, 247.0], [794.0, 20619.333333333332], [793.0, 12321.8], [792.0, 178.0], [783.0, 24024.25], [768.0, 292.0], [771.0, 28117.833333333336], [769.0, 232.0], [773.0, 819.0], [772.0, 17793.25], [775.0, 925.6666666666666], [774.0, 228.0], [782.0, 40594.33333333333], [781.0, 81.0], [780.0, 39394.625], [779.0, 35360.625], [778.0, 1811.0], [777.0, 1397.0], [776.0, 1226.0], [791.0, 31737.181818181816], [790.0, 27208.88888888889], [828.0, 8198.0], [831.0, 41067.5], [817.0, 15694.6], [816.0, 33304.57142857143], [819.0, 13050.5], [818.0, 49658.6], [821.0, 20040.5], [820.0, 13230.499999999998], [830.0, 175.0], [829.0, 1958.0], [827.0, 8536.0], [826.0, 88.0], [825.0, 28785.624999999996], [824.0, 21043.8], [812.0, 26017.57142857143], [800.0, 37011.57142857143], [803.0, 30209.666666666664], [801.0, 432.0], [805.0, 47200.25], [804.0, 201.0], [807.0, 6028.000000000001], [806.0, 13236.749999999998], [811.0, 52420.0], [810.0, 157.0], [809.0, 23687.666666666664], [808.0, 13414.0], [823.0, 249.0], [822.0, 8948.333333333334], [860.0, 177.0], [863.0, 48245.333333333336], [848.0, 17929.555555555555], [850.0, 27421.999999999996], [849.0, 5484.5], [852.0, 265.0], [851.0, 209.0], [862.0, 176.0], [861.0, 647.5], [859.0, 23245.333333333336], [858.0, 28032.46153846154], [857.0, 34920.5], [856.0, 10822.0], [847.0, 186.0], [833.0, 1693.75], [832.0, 1279.75], [835.0, 21638.818181818184], [834.0, 41642.42857142857], [837.0, 42516.5], [836.0, 31774.874999999996], [839.0, 23151.636363636364], [838.0, 25584.750000000004], [846.0, 29114.0], [845.0, 18945.043478260875], [844.0, 17054.0], [843.0, 31959.8], [842.0, 25065.5], [841.0, 12538.25], [840.0, 39538.0], [855.0, 219.0], [853.0, 33119.72727272727], [892.0, 115.0], [895.0, 33635.66666666667], [881.0, 157.5], [880.0, 6639.571428571429], [883.0, 2854.0], [882.0, 701.5], [885.0, 1466.0], [884.0, 20581.25], [894.0, 15260.333333333332], [893.0, 27836.857142857145], [891.0, 39728.375], [890.0, 29236.0], [889.0, 25291.641025641024], [888.0, 2013.0], [879.0, 2985.0], [864.0, 22543.666666666664], [866.0, 20825.235294117647], [865.0, 29209.333333333336], [868.0, 220.0], [867.0, 27641.500000000004], [871.0, 21405.91666666667], [869.0, 14510.4], [878.0, 43845.42857142857], [877.0, 31168.333333333336], [876.0, 16558.333333333336], [875.0, 744.5], [874.0, 413.6], [873.0, 243.0], [872.0, 44070.6], [887.0, 1681.0], [886.0, 1751.3333333333333], [921.0, 33101.846153846156], [926.0, 28661.625], [927.0, 3215.0], [913.0, 263.0], [912.0, 14556.0], [915.0, 32520.500000000004], [914.0, 15612.666666666668], [917.0, 302.0], [916.0, 172.0], [925.0, 23248.0], [924.0, 12248.0], [923.0, 18013.555555555555], [920.0, 9983.833333333332], [903.0, 29687.75], [902.0, 177.0], [901.0, 218.0], [900.0, 217.0], [899.0, 17515.0], [898.0, 40975.0], [897.0, 209.0], [896.0, 211.0], [911.0, 33220.25], [910.0, 23111.333333333336], [909.0, 25073.666666666668], [908.0, 81.0], [907.0, 26200.666666666668], [906.0, 33729.26666666667], [905.0, 19543.666666666668], [904.0, 273.0], [919.0, 223.0], [918.0, 37832.0], [952.0, 18766.60416666667], [956.0, 30762.271604938258], [959.0, 167.0], [945.0, 9409.75], [944.0, 228.0], [948.0, 1838.5], [946.0, 1836.0], [958.0, 34300.818181818184], [957.0, 31459.259259259255], [955.0, 22295.3], [954.0, 21926.727272727272], [953.0, 23658.625000000004], [943.0, 179.0], [929.0, 24216.166666666664], [928.0, 204.0], [931.0, 32102.0], [930.0, 16836.571428571428], [933.0, 20935.285714285714], [932.0, 1781.5], [935.0, 902.6666666666666], [934.0, 2213.5], [942.0, 23565.46153846154], [940.0, 8980.75], [939.0, 36049.8], [938.0, 15295.8], [937.0, 8406.5], [936.0, 244.0], [951.0, 31619.5], [949.0, 1804.5], [986.0, 24443.1304347826], [990.0, 1317.0], [991.0, 10437.09090909091], [976.0, 25313.16666666667], [978.0, 1697.0], [977.0, 3229.0], [981.0, 2236.6666666666665], [979.0, 22739.8], [989.0, 14153.5], [988.0, 30388.25], [987.0, 7676.875000000001], [984.0, 199.0], [967.0, 36028.50000000001], [966.0, 30512.88888888889], [965.0, 180.0], [964.0, 35743.57142857143], [963.0, 37791.24324324325], [962.0, 142.0], [961.0, 179.5], [960.0, 215.0], [975.0, 19415.0], [974.0, 28036.250000000004], [973.0, 168.0], [972.0, 5416.0], [971.0, 39175.95000000002], [970.0, 41042.63636363636], [969.0, 24415.25], [968.0, 35123.46666666667], [983.0, 26702.250000000004], [982.0, 23839.5], [1017.0, 14233.333333333332], [1021.0, 24597.923076923078], [1022.0, 14289.0], [1009.0, 32909.39130434783], [1008.0, 38841.857142857145], [1011.0, 22205.5], [1010.0, 22281.0], [1020.0, 14061.142857142857], [1019.0, 27281.862068965518], [1018.0, 281.0], [1007.0, 271.0], [993.0, 25888.375], [992.0, 1310.0], [995.0, 45728.45901639343], [994.0, 43041.84905660377], [997.0, 29885.999999999996], [996.0, 275.0], [999.0, 32493.909090909092], [998.0, 30133.4], [1006.0, 19006.142857142855], [1005.0, 26149.1], [1004.0, 34770.5], [1003.0, 35922.037037037044], [1002.0, 38872.000000000015], [1001.0, 33741.09677419355], [1000.0, 6252.5], [1015.0, 27754.142857142862], [1014.0, 30296.2], [1013.0, 33197.21428571429], [1012.0, 142.0], [1084.0, 39099.5], [1064.0, 26825.666666666668], [1056.0, 36556.73913043478], [1058.0, 23320.666666666664], [1060.0, 21524.42857142857], [1062.0, 24982.0], [1066.0, 1286.5], [1068.0, 26686.636363636364], [1070.0, 527.5], [1086.0, 34384.25], [1082.0, 40032.95384615386], [1078.0, 950.0], [1076.0, 1035.0], [1072.0, 649.3333333333334], [1024.0, 11844.90909090909], [1026.0, 5542.545454545455], [1028.0, 29126.5], [1030.0, 30576.5], [1032.0, 40576.66666666667], [1034.0, 44673.722222222226], [1036.0, 28962.000000000004], [1038.0, 22738.0], [1054.0, 4881.375], [1052.0, 469.5], [1050.0, 19470.0], [1048.0, 25056.333333333332], [1046.0, 32642.1], [1044.0, 39994.0], [1042.0, 297.0], [1040.0, 24351.5], [1148.0, 20502.5], [1120.0, 17706.37037037037], [1122.0, 22500.333333333332], [1124.0, 19180.233333333334], [1126.0, 25049.64285714286], [1128.0, 21785.14285714286], [1130.0, 14645.6], [1132.0, 1960.3333333333333], [1134.0, 2248.5], [1150.0, 8921.666666666666], [1146.0, 32337.500000000004], [1144.0, 18613.318181818177], [1142.0, 22750.944444444445], [1138.0, 21874.36363636364], [1136.0, 31263.17391304348], [1102.0, 17909.9], [1100.0, 19012.92307692307], [1098.0, 14715.777777777776], [1096.0, 10309.4], [1094.0, 25918.749999999996], [1092.0, 13565.75], [1090.0, 11905.42857142857], [1088.0, 9146.2], [1118.0, 20655.2], [1116.0, 231.0], [1114.0, 283.0], [1112.0, 30438.285714285714], [1110.0, 28670.68571428571], [1108.0, 9779.0], [1106.0, 21241.333333333336], [1104.0, 17433.545454545452], [1160.0, 20035.38888888889], [1184.0, 20614.836363636365], [1192.0, 13373.555555555557], [1196.0, 19164.60465116279], [1200.0, 11989.529308902931], [1166.0, 27917.333333333332], [1164.0, 3810.0], [1162.0, 32456.100000000002], [1158.0, 33858.42857142857], [1156.0, 31083.12578616353], [1154.0, 25152.452685422002], [1152.0, 19055.333333333336], [1182.0, 26241.31428571429], [1180.0, 1649.5], [1178.0, 21580.79310344828], [1176.0, 11892.272727272728], [1174.0, 22922.46153846153], [1172.0, 27868.57843137255], [1170.0, 29206.369047619053], [1168.0, 2937.75], [1186.0, 19600.212121212124], [1188.0, 15431.127659574471], [1198.0, 22819.574468085106], [1194.0, 16689.544303797466], [1190.0, 19872.97435897436], [1085.0, 9818.333333333332], [1087.0, 24348.04545454546], [1057.0, 19305.75], [1059.0, 17784.333333333332], [1061.0, 14641.090909090908], [1063.0, 9893.25], [1065.0, 17801.600000000002], [1067.0, 340.0], [1069.0, 51477.0], [1071.0, 11696.666666666668], [1083.0, 19507.5], [1079.0, 10038.733333333334], [1077.0, 2788.0], [1075.0, 1490.1666666666667], [1055.0, 26123.176470588234], [1025.0, 27100.466666666667], [1027.0, 15127.333333333332], [1029.0, 119.0], [1031.0, 33233.0], [1033.0, 20137.0], [1035.0, 13272.0], [1037.0, 10003.625], [1039.0, 44570.0], [1053.0, 18051.0], [1051.0, 200.0], [1049.0, 417.0], [1047.0, 28317.2], [1045.0, 9501.75], [1043.0, 311.0], [1041.0, 28265.5], [1147.0, 15552.369565217392], [1139.0, 18741.649999999998], [1151.0, 8482.111111111113], [1121.0, 4195.857142857143], [1123.0, 23009.36], [1125.0, 21181.196969696968], [1127.0, 1140.3333333333333], [1129.0, 19589.0], [1131.0, 1595.3333333333333], [1135.0, 16630.833333333332], [1149.0, 2143.5], [1145.0, 19206.333333333332], [1143.0, 18558.25], [1141.0, 21869.0895522388], [1137.0, 26544.843749999996], [1103.0, 235.5], [1101.0, 748.0], [1099.0, 21531.428571428572], [1097.0, 27682.6], [1095.0, 18460.5], [1093.0, 24850.8275862069], [1091.0, 11981.166666666668], [1089.0, 23620.050000000003], [1119.0, 17302.0], [1117.0, 26200.22222222222], [1115.0, 35657.0], [1113.0, 19144.137254901954], [1109.0, 3008.0], [1107.0, 10968.75], [1105.0, 1021.4285714285713], [1161.0, 34095.705882352944], [1167.0, 12655.57142857143], [1165.0, 7691.8], [1163.0, 38114.14285714286], [1159.0, 22562.571428571428], [1157.0, 27668.709677419352], [1155.0, 27317.666666666664], [1153.0, 18969.0], [1183.0, 27613.812500000004], [1181.0, 27800.826086956517], [1179.0, 15485.000000000002], [1177.0, 20629.857142857138], [1173.0, 27717.021276595737], [1171.0, 14865.125], [1169.0, 28939.75], [1185.0, 13460.0], [1187.0, 13807.874999999996], [1189.0, 10922.26086956522], [1199.0, 16870.524271844657], [1197.0, 22309.129411764705], [1195.0, 13990.208695652182], [1193.0, 19504.26666666667], [1191.0, 23178.245614035084], [1.0, 1424.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[1067.1425462962982, 16421.320324073993]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4321.933333333333, "minX": 1.6869111E12, "maxY": 2.35101351E7, "series": [{"data": [[1.6869114E12, 2.16963518E7], [1.68691122E12, 2.0879994116666667E7], [1.6869111E12, 5504806.4], [1.68691134E12, 2.35101351E7], [1.68691128E12, 2.267383855E7], [1.68691146E12, 1.7478544466666665E7], [1.68691116E12, 1.991621125E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6869114E12, 7065.116666666667], [1.68691122E12, 17386.2], [1.6869111E12, 22265.833333333332], [1.68691134E12, 9891.983333333334], [1.68691128E12, 12352.133333333333], [1.68691146E12, 4321.933333333333], [1.68691116E12, 20777.266666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68691146E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5520.60995757982, "minX": 1.6869111E12, "maxY": 26107.990476190484, "series": [{"data": [[1.6869114E12, 24674.678686759904], [1.68691122E12, 19384.37579957355], [1.6869111E12, 5520.60995757982], [1.68691134E12, 26107.990476190484], [1.68691128E12, 22549.29042331716], [1.68691146E12, 17896.819531250032], [1.68691116E12, 12252.167612484795]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68691146E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5206.619781201163, "minX": 1.6869111E12, "maxY": 19088.890683229856, "series": [{"data": [[1.6869114E12, 16473.386975242207], [1.68691122E12, 15104.536780383785], [1.6869111E12, 5206.619781201163], [1.68691134E12, 19088.890683229856], [1.68691128E12, 17202.43407356007], [1.68691146E12, 6966.132812499997], [1.68691116E12, 9172.551884880426]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68691146E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 77.59140624999999, "minX": 1.6869111E12, "maxY": 1224.9720919848182, "series": [{"data": [[1.6869114E12, 187.6130247578044], [1.68691122E12, 451.93043710021357], [1.6869111E12, 1224.9720919848182], [1.68691134E12, 316.3254658385089], [1.68691128E12, 331.4031922276197], [1.68691146E12, 77.59140624999999], [1.68691116E12, 210.397648966356]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68691146E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 39.0, "minX": 1.6869111E12, "maxY": 271818.0, "series": [{"data": [[1.6869114E12, 108446.0], [1.68691122E12, 98709.0], [1.6869111E12, 26793.0], [1.68691134E12, 115233.0], [1.68691128E12, 78423.0], [1.68691146E12, 271818.0], [1.68691116E12, 71389.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6869114E12, 52.0], [1.68691122E12, 62.0], [1.6869111E12, 41.0], [1.68691134E12, 69.0], [1.68691128E12, 55.0], [1.68691146E12, 39.0], [1.68691116E12, 57.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6869114E12, 64616.29999999999], [1.68691122E12, 40976.700000000004], [1.6869111E12, 11279.0], [1.68691134E12, 60637.20000000003], [1.68691128E12, 49012.20000000011], [1.68691146E12, 61036.20000000003], [1.68691116E12, 25490.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6869114E12, 91297.65000000005], [1.68691122E12, 58753.92999999998], [1.6869111E12, 25673.8], [1.68691134E12, 88546.84000000001], [1.68691128E12, 69002.17], [1.68691146E12, 95631.07], [1.68691116E12, 43567.44999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6869114E12, 20126.0], [1.68691122E12, 18238.0], [1.6869111E12, 4196.0], [1.68691134E12, 23646.0], [1.68691128E12, 21725.0], [1.68691146E12, 1230.5], [1.68691116E12, 12287.5]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.6869114E12, 76947.9], [1.68691122E12, 47675.65], [1.6869111E12, 13682.0], [1.68691134E12, 71710.99999999996], [1.68691128E12, 59215.79999999999], [1.68691146E12, 81898.20000000001], [1.68691116E12, 31629.75]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68691146E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 340.0, "minX": 4.0, "maxY": 265378.0, "series": [{"data": [[4.0, 1527.5], [6.0, 1429.5], [10.0, 585.5], [11.0, 37380.0], [12.0, 40818.0], [13.0, 23342.0], [14.0, 43559.0], [15.0, 32396.0], [16.0, 10984.5], [17.0, 29628.0], [18.0, 25552.0], [19.0, 21274.5], [20.0, 37886.0], [21.0, 14288.0], [22.0, 28797.0], [23.0, 16367.0], [24.0, 20258.0], [25.0, 340.0], [26.0, 1531.5], [27.0, 14945.0], [28.0, 14404.5], [29.0, 18273.0], [30.0, 9267.5], [31.0, 1269.0], [32.0, 1255.5], [33.0, 20897.5], [35.0, 32045.0], [34.0, 11284.0], [36.0, 3098.0], [37.0, 5531.0], [39.0, 3422.0], [38.0, 3667.5], [40.0, 6982.5], [41.0, 3232.0], [42.0, 20696.5], [43.0, 2341.0], [45.0, 17223.0], [44.0, 11280.0], [47.0, 23664.0], [46.0, 16660.0], [48.0, 15413.5], [49.0, 2551.0], [51.0, 22164.0], [50.0, 18279.5], [53.0, 19500.0], [52.0, 3385.0], [54.0, 15730.5], [55.0, 16418.0], [56.0, 16078.5], [57.0, 16702.5], [58.0, 11450.0], [59.0, 40915.0], [60.0, 17722.0], [61.0, 3349.0], [62.0, 3108.5], [63.0, 3367.0], [67.0, 13304.5], [66.0, 17821.0], [64.0, 16549.0], [65.0, 17640.0], [69.0, 19717.5], [68.0, 11364.0], [71.0, 13322.0], [70.0, 22630.0], [75.0, 18895.0], [73.0, 11975.0], [72.0, 17879.5], [79.0, 10277.0], [77.0, 3424.0], [76.0, 30866.5], [78.0, 22537.0], [80.0, 12777.5], [83.0, 14007.0], [82.0, 21427.5], [86.0, 13260.0], [85.0, 15150.0], [88.0, 10504.0], [90.0, 3392.0], [91.0, 34516.0], [94.0, 2602.0], [95.0, 11238.0], [93.0, 32223.0], [98.0, 4005.5], [99.0, 15604.0], [97.0, 11971.0], [103.0, 2898.5], [101.0, 15623.0], [107.0, 22792.0], [104.0, 33156.0], [111.0, 1846.0], [108.0, 8908.0], [110.0, 32642.5], [112.0, 18659.0], [115.0, 17169.0], [119.0, 10106.0], [118.0, 8937.5], [120.0, 7468.0], [126.0, 14058.0], [124.0, 32144.5], [128.0, 3331.0], [131.0, 2981.0], [132.0, 12508.5], [130.0, 6055.5], [133.0, 9710.0], [142.0, 8937.5], [138.0, 10202.0], [151.0, 9380.0], [148.0, 15943.0], [144.0, 11288.5], [146.0, 20624.5], [153.0, 12238.0], [157.0, 29744.0], [161.0, 15161.0], [169.0, 7767.0], [174.0, 9820.5], [181.0, 9315.0], [178.0, 20622.0], [191.0, 3577.0], [209.0, 5017.0], [210.0, 12489.5], [224.0, 1502.0], [274.0, 4811.5], [335.0, 2140.0], [343.0, 3156.0], [361.0, 19324.0], [389.0, 4388.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[151.0, 21170.5], [75.0, 265378.0], [20.0, 150256.0], [88.0, 20824.0], [389.0, 6850.0], [209.0, 12872.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 389.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 4.0, "maxY": 40149.0, "series": [{"data": [[4.0, 86.0], [6.0, 84.0], [10.0, 585.5], [11.0, 14361.0], [12.0, 30965.5], [13.0, 18911.0], [14.0, 24005.5], [15.0, 25951.0], [16.0, 7629.0], [17.0, 19275.0], [18.0, 20004.5], [19.0, 17277.5], [20.0, 18111.0], [21.0, 13051.0], [22.0, 16346.0], [23.0, 12418.0], [24.0, 18726.5], [25.0, 276.0], [26.0, 490.0], [27.0, 12269.0], [28.0, 14294.5], [29.0, 8334.0], [30.0, 3552.5], [31.0, 400.0], [32.0, 581.0], [33.0, 14293.0], [35.0, 18812.0], [34.0, 7814.0], [36.0, 3072.5], [37.0, 1546.0], [39.0, 3405.5], [38.0, 1582.0], [40.0, 450.0], [41.0, 3232.0], [42.0, 13340.0], [43.0, 2261.5], [45.0, 11498.0], [44.0, 10889.5], [47.0, 19843.5], [46.0, 15518.5], [48.0, 13253.5], [49.0, 1675.0], [51.0, 14895.5], [50.0, 14035.0], [53.0, 17440.0], [52.0, 3385.0], [54.0, 13890.0], [55.0, 16418.0], [56.0, 13256.5], [57.0, 16254.5], [58.0, 8338.0], [59.0, 40149.0], [60.0, 15459.5], [61.0, 3292.0], [62.0, 3108.5], [63.0, 3364.5], [67.0, 8448.5], [66.0, 15409.0], [64.0, 11239.0], [65.0, 13230.0], [69.0, 15697.5], [68.0, 10496.5], [71.0, 10326.0], [70.0, 18619.0], [75.0, 15714.0], [73.0, 11335.0], [72.0, 17808.0], [79.0, 8921.0], [77.0, 3421.0], [76.0, 16177.0], [78.0, 15439.0], [80.0, 9721.0], [83.0, 10102.0], [82.0, 14061.5], [86.0, 11870.0], [85.0, 15073.0], [88.0, 9168.0], [90.0, 3392.0], [91.0, 33520.0], [94.0, 2391.0], [95.0, 11068.0], [93.0, 32007.0], [98.0, 3864.5], [99.0, 8531.0], [97.0, 11868.0], [103.0, 2898.5], [101.0, 11133.0], [107.0, 22645.0], [104.0, 32902.0], [111.0, 1507.0], [108.0, 8549.0], [110.0, 31907.5], [112.0, 14497.5], [115.0, 17067.0], [119.0, 9053.5], [118.0, 8921.0], [120.0, 6851.5], [126.0, 13337.0], [124.0, 31635.5], [128.0, 3328.5], [131.0, 2542.0], [132.0, 12468.5], [130.0, 5960.5], [133.0, 9703.0], [142.0, 7869.0], [138.0, 10026.0], [151.0, 9334.0], [148.0, 15534.5], [144.0, 11236.0], [146.0, 20461.0], [153.0, 12018.0], [157.0, 29272.0], [161.0, 14449.0], [169.0, 7421.0], [174.0, 9773.5], [181.0, 9315.0], [178.0, 20494.5], [191.0, 3119.0], [209.0, 4610.0], [210.0, 11143.0], [224.0, 1500.5], [274.0, 4019.0], [335.0, 1954.0], [343.0, 3132.0], [361.0, 19291.0], [389.0, 3717.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[151.0, 0.0], [75.0, 11848.0], [20.0, 36387.0], [88.0, 0.0], [389.0, 0.0], [209.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 389.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 14.216666666666667, "minX": 1.6869111E12, "maxY": 94.65, "series": [{"data": [[1.6869114E12, 23.983333333333334], [1.68691122E12, 62.516666666666666], [1.6869111E12, 94.65], [1.68691134E12, 35.8], [1.68691128E12, 46.6], [1.68691146E12, 14.216666666666667], [1.68691116E12, 82.23333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68691146E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.6869111E12, "maxY": 82.23333333333333, "series": [{"data": [[1.6869114E12, 30.933333333333334], [1.68691122E12, 62.53333333333333], [1.6869111E12, 74.31666666666666], [1.68691134E12, 40.25], [1.68691128E12, 48.03333333333333], [1.68691146E12, 21.333333333333332], [1.68691116E12, 82.23333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6869111E12, 0.13333333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.6869114E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.TruncatedChunkException", "isController": false}, {"data": [[1.6869111E12, 0.2]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68691146E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.6869111E12, "maxY": 82.23333333333333, "series": [{"data": [[1.6869114E12, 30.933333333333334], [1.68691122E12, 62.53333333333333], [1.6869111E12, 74.31666666666666], [1.68691134E12, 40.25], [1.68691128E12, 48.03333333333333], [1.68691146E12, 21.333333333333332], [1.68691116E12, 82.23333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.6869114E12, 0.03333333333333333], [1.6869111E12, 0.3333333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68691146E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.6869111E12, "maxY": 82.23333333333333, "series": [{"data": [[1.6869114E12, 30.933333333333334], [1.68691122E12, 62.53333333333333], [1.6869111E12, 74.31666666666666], [1.68691134E12, 40.25], [1.68691128E12, 48.03333333333333], [1.68691146E12, 21.333333333333332], [1.68691116E12, 82.23333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6869114E12, 0.03333333333333333], [1.6869111E12, 0.3333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68691146E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

