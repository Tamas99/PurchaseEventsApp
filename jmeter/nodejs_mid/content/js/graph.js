/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 36.0, "minX": 0.0, "maxY": 93688.0, "series": [{"data": [[0.0, 36.0], [0.1, 67.0], [0.2, 67.0], [0.3, 67.0], [0.4, 67.0], [0.5, 67.0], [0.6, 67.0], [0.7, 68.0], [0.8, 68.0], [0.9, 68.0], [1.0, 68.0], [1.1, 68.0], [1.2, 68.0], [1.3, 68.0], [1.4, 68.0], [1.5, 68.0], [1.6, 68.0], [1.7, 68.0], [1.8, 68.0], [1.9, 68.0], [2.0, 68.0], [2.1, 68.0], [2.2, 68.0], [2.3, 68.0], [2.4, 68.0], [2.5, 68.0], [2.6, 68.0], [2.7, 69.0], [2.8, 69.0], [2.9, 69.0], [3.0, 69.0], [3.1, 69.0], [3.2, 69.0], [3.3, 69.0], [3.4, 69.0], [3.5, 69.0], [3.6, 69.0], [3.7, 69.0], [3.8, 69.0], [3.9, 69.0], [4.0, 69.0], [4.1, 69.0], [4.2, 69.0], [4.3, 69.0], [4.4, 69.0], [4.5, 69.0], [4.6, 69.0], [4.7, 69.0], [4.8, 69.0], [4.9, 69.0], [5.0, 69.0], [5.1, 69.0], [5.2, 69.0], [5.3, 69.0], [5.4, 69.0], [5.5, 69.0], [5.6, 69.0], [5.7, 69.0], [5.8, 69.0], [5.9, 69.0], [6.0, 69.0], [6.1, 69.0], [6.2, 69.0], [6.3, 69.0], [6.4, 69.0], [6.5, 70.0], [6.6, 70.0], [6.7, 70.0], [6.8, 70.0], [6.9, 70.0], [7.0, 70.0], [7.1, 70.0], [7.2, 70.0], [7.3, 70.0], [7.4, 70.0], [7.5, 70.0], [7.6, 70.0], [7.7, 70.0], [7.8, 70.0], [7.9, 70.0], [8.0, 70.0], [8.1, 70.0], [8.2, 70.0], [8.3, 70.0], [8.4, 70.0], [8.5, 70.0], [8.6, 70.0], [8.7, 70.0], [8.8, 70.0], [8.9, 70.0], [9.0, 70.0], [9.1, 70.0], [9.2, 70.0], [9.3, 70.0], [9.4, 70.0], [9.5, 70.0], [9.6, 70.0], [9.7, 70.0], [9.8, 70.0], [9.9, 70.0], [10.0, 70.0], [10.1, 70.0], [10.2, 70.0], [10.3, 70.0], [10.4, 70.0], [10.5, 70.0], [10.6, 70.0], [10.7, 71.0], [10.8, 71.0], [10.9, 71.0], [11.0, 71.0], [11.1, 71.0], [11.2, 71.0], [11.3, 71.0], [11.4, 71.0], [11.5, 71.0], [11.6, 71.0], [11.7, 71.0], [11.8, 71.0], [11.9, 71.0], [12.0, 71.0], [12.1, 71.0], [12.2, 71.0], [12.3, 71.0], [12.4, 71.0], [12.5, 71.0], [12.6, 71.0], [12.7, 71.0], [12.8, 71.0], [12.9, 71.0], [13.0, 71.0], [13.1, 71.0], [13.2, 71.0], [13.3, 71.0], [13.4, 71.0], [13.5, 71.0], [13.6, 71.0], [13.7, 71.0], [13.8, 71.0], [13.9, 71.0], [14.0, 71.0], [14.1, 71.0], [14.2, 71.0], [14.3, 71.0], [14.4, 71.0], [14.5, 72.0], [14.6, 72.0], [14.7, 72.0], [14.8, 72.0], [14.9, 72.0], [15.0, 72.0], [15.1, 72.0], [15.2, 72.0], [15.3, 72.0], [15.4, 72.0], [15.5, 72.0], [15.6, 72.0], [15.7, 72.0], [15.8, 72.0], [15.9, 72.0], [16.0, 72.0], [16.1, 72.0], [16.2, 72.0], [16.3, 72.0], [16.4, 72.0], [16.5, 72.0], [16.6, 72.0], [16.7, 72.0], [16.8, 72.0], [16.9, 72.0], [17.0, 72.0], [17.1, 73.0], [17.2, 73.0], [17.3, 73.0], [17.4, 73.0], [17.5, 73.0], [17.6, 73.0], [17.7, 73.0], [17.8, 73.0], [17.9, 73.0], [18.0, 73.0], [18.1, 73.0], [18.2, 73.0], [18.3, 73.0], [18.4, 73.0], [18.5, 73.0], [18.6, 73.0], [18.7, 73.0], [18.8, 73.0], [18.9, 73.0], [19.0, 73.0], [19.1, 74.0], [19.2, 74.0], [19.3, 74.0], [19.4, 74.0], [19.5, 74.0], [19.6, 74.0], [19.7, 74.0], [19.8, 74.0], [19.9, 74.0], [20.0, 74.0], [20.1, 74.0], [20.2, 74.0], [20.3, 74.0], [20.4, 74.0], [20.5, 74.0], [20.6, 74.0], [20.7, 74.0], [20.8, 74.0], [20.9, 74.0], [21.0, 74.0], [21.1, 74.0], [21.2, 74.0], [21.3, 75.0], [21.4, 75.0], [21.5, 75.0], [21.6, 75.0], [21.7, 75.0], [21.8, 75.0], [21.9, 75.0], [22.0, 75.0], [22.1, 75.0], [22.2, 75.0], [22.3, 75.0], [22.4, 75.0], [22.5, 75.0], [22.6, 75.0], [22.7, 75.0], [22.8, 75.0], [22.9, 75.0], [23.0, 75.0], [23.1, 75.0], [23.2, 75.0], [23.3, 75.0], [23.4, 75.0], [23.5, 75.0], [23.6, 76.0], [23.7, 76.0], [23.8, 76.0], [23.9, 76.0], [24.0, 76.0], [24.1, 76.0], [24.2, 76.0], [24.3, 76.0], [24.4, 76.0], [24.5, 76.0], [24.6, 76.0], [24.7, 76.0], [24.8, 76.0], [24.9, 76.0], [25.0, 76.0], [25.1, 76.0], [25.2, 76.0], [25.3, 76.0], [25.4, 77.0], [25.5, 77.0], [25.6, 77.0], [25.7, 77.0], [25.8, 77.0], [25.9, 77.0], [26.0, 77.0], [26.1, 77.0], [26.2, 77.0], [26.3, 77.0], [26.4, 77.0], [26.5, 77.0], [26.6, 77.0], [26.7, 77.0], [26.8, 78.0], [26.9, 78.0], [27.0, 78.0], [27.1, 78.0], [27.2, 78.0], [27.3, 78.0], [27.4, 78.0], [27.5, 78.0], [27.6, 78.0], [27.7, 78.0], [27.8, 78.0], [27.9, 79.0], [28.0, 79.0], [28.1, 79.0], [28.2, 79.0], [28.3, 79.0], [28.4, 79.0], [28.5, 79.0], [28.6, 79.0], [28.7, 80.0], [28.8, 80.0], [28.9, 80.0], [29.0, 80.0], [29.1, 80.0], [29.2, 80.0], [29.3, 80.0], [29.4, 81.0], [29.5, 81.0], [29.6, 81.0], [29.7, 81.0], [29.8, 81.0], [29.9, 82.0], [30.0, 82.0], [30.1, 82.0], [30.2, 82.0], [30.3, 83.0], [30.4, 83.0], [30.5, 83.0], [30.6, 84.0], [30.7, 84.0], [30.8, 85.0], [30.9, 85.0], [31.0, 85.0], [31.1, 86.0], [31.2, 87.0], [31.3, 88.0], [31.4, 89.0], [31.5, 90.0], [31.6, 91.0], [31.7, 92.0], [31.8, 93.0], [31.9, 94.0], [32.0, 95.0], [32.1, 96.0], [32.2, 98.0], [32.3, 100.0], [32.4, 104.0], [32.5, 106.0], [32.6, 110.0], [32.7, 113.0], [32.8, 125.0], [32.9, 133.0], [33.0, 140.0], [33.1, 155.0], [33.2, 175.0], [33.3, 442.0], [33.4, 714.0], [33.5, 817.0], [33.6, 855.0], [33.7, 894.0], [33.8, 920.0], [33.9, 946.0], [34.0, 962.0], [34.1, 995.0], [34.2, 1020.0], [34.3, 1063.0], [34.4, 1093.0], [34.5, 1113.0], [34.6, 1124.0], [34.7, 1137.0], [34.8, 1171.0], [34.9, 1181.0], [35.0, 1212.0], [35.1, 1255.0], [35.2, 1288.0], [35.3, 1306.0], [35.4, 1413.0], [35.5, 1815.0], [35.6, 1890.0], [35.7, 2093.0], [35.8, 2294.0], [35.9, 2332.0], [36.0, 2358.0], [36.1, 2395.0], [36.2, 2426.0], [36.3, 2437.0], [36.4, 2455.0], [36.5, 2468.0], [36.6, 2503.0], [36.7, 2671.0], [36.8, 2697.0], [36.9, 2704.0], [37.0, 2727.0], [37.1, 2743.0], [37.2, 2750.0], [37.3, 2777.0], [37.4, 2782.0], [37.5, 2791.0], [37.6, 2960.0], [37.7, 3031.0], [37.8, 3146.0], [37.9, 3201.0], [38.0, 3325.0], [38.1, 3396.0], [38.2, 3442.0], [38.3, 3472.0], [38.4, 3624.0], [38.5, 3707.0], [38.6, 3775.0], [38.7, 3808.0], [38.8, 3866.0], [38.9, 3943.0], [39.0, 3995.0], [39.1, 4017.0], [39.2, 4118.0], [39.3, 4132.0], [39.4, 4164.0], [39.5, 4173.0], [39.6, 4178.0], [39.7, 4298.0], [39.8, 4380.0], [39.9, 4500.0], [40.0, 4509.0], [40.1, 4544.0], [40.2, 4577.0], [40.3, 4617.0], [40.4, 4647.0], [40.5, 4653.0], [40.6, 4684.0], [40.7, 4815.0], [40.8, 5025.0], [40.9, 5192.0], [41.0, 5198.0], [41.1, 5202.0], [41.2, 5224.0], [41.3, 5287.0], [41.4, 5292.0], [41.5, 5300.0], [41.6, 5337.0], [41.7, 5407.0], [41.8, 5521.0], [41.9, 5619.0], [42.0, 5700.0], [42.1, 5750.0], [42.2, 5785.0], [42.3, 5833.0], [42.4, 5885.0], [42.5, 5891.0], [42.6, 5921.0], [42.7, 5945.0], [42.8, 6041.0], [42.9, 6062.0], [43.0, 6102.0], [43.1, 6155.0], [43.2, 6231.0], [43.3, 6279.0], [43.4, 6355.0], [43.5, 6381.0], [43.6, 6400.0], [43.7, 6411.0], [43.8, 6437.0], [43.9, 6457.0], [44.0, 6569.0], [44.1, 6786.0], [44.2, 6879.0], [44.3, 6984.0], [44.4, 7075.0], [44.5, 7089.0], [44.6, 7095.0], [44.7, 7103.0], [44.8, 7119.0], [44.9, 7131.0], [45.0, 7145.0], [45.1, 7170.0], [45.2, 7182.0], [45.3, 7201.0], [45.4, 7212.0], [45.5, 7223.0], [45.6, 7237.0], [45.7, 7272.0], [45.8, 7345.0], [45.9, 7472.0], [46.0, 7518.0], [46.1, 7569.0], [46.2, 7610.0], [46.3, 7681.0], [46.4, 7742.0], [46.5, 7820.0], [46.6, 7881.0], [46.7, 7942.0], [46.8, 7998.0], [46.9, 8033.0], [47.0, 8160.0], [47.1, 8189.0], [47.2, 8203.0], [47.3, 8209.0], [47.4, 8224.0], [47.5, 8355.0], [47.6, 8478.0], [47.7, 8529.0], [47.8, 8576.0], [47.9, 8607.0], [48.0, 8610.0], [48.1, 8642.0], [48.2, 8685.0], [48.3, 8750.0], [48.4, 8811.0], [48.5, 8867.0], [48.6, 8961.0], [48.7, 9026.0], [48.8, 9052.0], [48.9, 9097.0], [49.0, 9167.0], [49.1, 9285.0], [49.2, 9335.0], [49.3, 9390.0], [49.4, 9436.0], [49.5, 9467.0], [49.6, 9477.0], [49.7, 9544.0], [49.8, 9566.0], [49.9, 9574.0], [50.0, 9606.0], [50.1, 9635.0], [50.2, 9657.0], [50.3, 9682.0], [50.4, 9729.0], [50.5, 9796.0], [50.6, 9907.0], [50.7, 9924.0], [50.8, 9932.0], [50.9, 9965.0], [51.0, 10019.0], [51.1, 10074.0], [51.2, 10136.0], [51.3, 10165.0], [51.4, 10188.0], [51.5, 10224.0], [51.6, 10238.0], [51.7, 10289.0], [51.8, 10346.0], [51.9, 10373.0], [52.0, 10386.0], [52.1, 10408.0], [52.2, 10416.0], [52.3, 10427.0], [52.4, 10445.0], [52.5, 10452.0], [52.6, 10502.0], [52.7, 10550.0], [52.8, 10582.0], [52.9, 10700.0], [53.0, 10793.0], [53.1, 10852.0], [53.2, 10983.0], [53.3, 11067.0], [53.4, 11112.0], [53.5, 11169.0], [53.6, 11200.0], [53.7, 11236.0], [53.8, 11258.0], [53.9, 11275.0], [54.0, 11282.0], [54.1, 11343.0], [54.2, 11366.0], [54.3, 11429.0], [54.4, 11470.0], [54.5, 11509.0], [54.6, 11546.0], [54.7, 11578.0], [54.8, 11583.0], [54.9, 11627.0], [55.0, 11709.0], [55.1, 11861.0], [55.2, 11882.0], [55.3, 11928.0], [55.4, 12027.0], [55.5, 12040.0], [55.6, 12059.0], [55.7, 12126.0], [55.8, 12178.0], [55.9, 12382.0], [56.0, 12427.0], [56.1, 12461.0], [56.2, 12566.0], [56.3, 12649.0], [56.4, 12662.0], [56.5, 12725.0], [56.6, 12755.0], [56.7, 12768.0], [56.8, 12843.0], [56.9, 12899.0], [57.0, 12921.0], [57.1, 12978.0], [57.2, 13086.0], [57.3, 13096.0], [57.4, 13103.0], [57.5, 13156.0], [57.6, 13201.0], [57.7, 13243.0], [57.8, 13270.0], [57.9, 13301.0], [58.0, 13324.0], [58.1, 13366.0], [58.2, 13499.0], [58.3, 13789.0], [58.4, 13826.0], [58.5, 13861.0], [58.6, 13882.0], [58.7, 13905.0], [58.8, 13951.0], [58.9, 14017.0], [59.0, 14098.0], [59.1, 14349.0], [59.2, 14380.0], [59.3, 14416.0], [59.4, 14580.0], [59.5, 14667.0], [59.6, 14750.0], [59.7, 14878.0], [59.8, 14911.0], [59.9, 14924.0], [60.0, 14939.0], [60.1, 15027.0], [60.2, 15096.0], [60.3, 15135.0], [60.4, 15171.0], [60.5, 15260.0], [60.6, 15315.0], [60.7, 15348.0], [60.8, 15380.0], [60.9, 15521.0], [61.0, 15623.0], [61.1, 15705.0], [61.2, 15734.0], [61.3, 15756.0], [61.4, 15882.0], [61.5, 15940.0], [61.6, 16020.0], [61.7, 16051.0], [61.8, 16092.0], [61.9, 16103.0], [62.0, 16168.0], [62.1, 16205.0], [62.2, 16285.0], [62.3, 16368.0], [62.4, 16404.0], [62.5, 16474.0], [62.6, 16509.0], [62.7, 16565.0], [62.8, 16598.0], [62.9, 16617.0], [63.0, 16643.0], [63.1, 16662.0], [63.2, 16674.0], [63.3, 16714.0], [63.4, 16735.0], [63.5, 16763.0], [63.6, 16792.0], [63.7, 16839.0], [63.8, 16894.0], [63.9, 16925.0], [64.0, 17036.0], [64.1, 17130.0], [64.2, 17158.0], [64.3, 17213.0], [64.4, 17267.0], [64.5, 17309.0], [64.6, 17344.0], [64.7, 17374.0], [64.8, 17432.0], [64.9, 17502.0], [65.0, 17572.0], [65.1, 17585.0], [65.2, 17606.0], [65.3, 17637.0], [65.4, 17654.0], [65.5, 17685.0], [65.6, 17712.0], [65.7, 17731.0], [65.8, 17777.0], [65.9, 17797.0], [66.0, 17825.0], [66.1, 17837.0], [66.2, 17878.0], [66.3, 17912.0], [66.4, 17923.0], [66.5, 17946.0], [66.6, 17963.0], [66.7, 17984.0], [66.8, 18011.0], [66.9, 18080.0], [67.0, 18260.0], [67.1, 18324.0], [67.2, 18355.0], [67.3, 18462.0], [67.4, 18525.0], [67.5, 18565.0], [67.6, 18594.0], [67.7, 18638.0], [67.8, 18668.0], [67.9, 18807.0], [68.0, 18877.0], [68.1, 18975.0], [68.2, 19201.0], [68.3, 19252.0], [68.4, 19404.0], [68.5, 19434.0], [68.6, 19456.0], [68.7, 19546.0], [68.8, 19641.0], [68.9, 19699.0], [69.0, 19728.0], [69.1, 19771.0], [69.2, 19792.0], [69.3, 20273.0], [69.4, 20313.0], [69.5, 20344.0], [69.6, 20550.0], [69.7, 20721.0], [69.8, 20892.0], [69.9, 21073.0], [70.0, 21128.0], [70.1, 21162.0], [70.2, 21271.0], [70.3, 21543.0], [70.4, 21607.0], [70.5, 21674.0], [70.6, 21808.0], [70.7, 21890.0], [70.8, 21988.0], [70.9, 22026.0], [71.0, 22089.0], [71.1, 22495.0], [71.2, 22661.0], [71.3, 22699.0], [71.4, 22724.0], [71.5, 22731.0], [71.6, 22781.0], [71.7, 22856.0], [71.8, 22920.0], [71.9, 22933.0], [72.0, 23022.0], [72.1, 23111.0], [72.2, 23194.0], [72.3, 23232.0], [72.4, 23354.0], [72.5, 23652.0], [72.6, 23681.0], [72.7, 23722.0], [72.8, 23746.0], [72.9, 23757.0], [73.0, 23813.0], [73.1, 23983.0], [73.2, 24034.0], [73.3, 24167.0], [73.4, 24517.0], [73.5, 24686.0], [73.6, 24845.0], [73.7, 24929.0], [73.8, 24975.0], [73.9, 25010.0], [74.0, 25025.0], [74.1, 25055.0], [74.2, 25128.0], [74.3, 25216.0], [74.4, 25281.0], [74.5, 25348.0], [74.6, 25419.0], [74.7, 25727.0], [74.8, 25851.0], [74.9, 25886.0], [75.0, 25931.0], [75.1, 26066.0], [75.2, 26115.0], [75.3, 26178.0], [75.4, 26268.0], [75.5, 26404.0], [75.6, 26503.0], [75.7, 26756.0], [75.8, 26806.0], [75.9, 26936.0], [76.0, 27191.0], [76.1, 27288.0], [76.2, 27359.0], [76.3, 27460.0], [76.4, 27687.0], [76.5, 27719.0], [76.6, 27790.0], [76.7, 27854.0], [76.8, 27952.0], [76.9, 28104.0], [77.0, 28183.0], [77.1, 28259.0], [77.2, 28337.0], [77.3, 28503.0], [77.4, 28681.0], [77.5, 28779.0], [77.6, 28934.0], [77.7, 28949.0], [77.8, 29095.0], [77.9, 29310.0], [78.0, 29442.0], [78.1, 29579.0], [78.2, 29750.0], [78.3, 29910.0], [78.4, 30228.0], [78.5, 30247.0], [78.6, 30280.0], [78.7, 30308.0], [78.8, 30342.0], [78.9, 30357.0], [79.0, 30367.0], [79.1, 30396.0], [79.2, 30408.0], [79.3, 30422.0], [79.4, 30439.0], [79.5, 30493.0], [79.6, 30629.0], [79.7, 30686.0], [79.8, 30805.0], [79.9, 30930.0], [80.0, 31215.0], [80.1, 31382.0], [80.2, 31392.0], [80.3, 31422.0], [80.4, 31511.0], [80.5, 31543.0], [80.6, 31568.0], [80.7, 31601.0], [80.8, 31677.0], [80.9, 31739.0], [81.0, 31840.0], [81.1, 31870.0], [81.2, 31942.0], [81.3, 32284.0], [81.4, 32600.0], [81.5, 32847.0], [81.6, 32956.0], [81.7, 33053.0], [81.8, 33596.0], [81.9, 34027.0], [82.0, 35048.0], [82.1, 35406.0], [82.2, 36153.0], [82.3, 36638.0], [82.4, 36733.0], [82.5, 36990.0], [82.6, 37292.0], [82.7, 38125.0], [82.8, 38348.0], [82.9, 38726.0], [83.0, 38839.0], [83.1, 39990.0], [83.2, 40066.0], [83.3, 40106.0], [83.4, 40206.0], [83.5, 40782.0], [83.6, 40958.0], [83.7, 41091.0], [83.8, 41334.0], [83.9, 41656.0], [84.0, 41743.0], [84.1, 41839.0], [84.2, 42253.0], [84.3, 42558.0], [84.4, 42628.0], [84.5, 42704.0], [84.6, 42764.0], [84.7, 42836.0], [84.8, 42954.0], [84.9, 43480.0], [85.0, 43630.0], [85.1, 43676.0], [85.2, 43784.0], [85.3, 44311.0], [85.4, 44339.0], [85.5, 44405.0], [85.6, 44451.0], [85.7, 44570.0], [85.8, 44697.0], [85.9, 44775.0], [86.0, 44884.0], [86.1, 45016.0], [86.2, 45089.0], [86.3, 45162.0], [86.4, 45387.0], [86.5, 45524.0], [86.6, 45626.0], [86.7, 45747.0], [86.8, 45771.0], [86.9, 45892.0], [87.0, 45968.0], [87.1, 45974.0], [87.2, 46090.0], [87.3, 46199.0], [87.4, 47130.0], [87.5, 47282.0], [87.6, 47428.0], [87.7, 47519.0], [87.8, 47929.0], [87.9, 48434.0], [88.0, 49156.0], [88.1, 49364.0], [88.2, 49473.0], [88.3, 49667.0], [88.4, 49830.0], [88.5, 49902.0], [88.6, 50288.0], [88.7, 50445.0], [88.8, 50739.0], [88.9, 51375.0], [89.0, 51548.0], [89.1, 51829.0], [89.2, 52030.0], [89.3, 52458.0], [89.4, 52688.0], [89.5, 52723.0], [89.6, 52744.0], [89.7, 52810.0], [89.8, 52945.0], [89.9, 53077.0], [90.0, 53183.0], [90.1, 53517.0], [90.2, 53774.0], [90.3, 54089.0], [90.4, 54512.0], [90.5, 54944.0], [90.6, 55408.0], [90.7, 55684.0], [90.8, 55839.0], [90.9, 56261.0], [91.0, 56347.0], [91.1, 56460.0], [91.2, 56637.0], [91.3, 56770.0], [91.4, 57038.0], [91.5, 57663.0], [91.6, 57779.0], [91.7, 57837.0], [91.8, 57909.0], [91.9, 58144.0], [92.0, 58444.0], [92.1, 59014.0], [92.2, 59461.0], [92.3, 59551.0], [92.4, 59656.0], [92.5, 59812.0], [92.6, 59948.0], [92.7, 60079.0], [92.8, 60161.0], [92.9, 60311.0], [93.0, 61061.0], [93.1, 61170.0], [93.2, 61217.0], [93.3, 61262.0], [93.4, 61331.0], [93.5, 61391.0], [93.6, 61554.0], [93.7, 61764.0], [93.8, 61848.0], [93.9, 61879.0], [94.0, 61911.0], [94.1, 61973.0], [94.2, 62190.0], [94.3, 62286.0], [94.4, 62563.0], [94.5, 62625.0], [94.6, 62965.0], [94.7, 63421.0], [94.8, 63561.0], [94.9, 63813.0], [95.0, 64208.0], [95.1, 64350.0], [95.2, 64627.0], [95.3, 64879.0], [95.4, 65310.0], [95.5, 65349.0], [95.6, 65623.0], [95.7, 65798.0], [95.8, 65921.0], [95.9, 66001.0], [96.0, 66133.0], [96.1, 66406.0], [96.2, 66689.0], [96.3, 66867.0], [96.4, 67460.0], [96.5, 67898.0], [96.6, 68146.0], [96.7, 68358.0], [96.8, 69031.0], [96.9, 69439.0], [97.0, 69899.0], [97.1, 70733.0], [97.2, 71281.0], [97.3, 71794.0], [97.4, 72403.0], [97.5, 73198.0], [97.6, 73328.0], [97.7, 73399.0], [97.8, 73542.0], [97.9, 74054.0], [98.0, 74387.0], [98.1, 75658.0], [98.2, 78084.0], [98.3, 78209.0], [98.4, 78372.0], [98.5, 78774.0], [98.6, 78915.0], [98.7, 79037.0], [98.8, 79208.0], [98.9, 79365.0], [99.0, 79495.0], [99.1, 80705.0], [99.2, 82130.0], [99.3, 82530.0], [99.4, 83190.0], [99.5, 84084.0], [99.6, 84338.0], [99.7, 84596.0], [99.8, 85270.0], [99.9, 89243.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 4645.0, "series": [{"data": [[0.0, 4645.0], [66700.0, 10.0], [68300.0, 5.0], [69900.0, 1.0], [71500.0, 2.0], [73100.0, 4.0], [74700.0, 1.0], [79500.0, 8.0], [77900.0, 4.0], [81100.0, 1.0], [84300.0, 6.0], [87500.0, 1.0], [90700.0, 1.0], [100.0, 141.0], [32900.0, 15.0], [33700.0, 4.0], [36100.0, 6.0], [35300.0, 1.0], [37700.0, 5.0], [36900.0, 8.0], [38500.0, 1.0], [40900.0, 7.0], [40100.0, 10.0], [39300.0, 1.0], [42500.0, 6.0], [41700.0, 16.0], [44100.0, 1.0], [44900.0, 6.0], [43300.0, 1.0], [45700.0, 20.0], [47300.0, 8.0], [48900.0, 3.0], [48100.0, 1.0], [49700.0, 10.0], [50500.0, 2.0], [51300.0, 7.0], [52900.0, 10.0], [52100.0, 11.0], [200.0, 1.0], [54500.0, 1.0], [53700.0, 8.0], [56900.0, 6.0], [55300.0, 1.0], [59300.0, 3.0], [57700.0, 16.0], [58500.0, 1.0], [60100.0, 11.0], [61700.0, 14.0], [63300.0, 5.0], [62500.0, 12.0], [64100.0, 7.0], [64900.0, 6.0], [67400.0, 8.0], [65800.0, 10.0], [69000.0, 5.0], [70600.0, 6.0], [72200.0, 1.0], [300.0, 8.0], [78600.0, 5.0], [81800.0, 1.0], [83400.0, 2.0], [85000.0, 2.0], [86600.0, 1.0], [89800.0, 1.0], [400.0, 2.0], [500.0, 2.0], [600.0, 6.0], [700.0, 15.0], [800.0, 35.0], [900.0, 57.0], [1000.0, 44.0], [1100.0, 75.0], [1200.0, 45.0], [1300.0, 20.0], [1400.0, 6.0], [1500.0, 4.0], [1600.0, 2.0], [1700.0, 2.0], [1800.0, 17.0], [1900.0, 9.0], [2000.0, 6.0], [2300.0, 45.0], [2200.0, 14.0], [2400.0, 69.0], [2500.0, 2.0], [2600.0, 31.0], [2700.0, 99.0], [2800.0, 3.0], [2900.0, 21.0], [3000.0, 15.0], [3100.0, 16.0], [3300.0, 25.0], [3200.0, 12.0], [3400.0, 26.0], [3500.0, 7.0], [3700.0, 27.0], [3600.0, 17.0], [3800.0, 24.0], [3900.0, 26.0], [4000.0, 20.0], [4100.0, 66.0], [4200.0, 11.0], [4300.0, 15.0], [66500.0, 6.0], [68100.0, 8.0], [4400.0, 12.0], [4600.0, 60.0], [4500.0, 45.0], [72900.0, 5.0], [4800.0, 14.0], [4700.0, 6.0], [74500.0, 1.0], [4900.0, 4.0], [5000.0, 12.0], [5100.0, 26.0], [79300.0, 20.0], [5300.0, 29.0], [5200.0, 61.0], [82500.0, 1.0], [84100.0, 7.0], [5500.0, 9.0], [5600.0, 24.0], [5400.0, 13.0], [87300.0, 1.0], [5800.0, 45.0], [5700.0, 38.0], [5900.0, 23.0], [6000.0, 38.0], [6100.0, 21.0], [6300.0, 39.0], [6200.0, 26.0], [6500.0, 8.0], [6400.0, 54.0], [6600.0, 1.0], [6900.0, 16.0], [6800.0, 10.0], [6700.0, 18.0], [7000.0, 45.0], [7100.0, 93.0], [7200.0, 69.0], [7400.0, 20.0], [7300.0, 5.0], [7500.0, 33.0], [7600.0, 19.0], [7800.0, 23.0], [7700.0, 22.0], [7900.0, 26.0], [8100.0, 35.0], [8000.0, 16.0], [8600.0, 61.0], [8400.0, 16.0], [8200.0, 43.0], [8800.0, 27.0], [9200.0, 16.0], [9000.0, 34.0], [9600.0, 52.0], [9400.0, 42.0], [10000.0, 24.0], [9800.0, 8.0], [10200.0, 38.0], [10400.0, 76.0], [10600.0, 9.0], [11200.0, 63.0], [10800.0, 13.0], [11000.0, 19.0], [11400.0, 32.0], [11600.0, 15.0], [12000.0, 38.0], [11800.0, 24.0], [12200.0, 1.0], [12600.0, 29.0], [12400.0, 35.0], [13000.0, 35.0], [13200.0, 44.0], [12800.0, 21.0], [13800.0, 51.0], [13400.0, 10.0], [13600.0, 2.0], [14000.0, 16.0], [14800.0, 17.0], [14400.0, 5.0], [14600.0, 15.0], [15000.0, 21.0], [15200.0, 21.0], [15400.0, 5.0], [15600.0, 18.0], [15800.0, 17.0], [16000.0, 46.0], [16200.0, 17.0], [16400.0, 26.0], [16800.0, 32.0], [17200.0, 27.0], [18400.0, 16.0], [17600.0, 62.0], [18000.0, 32.0], [19200.0, 22.0], [18800.0, 22.0], [19600.0, 17.0], [20400.0, 4.0], [21200.0, 7.0], [20800.0, 11.0], [21600.0, 22.0], [22400.0, 8.0], [22000.0, 25.0], [22800.0, 17.0], [23200.0, 20.0], [24000.0, 22.0], [23600.0, 31.0], [24400.0, 4.0], [25200.0, 33.0], [24800.0, 7.0], [26000.0, 16.0], [26400.0, 13.0], [25600.0, 5.0], [27200.0, 17.0], [26800.0, 9.0], [27600.0, 11.0], [28400.0, 10.0], [28000.0, 8.0], [29200.0, 8.0], [29600.0, 5.0], [28800.0, 6.0], [30400.0, 51.0], [30000.0, 5.0], [30800.0, 12.0], [31200.0, 4.0], [31600.0, 21.0], [32400.0, 1.0], [32000.0, 3.0], [33600.0, 5.0], [32800.0, 10.0], [36000.0, 4.0], [35200.0, 2.0], [37600.0, 3.0], [38400.0, 2.0], [40800.0, 7.0], [40000.0, 25.0], [42400.0, 7.0], [41600.0, 11.0], [44800.0, 15.0], [43200.0, 3.0], [45600.0, 16.0], [47200.0, 4.0], [48000.0, 2.0], [49600.0, 3.0], [50400.0, 4.0], [51200.0, 5.0], [52800.0, 10.0], [52000.0, 11.0], [54400.0, 1.0], [53600.0, 6.0], [55200.0, 2.0], [56800.0, 3.0], [57600.0, 4.0], [58400.0, 10.0], [60000.0, 14.0], [62400.0, 3.0], [61600.0, 1.0], [63200.0, 1.0], [64800.0, 8.0], [67200.0, 7.0], [65600.0, 5.0], [73600.0, 4.0], [76800.0, 1.0], [78400.0, 4.0], [81600.0, 1.0], [86400.0, 1.0], [89600.0, 2.0], [68700.0, 1.0], [67100.0, 2.0], [73500.0, 10.0], [75100.0, 3.0], [78300.0, 7.0], [83100.0, 2.0], [33900.0, 2.0], [34700.0, 3.0], [33100.0, 4.0], [36300.0, 4.0], [37100.0, 7.0], [38700.0, 4.0], [40300.0, 2.0], [42700.0, 28.0], [41100.0, 4.0], [44300.0, 30.0], [43500.0, 9.0], [45900.0, 32.0], [45100.0, 12.0], [47500.0, 12.0], [49100.0, 2.0], [48300.0, 5.0], [50700.0, 7.0], [49900.0, 7.0], [51500.0, 13.0], [53100.0, 16.0], [53900.0, 2.0], [54700.0, 11.0], [56300.0, 20.0], [57100.0, 4.0], [55500.0, 3.0], [58700.0, 2.0], [57900.0, 10.0], [59500.0, 13.0], [60300.0, 8.0], [61100.0, 20.0], [61900.0, 27.0], [62700.0, 3.0], [63500.0, 11.0], [64300.0, 14.0], [65100.0, 1.0], [67800.0, 7.0], [69400.0, 4.0], [66200.0, 3.0], [72600.0, 3.0], [71000.0, 1.0], [74200.0, 7.0], [79000.0, 7.0], [82200.0, 5.0], [85400.0, 1.0], [93400.0, 1.0], [68500.0, 3.0], [71700.0, 11.0], [73300.0, 18.0], [78100.0, 12.0], [82900.0, 5.0], [84500.0, 2.0], [17300.0, 45.0], [16500.0, 34.0], [16900.0, 23.0], [17700.0, 49.0], [18500.0, 33.0], [18900.0, 11.0], [19300.0, 7.0], [19700.0, 44.0], [20100.0, 2.0], [20900.0, 4.0], [21300.0, 3.0], [20500.0, 8.0], [21700.0, 5.0], [22500.0, 5.0], [22100.0, 4.0], [22900.0, 39.0], [23300.0, 11.0], [23700.0, 46.0], [24500.0, 13.0], [24100.0, 4.0], [24900.0, 33.0], [25300.0, 14.0], [25700.0, 8.0], [26100.0, 24.0], [26500.0, 5.0], [27300.0, 18.0], [26900.0, 9.0], [28100.0, 20.0], [28500.0, 7.0], [27700.0, 29.0], [29300.0, 9.0], [28900.0, 23.0], [30500.0, 8.0], [29700.0, 10.0], [30900.0, 12.0], [31300.0, 38.0], [31700.0, 14.0], [32500.0, 11.0], [32100.0, 1.0], [33800.0, 2.0], [34600.0, 4.0], [33000.0, 9.0], [35400.0, 2.0], [36200.0, 5.0], [37000.0, 4.0], [37800.0, 1.0], [38600.0, 1.0], [40200.0, 17.0], [42600.0, 21.0], [41000.0, 11.0], [41800.0, 11.0], [45000.0, 19.0], [44200.0, 4.0], [43400.0, 4.0], [45800.0, 10.0], [47400.0, 14.0], [48200.0, 2.0], [49000.0, 2.0], [49800.0, 17.0], [50600.0, 4.0], [53000.0, 13.0], [51400.0, 5.0], [54600.0, 1.0], [53800.0, 4.0], [56200.0, 7.0], [57000.0, 9.0], [55400.0, 3.0], [58600.0, 7.0], [57800.0, 21.0], [59400.0, 16.0], [60200.0, 11.0], [61000.0, 6.0], [61800.0, 30.0], [63400.0, 11.0], [62600.0, 11.0], [64200.0, 9.0], [65000.0, 2.0], [66000.0, 14.0], [69200.0, 2.0], [70800.0, 2.0], [72400.0, 3.0], [74000.0, 1.0], [75600.0, 4.0], [78800.0, 10.0], [82000.0, 6.0], [85200.0, 5.0], [65900.0, 17.0], [69100.0, 2.0], [70700.0, 2.0], [77100.0, 2.0], [73900.0, 3.0], [75500.0, 1.0], [78700.0, 6.0], [81900.0, 4.0], [83500.0, 4.0], [85100.0, 7.0], [33300.0, 1.0], [34100.0, 4.0], [35700.0, 4.0], [38100.0, 1.0], [42900.0, 10.0], [41300.0, 15.0], [44500.0, 12.0], [43700.0, 14.0], [46100.0, 12.0], [45300.0, 12.0], [48500.0, 1.0], [47700.0, 3.0], [49300.0, 16.0], [52500.0, 4.0], [51700.0, 2.0], [54100.0, 6.0], [53300.0, 2.0], [54900.0, 4.0], [55700.0, 11.0], [56500.0, 5.0], [58100.0, 3.0], [61300.0, 27.0], [59700.0, 9.0], [62100.0, 8.0], [62900.0, 2.0], [64500.0, 2.0], [65300.0, 18.0], [63700.0, 2.0], [66600.0, 5.0], [68200.0, 8.0], [69800.0, 5.0], [71400.0, 3.0], [77800.0, 1.0], [79400.0, 8.0], [84200.0, 2.0], [87400.0, 1.0], [92200.0, 2.0], [65700.0, 12.0], [73700.0, 4.0], [70500.0, 6.0], [83300.0, 1.0], [84900.0, 1.0], [89700.0, 4.0], [86500.0, 1.0], [91300.0, 1.0], [8500.0, 30.0], [8700.0, 14.0], [8300.0, 11.0], [9100.0, 16.0], [8900.0, 16.0], [9700.0, 26.0], [9500.0, 55.0], [9300.0, 27.0], [9900.0, 56.0], [10100.0, 44.0], [10300.0, 50.0], [10500.0, 35.0], [10700.0, 19.0], [11100.0, 35.0], [10900.0, 15.0], [11300.0, 30.0], [11700.0, 12.0], [11500.0, 59.0], [12100.0, 26.0], [11900.0, 21.0], [12500.0, 14.0], [12300.0, 12.0], [12700.0, 45.0], [12900.0, 32.0], [13100.0, 30.0], [13300.0, 35.0], [13500.0, 12.0], [13700.0, 5.0], [13900.0, 30.0], [14300.0, 38.0], [14100.0, 3.0], [14700.0, 10.0], [14500.0, 16.0], [14900.0, 47.0], [15100.0, 34.0], [15300.0, 39.0], [15500.0, 12.0], [15700.0, 35.0], [16100.0, 28.0], [15900.0, 17.0], [16300.0, 26.0], [17400.0, 14.0], [16600.0, 60.0], [17000.0, 4.0], [18200.0, 12.0], [17800.0, 52.0], [18600.0, 35.0], [19400.0, 31.0], [19000.0, 4.0], [20200.0, 18.0], [19800.0, 1.0], [21000.0, 18.0], [20600.0, 4.0], [21400.0, 4.0], [21800.0, 21.0], [22200.0, 1.0], [22600.0, 25.0], [23400.0, 4.0], [23000.0, 9.0], [23800.0, 12.0], [24200.0, 5.0], [25000.0, 42.0], [24600.0, 14.0], [25400.0, 13.0], [25800.0, 32.0], [26200.0, 12.0], [26600.0, 3.0], [27400.0, 11.0], [27000.0, 6.0], [28600.0, 17.0], [28200.0, 14.0], [27800.0, 13.0], [29000.0, 12.0], [29400.0, 13.0], [29800.0, 9.0], [30600.0, 24.0], [30200.0, 42.0], [31400.0, 14.0], [31000.0, 4.0], [32200.0, 2.0], [32600.0, 7.0], [31800.0, 28.0], [34800.0, 1.0], [34000.0, 2.0], [33200.0, 3.0], [36400.0, 2.0], [38000.0, 2.0], [37200.0, 3.0], [38800.0, 19.0], [40400.0, 2.0], [42800.0, 12.0], [41200.0, 4.0], [42000.0, 2.0], [44400.0, 22.0], [43600.0, 19.0], [46000.0, 14.0], [45200.0, 3.0], [48400.0, 5.0], [49200.0, 4.0], [53200.0, 7.0], [51600.0, 6.0], [52400.0, 1.0], [54000.0, 5.0], [54800.0, 1.0], [56400.0, 8.0], [55600.0, 10.0], [57200.0, 2.0], [58000.0, 6.0], [59600.0, 13.0], [60400.0, 6.0], [61200.0, 22.0], [62000.0, 5.0], [62800.0, 4.0], [64400.0, 5.0], [65200.0, 2.0], [63600.0, 7.0], [66400.0, 4.0], [68000.0, 2.0], [69600.0, 4.0], [71200.0, 1.0], [74400.0, 2.0], [79200.0, 8.0], [82400.0, 2.0], [84000.0, 8.0], [87200.0, 1.0], [93600.0, 1.0], [67900.0, 6.0], [66300.0, 9.0], [69500.0, 4.0], [71100.0, 5.0], [75900.0, 4.0], [74300.0, 5.0], [79100.0, 7.0], [80700.0, 1.0], [82300.0, 5.0], [93500.0, 1.0], [33500.0, 4.0], [36700.0, 10.0], [35100.0, 8.0], [38300.0, 15.0], [37500.0, 1.0], [40700.0, 5.0], [39900.0, 2.0], [39100.0, 2.0], [42300.0, 3.0], [43100.0, 4.0], [44700.0, 18.0], [45500.0, 13.0], [47100.0, 13.0], [46300.0, 2.0], [48700.0, 2.0], [47900.0, 5.0], [49500.0, 10.0], [50300.0, 8.0], [51100.0, 1.0], [52700.0, 33.0], [51900.0, 4.0], [54300.0, 3.0], [53500.0, 5.0], [55100.0, 5.0], [56700.0, 7.0], [55900.0, 4.0], [58300.0, 7.0], [59900.0, 13.0], [60700.0, 1.0], [61500.0, 8.0], [63100.0, 4.0], [62300.0, 5.0], [65500.0, 6.0], [63900.0, 1.0], [64700.0, 5.0], [68600.0, 4.0], [67000.0, 1.0], [71800.0, 8.0], [73400.0, 7.0], [78200.0, 10.0], [83000.0, 3.0], [84600.0, 1.0], [67700.0, 4.0], [66100.0, 3.0], [69300.0, 4.0], [70900.0, 4.0], [72500.0, 2.0], [74100.0, 6.0], [78900.0, 12.0], [82100.0, 3.0], [85300.0, 2.0], [17100.0, 38.0], [16700.0, 57.0], [18300.0, 32.0], [17900.0, 68.0], [17500.0, 36.0], [19100.0, 7.0], [18700.0, 5.0], [19500.0, 25.0], [20300.0, 30.0], [21100.0, 31.0], [21500.0, 16.0], [20700.0, 8.0], [22300.0, 1.0], [21900.0, 17.0], [22700.0, 43.0], [23100.0, 21.0], [23500.0, 2.0], [23900.0, 6.0], [24300.0, 1.0], [25100.0, 10.0], [24700.0, 4.0], [25900.0, 16.0], [26300.0, 9.0], [27100.0, 9.0], [26700.0, 21.0], [27500.0, 2.0], [27900.0, 18.0], [28300.0, 13.0], [28700.0, 9.0], [29100.0, 5.0], [29500.0, 10.0], [30300.0, 68.0], [29900.0, 10.0], [30700.0, 10.0], [31500.0, 45.0], [31900.0, 20.0], [32700.0, 6.0], [34200.0, 1.0], [35000.0, 3.0], [36600.0, 14.0], [38200.0, 9.0], [37400.0, 1.0], [39800.0, 1.0], [39000.0, 1.0], [43000.0, 1.0], [41400.0, 1.0], [42200.0, 10.0], [44600.0, 14.0], [43800.0, 6.0], [45400.0, 12.0], [46200.0, 10.0], [47000.0, 1.0], [48600.0, 3.0], [47800.0, 2.0], [49400.0, 9.0], [50200.0, 14.0], [51000.0, 1.0], [52600.0, 18.0], [51800.0, 4.0], [54200.0, 3.0], [53400.0, 1.0], [55000.0, 2.0], [55800.0, 11.0], [56600.0, 17.0], [59000.0, 1.0], [59800.0, 10.0], [61400.0, 8.0], [62200.0, 16.0], [63000.0, 1.0], [64600.0, 7.0], [63800.0, 3.0], [65400.0, 4.0], [66800.0, 5.0], [68400.0, 5.0], [73200.0, 10.0], [71600.0, 2.0], [78000.0, 2.0], [79600.0, 4.0], [82800.0, 5.0], [84400.0, 10.0], [89200.0, 3.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 93600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 305.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 8553.0, "series": [{"data": [[0.0, 4797.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 305.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 8553.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 745.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 155.98761609907143, "minX": 1.68694428E12, "maxY": 600.0, "series": [{"data": [[1.68694434E12, 600.0], [1.68694464E12, 585.0698351115414], [1.6869447E12, 443.00515907136713], [1.68694452E12, 600.0], [1.68694458E12, 599.7079470198671], [1.6869444E12, 600.0], [1.68694446E12, 600.0], [1.68694428E12, 600.0], [1.68694476E12, 155.98761609907143]], "isOverall": false, "label": "RestApi", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68694476E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 36.0, "minX": 1.0, "maxY": 72843.11111111111, "series": [{"data": [[2.0, 4861.0], [3.0, 36.0], [4.0, 390.0], [5.0, 68.0], [6.0, 73.0], [7.0, 2928.0], [8.0, 71.0], [9.0, 5058.333333333334], [10.0, 395.5], [11.0, 70.0], [12.0, 71.0], [13.0, 74.0], [14.0, 72.0], [15.0, 10155.666666666668], [16.0, 74.0], [17.0, 3341.666666666667], [18.0, 76.0], [19.0, 68.0], [20.0, 12368.0], [21.0, 9897.0], [22.0, 71.0], [23.0, 4650.5], [24.0, 67.0], [25.0, 69.0], [26.0, 6223.8], [27.0, 71.0], [28.0, 75.0], [30.0, 70.0], [31.0, 10754.0], [33.0, 13382.428571428572], [32.0, 8914.75], [35.0, 14095.5], [34.0, 67.0], [37.0, 69.0], [36.0, 74.0], [39.0, 70.0], [38.0, 14068.0], [41.0, 75.0], [40.0, 2712.5], [43.0, 71.0], [42.0, 4794.333333333334], [45.0, 12216.0], [44.0, 74.0], [47.0, 70.0], [46.0, 73.0], [49.0, 69.0], [48.0, 71.0], [51.0, 69.0], [50.0, 18111.0], [53.0, 4494.0], [52.0, 67.0], [55.0, 19631.0], [54.0, 72.0], [57.0, 17821.6], [56.0, 70.0], [59.0, 73.0], [58.0, 10963.714285714286], [61.0, 12147.5], [60.0, 12151.0], [63.0, 76.0], [62.0, 9384.333333333332], [67.0, 12096.0], [66.0, 12095.0], [65.0, 20026.8], [64.0, 71.0], [71.0, 12070.0], [70.0, 69.0], [69.0, 13914.5], [68.0, 74.0], [75.0, 79.0], [74.0, 83.0], [72.0, 16159.25], [79.0, 78.0], [78.0, 77.0], [77.0, 80.0], [76.0, 79.0], [80.0, 79.0], [86.0, 78.0], [85.0, 6054.25], [84.0, 78.0], [91.0, 73.0], [90.0, 78.0], [89.0, 69.0], [88.0, 33262.24999999999], [95.0, 70.0], [94.0, 70.0], [93.0, 72.0], [92.0, 70.0], [99.0, 114.5], [97.0, 10766.0], [96.0, 10775.5], [103.0, 24383.333333333332], [102.0, 134.0], [101.0, 115.0], [107.0, 75.0], [106.0, 24879.8], [105.0, 20334.625], [111.0, 74.0], [110.0, 72.0], [109.0, 77.0], [108.0, 73.0], [115.0, 77.5], [113.0, 79.0], [112.0, 71.0], [119.0, 77.0], [118.0, 78.0], [117.0, 77.0], [116.0, 75.0], [123.0, 42493.57894736843], [122.0, 14455.0], [121.0, 77.0], [127.0, 69.0], [126.0, 15432.25], [125.0, 71.0], [124.0, 76.0], [135.0, 16100.5], [134.0, 71.0], [133.0, 74.0], [132.0, 23863.333333333336], [131.0, 21827.5], [130.0, 18954.5], [129.0, 69.0], [128.0, 69.0], [143.0, 13944.0], [142.0, 26115.4], [140.0, 70.0], [139.0, 21792.0], [138.0, 70.0], [137.0, 68.0], [136.0, 71.0], [151.0, 73.0], [150.0, 16032.0], [149.0, 68.0], [148.0, 69.0], [147.0, 23756.666666666664], [146.0, 13931.0], [145.0, 16041.5], [144.0, 18565.0], [159.0, 1081.0], [158.0, 73.0], [157.0, 14397.5], [156.0, 67.0], [155.0, 16374.000000000002], [153.0, 71.0], [152.0, 70.0], [167.0, 37794.71428571429], [166.0, 74.0], [165.0, 15972.0], [164.0, 75.0], [163.0, 71.0], [162.0, 18804.5], [161.0, 25857.166666666668], [160.0, 24068.0], [175.0, 28493.333333333336], [174.0, 73.0], [173.0, 74.0], [172.0, 21431.0], [171.0, 18898.666666666664], [170.0, 71.0], [169.0, 68.0], [168.0, 78.0], [183.0, 69.0], [182.0, 21362.5], [181.0, 70.0], [180.0, 71.0], [179.0, 21382.5], [178.0, 30712.6], [177.0, 21403.5], [176.0, 71.0], [191.0, 83.0], [190.0, 74.0], [189.0, 79.0], [188.0, 74.0], [187.0, 43360.4], [186.0, 21338.0], [185.0, 33137.33333333333], [184.0, 366.0], [198.0, 101.0], [197.0, 95.0], [196.0, 100.0], [195.0, 97.5], [193.0, 102.0], [192.0, 38024.0], [207.0, 72.0], [205.0, 74.0], [204.0, 26542.5], [203.0, 26584.5], [202.0, 37309.909090909096], [200.0, 98.5], [215.0, 69.0], [214.0, 29034.7619047619], [213.0, 158.5], [211.0, 39189.11111111111], [209.0, 73.5], [223.0, 21511.5], [222.0, 21519.5], [221.0, 21530.5], [220.0, 71.0], [219.0, 71.0], [218.0, 74.0], [217.0, 28762.333333333336], [216.0, 21628.5], [231.0, 73.0], [230.0, 34826.666666666664], [228.0, 72.0], [227.0, 68.0], [226.0, 37677.5], [225.0, 72.0], [224.0, 69.0], [239.0, 76.0], [238.0, 77.0], [237.0, 49052.166666666664], [236.0, 78.0], [235.0, 30220.5], [234.0, 39196.8], [233.0, 22528.5], [232.0, 71.0], [247.0, 68.0], [246.0, 21273.0], [245.0, 69.0], [244.0, 67.0], [243.0, 75.0], [242.0, 43169.6], [241.0, 69.0], [240.0, 72.0], [255.0, 21206.5], [254.0, 76.0], [253.0, 37179.0], [252.0, 40787.75], [251.0, 23096.0], [250.0, 67.0], [249.0, 76.0], [248.0, 71.0], [271.0, 75.0], [269.0, 18003.666666666664], [259.0, 36798.0], [258.0, 58799.57142857142], [257.0, 11565.75], [267.0, 34012.5], [266.0, 68.0], [265.0, 49850.8], [264.0, 29043.5], [263.0, 72.0], [262.0, 68.0], [261.0, 69.0], [260.0, 75.0], [286.0, 48371.33333333333], [287.0, 71.0], [285.0, 70.0], [284.0, 1080.0], [283.0, 54481.49999999999], [282.0, 26920.5], [281.0, 45500.545454545456], [280.0, 24470.0], [278.0, 75.0], [272.0, 71.0], [275.0, 73.0], [274.0, 67.5], [277.0, 73.0], [276.0, 37266.0], [302.0, 45552.42857142857], [303.0, 85.0], [301.0, 34759.5], [300.0, 70.0], [298.0, 37157.5], [297.0, 30337.250000000004], [296.0, 40870.333333333336], [295.0, 70.0], [288.0, 68.0], [291.0, 70.5], [289.0, 36879.5], [294.0, 43602.75], [293.0, 49472.5], [292.0, 70.0], [318.0, 95.0], [319.0, 95.5], [317.0, 83.0], [316.0, 52900.66666666667], [315.0, 76.0], [314.0, 71.0], [313.0, 69.0], [312.0, 70.0], [311.0, 36774.0], [305.0, 87.0], [304.0, 88.0], [307.0, 80.0], [306.0, 79.0], [310.0, 47892.22222222222], [309.0, 79.0], [308.0, 85.0], [334.0, 43777.75], [335.0, 32935.74999999999], [333.0, 58332.5], [332.0, 69.0], [331.0, 39629.0], [330.0, 36633.0], [329.0, 50823.33333333333], [328.0, 69.0], [327.0, 47839.666666666664], [320.0, 92.5], [322.0, 56470.75], [321.0, 88.0], [326.0, 68.0], [325.0, 95.75], [350.0, 57665.5], [351.0, 71.5], [349.0, 68.0], [348.0, 68.0], [347.0, 74.0], [346.0, 74.0], [345.0, 41832.5], [344.0, 69.0], [343.0, 73.0], [337.0, 43317.66666666667], [336.0, 30286.666666666664], [339.0, 20357.15789473684], [338.0, 45686.5], [342.0, 68.0], [341.0, 43837.33333333333], [340.0, 69.0], [366.0, 56189.642857142855], [367.0, 12389.526315789473], [364.0, 44882.5], [355.0, 34145.288888888885], [354.0, 68.0], [353.0, 58900.833333333336], [352.0, 36226.0], [363.0, 77.0], [362.0, 43164.166666666664], [361.0, 29968.666666666664], [360.0, 68.0], [359.0, 70.0], [358.0, 64064.25], [357.0, 73.0], [356.0, 70.5], [382.0, 73.5], [383.0, 42105.0], [381.0, 56121.33333333333], [380.0, 56129.33333333333], [379.0, 28106.333333333336], [378.0, 69.0], [377.0, 36929.5], [376.0, 70.0], [375.0, 69.33333333333333], [369.0, 42904.875], [368.0, 41031.5], [371.0, 53726.83333333333], [370.0, 73.0], [374.0, 71.0], [373.0, 42179.0], [372.0, 45547.0], [398.0, 67.0], [399.0, 70.5], [397.0, 72.0], [396.0, 52944.33333333333], [395.0, 70.0], [394.0, 28480.666666666664], [393.0, 28491.333333333336], [392.0, 76.0], [391.0, 28502.666666666664], [384.0, 75.0], [387.0, 72.0], [385.0, 31603.6], [390.0, 46706.17857142858], [389.0, 56085.0], [388.0, 70.0], [414.0, 77.0], [415.0, 39274.5], [413.0, 70.0], [412.0, 70.0], [411.0, 72.0], [410.0, 64405.9411764706], [409.0, 36724.0], [408.0, 71.0], [407.0, 42621.0], [401.0, 69.0], [400.0, 52918.0], [403.0, 42638.5], [402.0, 31771.2], [406.0, 59485.125], [405.0, 75.0], [404.0, 68.0], [430.0, 69.0], [431.0, 41776.0], [429.0, 52231.33333333333], [428.0, 71.5], [427.0, 60134.88888888889], [426.0, 39225.0], [425.0, 55384.33333333333], [424.0, 71.0], [423.0, 39242.5], [417.0, 70.0], [416.0, 73.0], [419.0, 67.0], [418.0, 39255.0], [422.0, 70.0], [421.0, 70.0], [420.0, 70.0], [446.0, 68.0], [447.0, 70.0], [445.0, 68.0], [444.0, 41105.5], [443.0, 32292.8], [442.0, 33285.0], [441.0, 74.0], [440.0, 41156.5], [439.0, 27470.333333333336], [432.0, 69.0], [434.0, 73.0], [433.0, 71.0], [438.0, 35402.29268292683], [437.0, 72329.33333333333], [436.0, 75.5], [462.0, 71.5], [463.0, 71.0], [461.0, 78.0], [460.0, 32250.57142857143], [459.0, 40762.5], [458.0, 26145.666666666664], [457.0, 69.0], [456.0, 76.0], [455.0, 54132.53846153846], [448.0, 70.0], [450.0, 77.0], [449.0, 30065.375], [454.0, 65027.8], [453.0, 61303.0], [452.0, 40055.166666666664], [478.0, 34496.833333333336], [479.0, 26376.333333333336], [477.0, 69.0], [476.0, 69.0], [475.0, 19065.782608695652], [474.0, 72843.11111111111], [473.0, 65181.24000000001], [472.0, 156.5], [470.0, 150.0], [465.0, 70.0], [464.0, 73.0], [467.0, 71.5], [466.0, 70.5], [469.0, 40716.25], [468.0, 47942.2], [494.0, 68.0], [495.0, 69.0], [493.0, 71.0], [492.0, 36173.0], [491.0, 49298.75], [490.0, 39427.0], [489.0, 39998.5], [488.0, 47332.2], [487.0, 75.66666666666667], [481.0, 39519.5], [480.0, 78.0], [483.0, 70.5], [482.0, 39516.0], [486.0, 49995.33333333333], [485.0, 47368.2], [484.0, 19783.0], [510.0, 37154.10714285714], [511.0, 31993.142857142862], [509.0, 36636.72222222222], [508.0, 41287.5], [507.0, 69.0], [506.0, 46775.99999999999], [505.0, 83.0], [503.0, 31813.6], [497.0, 44249.444444444445], [496.0, 53108.33333333333], [499.0, 44986.88888888889], [498.0, 72.0], [502.0, 40626.25], [501.0, 54152.66666666667], [500.0, 32537.7], [537.0, 111.0], [542.0, 95.0], [543.0, 103.0], [529.0, 28233.399999999998], [528.0, 32356.11111111111], [531.0, 32288.5], [530.0, 34926.75], [533.0, 108.0], [532.0, 32302.5], [541.0, 36700.0], [540.0, 96.0], [539.0, 28310.2], [536.0, 104.0], [519.0, 69.0], [518.0, 47733.6], [517.0, 49025.33333333333], [516.0, 51940.8], [515.0, 24793.666666666664], [514.0, 77.0], [513.0, 27898.500000000004], [512.0, 71.0], [527.0, 71.0], [526.0, 11808.0], [525.0, 69.0], [524.0, 30246.564102564105], [523.0, 39736.5], [522.0, 20066.714285714286], [521.0, 68.75], [520.0, 71.0], [535.0, 113.0], [534.0, 105.0], [572.0, 23528.25], [575.0, 26693.13888888889], [561.0, 77.0], [560.0, 70540.0], [563.0, 68.66666666666667], [562.0, 15343.528301886796], [565.0, 21256.666666666664], [564.0, 17756.466666666667], [574.0, 33789.854166666686], [573.0, 30209.64285714286], [571.0, 70.2], [570.0, 72.0], [569.0, 53426.166666666664], [568.0, 66.0], [559.0, 82.0], [544.0, 94.66666666666667], [547.0, 24498.333333333336], [546.0, 24498.333333333332], [549.0, 93.33333333333333], [548.0, 94.0], [551.0, 92.0], [550.0, 91.0], [558.0, 83.5], [557.0, 84.0], [555.0, 86.0], [554.0, 90.0], [553.0, 90.33333333333333], [552.0, 90.0], [567.0, 33187.5], [566.0, 44120.833333333336], [592.0, 12650.249999999998], [596.0, 18148.71317829457], [600.0, 14762.718551797043], [583.0, 30583.73972602739], [582.0, 45336.0], [581.0, 75.0], [580.0, 20771.58823529412], [579.0, 13893.531250000002], [578.0, 38912.23333333334], [577.0, 21615.571428571428], [576.0, 15396.499999999998], [599.0, 35852.28395061728], [598.0, 34823.61904761905], [597.0, 22711.213414634156], [595.0, 39059.92307692308], [594.0, 31068.6], [593.0, 22112.714285714286], [590.0, 16689.852941176472], [589.0, 39539.25], [588.0, 27339.25], [587.0, 21235.151898734173], [586.0, 34628.37209302326], [585.0, 20161.58823529412], [584.0, 70.0], [1.0, 3261.5]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[566.30201388889, 17360.48249999996]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 600.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1874.35, "minX": 1.68694428E12, "maxY": 9280789.016666668, "series": [{"data": [[1.68694434E12, 7180628.916666667], [1.68694464E12, 5676554.716666667], [1.6869447E12, 7982980.383333334], [1.68694452E12, 7529078.666666667], [1.68694458E12, 9280789.016666668], [1.6869444E12, 6037214.416666667], [1.68694446E12, 7034348.7], [1.68694428E12, 476710.85], [1.68694476E12, 6060428.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68694434E12, 17012.533333333333], [1.68694464E12, 4856.833333333333], [1.6869447E12, 4255.0], [1.68694452E12, 8122.633333333333], [1.68694458E12, 5954.416666666667], [1.6869444E12, 7401.133333333333], [1.68694446E12, 7824.3], [1.68694428E12, 5278.966666666666], [1.68694476E12, 1874.35]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68694476E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1963.4101010101035, "minX": 1.68694428E12, "maxY": 32704.769561478905, "series": [{"data": [[1.68694434E12, 8933.744014732947], [1.68694464E12, 24065.889427740054], [1.6869447E12, 32704.769561478905], [1.68694452E12, 21645.84335981844], [1.68694458E12, 27693.113245033088], [1.6869444E12, 16372.569873997709], [1.68694446E12, 16965.38663620787], [1.68694428E12, 1963.4101010101035], [1.68694476E12, 20112.93498452008]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68694476E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1827.1383838383833, "minX": 1.68694428E12, "maxY": 24640.899398108326, "series": [{"data": [[1.68694434E12, 8270.116285188104], [1.68694464E12, 19640.674102812813], [1.6869447E12, 24640.899398108326], [1.68694452E12, 18024.489784336023], [1.68694458E12, 22350.883443708582], [1.6869444E12, 13619.747422680424], [1.68694446E12, 13566.205596801816], [1.68694428E12, 1827.1383838383833], [1.68694476E12, 13116.436532507742]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68694476E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 22.494039735099346, "minX": 1.68694428E12, "maxY": 331.08383838383816, "series": [{"data": [[1.68694434E12, 81.04840831360188], [1.68694464E12, 29.803103782735164], [1.6869447E12, 25.095442820292376], [1.68694452E12, 24.583427922814995], [1.68694458E12, 22.494039735099346], [1.6869444E12, 25.806987399770946], [1.68694446E12, 23.915476870359793], [1.68694428E12, 331.08383838383816], [1.68694476E12, 28.49226006191953]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68694476E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 36.0, "minX": 1.68694428E12, "maxY": 93688.0, "series": [{"data": [[1.68694434E12, 33936.0], [1.68694464E12, 75904.0], [1.6869447E12, 93688.0], [1.68694452E12, 67498.0], [1.68694458E12, 77193.0], [1.6869444E12, 51544.0], [1.68694446E12, 64638.0], [1.68694428E12, 6541.0], [1.68694476E12, 78364.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68694434E12, 66.0], [1.68694464E12, 66.0], [1.6869447E12, 66.0], [1.68694452E12, 66.0], [1.68694458E12, 66.0], [1.6869444E12, 66.0], [1.68694446E12, 67.0], [1.68694428E12, 68.0], [1.68694476E12, 36.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68694434E12, 20214.5], [1.68694464E12, 61331.200000000004], [1.6869447E12, 82368.6], [1.68694452E12, 59517.3], [1.68694458E12, 66587.0], [1.6869444E12, 44340.4], [1.68694446E12, 44309.0], [1.68694428E12, 4379.9], [1.68694476E12, 56391.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68694434E12, 31382.55], [1.68694464E12, 68315.84], [1.6869447E12, 89748.47], [1.68694452E12, 65758.97], [1.68694458E12, 73520.6], [1.6869444E12, 49224.64], [1.68694446E12, 49836.85], [1.68694428E12, 6055.360000000001], [1.68694476E12, 74387.57]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68694434E12, 7186.0], [1.68694464E12, 17207.0], [1.6869447E12, 27447.5], [1.68694452E12, 16908.0], [1.68694458E12, 24485.0], [1.6869444E12, 14572.0], [1.68694446E12, 12446.0], [1.68694428E12, 1280.5], [1.68694476E12, 5531.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.68694434E12, 28700.5], [1.68694464E12, 63594.9], [1.6869447E12, 84485.95], [1.68694452E12, 61907.95], [1.68694458E12, 69395.0], [1.6869444E12, 45494.399999999994], [1.68694446E12, 46377.25], [1.68694428E12, 4943.999999999997], [1.68694476E12, 65346.85]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68694476E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 69.0, "minX": 1.0, "maxY": 73482.5, "series": [{"data": [[2.0, 78.0], [3.0, 16914.0], [4.0, 79.5], [5.0, 73.5], [6.0, 40220.0], [7.0, 42647.0], [8.0, 11625.5], [10.0, 73482.5], [12.0, 37702.5], [13.0, 6157.5], [14.0, 89.0], [15.0, 69.0], [16.0, 10444.5], [17.0, 76.0], [18.0, 688.0], [20.0, 10640.5], [22.0, 8505.0], [23.0, 32495.0], [24.0, 9997.0], [25.0, 14080.0], [26.0, 41737.0], [27.0, 21741.0], [28.0, 27359.5], [29.0, 79.5], [30.0, 27324.0], [31.0, 75.0], [32.0, 16646.0], [33.0, 22437.5], [34.0, 13100.0], [36.0, 6787.0], [37.0, 10110.5], [38.0, 16355.5], [40.0, 14388.0], [41.0, 22933.0], [43.0, 18049.0], [44.0, 79.5], [45.0, 78.0], [46.0, 32592.5], [49.0, 23080.5], [51.0, 12923.0], [50.0, 10828.0], [52.0, 15888.5], [53.0, 75.0], [54.0, 19175.5], [57.0, 89.0], [56.0, 15288.0], [59.0, 16021.0], [58.0, 10133.5], [60.0, 21841.5], [61.0, 10396.5], [62.0, 16168.5], [67.0, 5895.0], [66.0, 28940.5], [64.0, 28516.5], [65.0, 31685.5], [69.0, 3149.5], [68.0, 81.5], [71.0, 25359.0], [70.0, 15728.5], [75.0, 2455.0], [74.0, 14537.5], [73.0, 56407.0], [76.0, 12042.0], [79.0, 20310.0], [78.0, 15194.0], [82.0, 6017.0], [80.0, 23030.5], [83.0, 13947.5], [86.0, 5201.0], [87.0, 18008.0], [84.0, 10043.0], [91.0, 15315.0], [89.0, 17697.0], [90.0, 12963.0], [94.0, 8600.0], [92.0, 91.0], [96.0, 3398.5], [98.0, 7470.0], [99.0, 14831.5], [97.0, 23101.0], [102.0, 12126.0], [101.0, 31542.5], [100.0, 22005.0], [105.0, 6780.0], [104.0, 62637.0], [109.0, 4126.5], [110.0, 11390.5], [112.0, 23679.0], [116.0, 11467.0], [118.0, 29411.0], [121.0, 32951.5], [130.0, 14961.0], [132.0, 11168.0], [135.0, 21779.0], [138.0, 3422.0], [140.0, 17135.0], [139.0, 23715.5], [149.0, 9564.5], [146.0, 11936.0], [150.0, 9328.5], [153.0, 21680.0], [165.0, 11282.0], [174.0, 4641.0], [185.0, 9927.0], [210.0, 26137.0], [229.0, 17983.0], [235.0, 2334.0], [254.0, 1053.5], [281.0, 5408.0], [1.0, 70.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 6378.0], [33.0, 10420.0], [34.0, 6274.0], [36.0, 5371.0], [37.0, 7516.0], [40.0, 5967.0], [43.0, 6179.0], [44.0, 5295.0], [49.0, 6472.0], [50.0, 10163.5], [56.0, 9476.5], [58.0, 2954.5], [59.0, 10998.0], [60.0, 7669.5], [66.0, 7790.0], [71.0, 8158.0], [76.0, 6435.0], [79.0, 12476.0], [83.0, 6920.0], [91.0, 7419.0], [92.0, 5198.0], [6.0, 8354.0], [97.0, 4643.0], [99.0, 11410.0], [102.0, 4338.0], [101.0, 7731.5], [100.0, 10328.0], [104.0, 8449.0], [118.0, 11562.0], [121.0, 9091.0], [135.0, 4391.0], [139.0, 5898.0], [149.0, 1945.0], [12.0, 2452.5], [210.0, 6393.0], [22.0, 8685.5], [23.0, 9436.0], [25.0, 11499.0], [27.0, 8983.5], [30.0, 7127.0], [31.0, 10760.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 281.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 56824.0, "series": [{"data": [[2.0, 78.0], [3.0, 16914.0], [4.0, 79.5], [5.0, 73.5], [6.0, 29936.0], [7.0, 31901.0], [8.0, 9041.5], [10.0, 56824.0], [12.0, 28966.0], [13.0, 6157.5], [14.0, 89.0], [15.0, 69.0], [16.0, 8186.5], [17.0, 76.0], [18.0, 688.0], [20.0, 10640.5], [22.0, 7517.5], [23.0, 22761.0], [24.0, 9997.0], [25.0, 14080.0], [26.0, 22220.0], [27.0, 20514.0], [28.0, 17704.0], [29.0, 79.5], [30.0, 27324.0], [31.0, 75.0], [32.0, 15411.0], [33.0, 17589.0], [34.0, 13100.0], [36.0, 5577.5], [37.0, 10110.5], [38.0, 14125.5], [40.0, 13495.0], [41.0, 22933.0], [43.0, 17107.0], [44.0, 79.5], [45.0, 78.0], [46.0, 32587.5], [49.0, 21729.5], [51.0, 12923.0], [50.0, 10828.0], [52.0, 15888.5], [53.0, 75.0], [54.0, 12801.0], [57.0, 89.0], [56.0, 15288.0], [59.0, 14746.5], [58.0, 10133.5], [60.0, 12920.5], [61.0, 10396.5], [62.0, 16168.5], [67.0, 5895.0], [66.0, 28940.5], [64.0, 21478.0], [65.0, 31685.5], [69.0, 3149.5], [68.0, 81.5], [71.0, 24821.0], [70.0, 15728.5], [75.0, 1991.0], [74.0, 13929.5], [73.0, 50161.0], [76.0, 10966.0], [79.0, 18987.0], [78.0, 15194.0], [82.0, 6017.0], [80.0, 21700.5], [83.0, 13947.5], [86.0, 5201.0], [87.0, 18008.0], [84.0, 10043.0], [91.0, 15315.0], [89.0, 15912.0], [90.0, 11215.0], [94.0, 6077.0], [92.0, 91.0], [96.0, 2574.5], [98.0, 5143.5], [99.0, 14831.5], [97.0, 23101.0], [102.0, 12126.0], [101.0, 31542.5], [100.0, 22005.0], [105.0, 6780.0], [104.0, 52657.0], [109.0, 4126.5], [110.0, 11390.5], [112.0, 23679.0], [116.0, 11467.0], [118.0, 29411.0], [121.0, 32951.5], [130.0, 11278.5], [132.0, 11168.0], [135.0, 21779.0], [138.0, 2887.0], [140.0, 17135.0], [139.0, 23715.5], [149.0, 6373.0], [146.0, 11936.0], [150.0, 9208.5], [153.0, 21680.0], [165.0, 11282.0], [174.0, 3930.0], [185.0, 9927.0], [210.0, 26137.0], [229.0, 17983.0], [235.0, 2334.0], [254.0, 1026.5], [281.0, 5153.0], [1.0, 70.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 6378.0], [33.0, 10420.0], [34.0, 6274.0], [36.0, 5371.0], [37.0, 7516.0], [40.0, 5967.0], [43.0, 6179.0], [44.0, 0.0], [49.0, 6472.0], [50.0, 10163.5], [56.0, 9476.5], [58.0, 2954.5], [59.0, 10998.0], [60.0, 7669.5], [66.0, 7790.0], [71.0, 8158.0], [76.0, 6435.0], [79.0, 12476.0], [83.0, 6920.0], [91.0, 7419.0], [92.0, 0.0], [6.0, 8354.0], [97.0, 4643.0], [99.0, 11410.0], [102.0, 4338.0], [101.0, 7731.5], [100.0, 10328.0], [104.0, 8449.0], [118.0, 11562.0], [121.0, 9091.0], [135.0, 4391.0], [139.0, 5898.0], [149.0, 1945.0], [12.0, 2452.5], [210.0, 6393.0], [22.0, 8685.5], [23.0, 9436.0], [25.0, 11499.0], [27.0, 8983.5], [30.0, 7127.0], [31.0, 10760.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 281.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 5.833333333333333, "minX": 1.68694428E12, "maxY": 63.35, "series": [{"data": [[1.68694434E12, 63.35], [1.68694464E12, 16.6], [1.6869447E12, 14.95], [1.68694452E12, 29.366666666666667], [1.68694458E12, 25.116666666666667], [1.6869444E12, 29.1], [1.68694446E12, 29.183333333333334], [1.68694428E12, 26.5], [1.68694476E12, 5.833333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68694476E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.68694428E12, "maxY": 62.4, "series": [{"data": [[1.68694434E12, 62.4], [1.68694464E12, 16.016666666666666], [1.6869447E12, 17.333333333333332], [1.68694452E12, 26.0], [1.68694458E12, 22.983333333333334], [1.6869444E12, 27.916666666666668], [1.68694446E12, 27.733333333333334], [1.68694428E12, 16.5], [1.68694476E12, 10.7]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68694434E12, 0.95], [1.68694464E12, 1.1666666666666667], [1.6869447E12, 1.3833333333333333], [1.68694452E12, 3.1166666666666667], [1.68694458E12, 2.183333333333333], [1.6869444E12, 1.1833333333333333], [1.68694446E12, 1.45], [1.68694476E12, 0.06666666666666667]], "isOverall": false, "label": "400", "isController": false}, {"data": [[1.6869447E12, 0.6666666666666666], [1.68694452E12, 0.25]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68694476E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.68694428E12, "maxY": 62.4, "series": [{"data": [[1.68694434E12, 62.4], [1.68694464E12, 16.016666666666666], [1.6869447E12, 17.333333333333332], [1.68694452E12, 26.0], [1.68694458E12, 22.983333333333334], [1.6869444E12, 27.916666666666668], [1.68694446E12, 27.733333333333334], [1.68694428E12, 16.5], [1.68694476E12, 10.7]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68694434E12, 0.95], [1.68694464E12, 1.1666666666666667], [1.6869447E12, 2.05], [1.68694452E12, 3.3666666666666667], [1.68694458E12, 2.183333333333333], [1.6869444E12, 1.1833333333333333], [1.68694446E12, 1.45], [1.68694476E12, 0.06666666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68694476E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.68694428E12, "maxY": 62.4, "series": [{"data": [[1.68694434E12, 62.4], [1.68694464E12, 16.016666666666666], [1.6869447E12, 17.333333333333332], [1.68694452E12, 26.0], [1.68694458E12, 22.983333333333334], [1.6869444E12, 27.916666666666668], [1.68694446E12, 27.733333333333334], [1.68694428E12, 16.5], [1.68694476E12, 10.7]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68694434E12, 0.95], [1.68694464E12, 1.1666666666666667], [1.6869447E12, 2.05], [1.68694452E12, 3.3666666666666667], [1.68694458E12, 2.183333333333333], [1.6869444E12, 1.1833333333333333], [1.68694446E12, 1.45], [1.68694476E12, 0.06666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68694476E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

