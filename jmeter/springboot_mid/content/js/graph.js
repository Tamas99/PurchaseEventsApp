/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 37.0, "minX": 0.0, "maxY": 68668.0, "series": [{"data": [[0.0, 37.0], [0.1, 42.0], [0.2, 46.0], [0.3, 48.0], [0.4, 51.0], [0.5, 53.0], [0.6, 54.0], [0.7, 55.0], [0.8, 56.0], [0.9, 56.0], [1.0, 57.0], [1.1, 58.0], [1.2, 59.0], [1.3, 60.0], [1.4, 61.0], [1.5, 61.0], [1.6, 62.0], [1.7, 62.0], [1.8, 63.0], [1.9, 64.0], [2.0, 65.0], [2.1, 65.0], [2.2, 66.0], [2.3, 67.0], [2.4, 67.0], [2.5, 68.0], [2.6, 69.0], [2.7, 69.0], [2.8, 70.0], [2.9, 71.0], [3.0, 71.0], [3.1, 72.0], [3.2, 72.0], [3.3, 73.0], [3.4, 74.0], [3.5, 74.0], [3.6, 75.0], [3.7, 75.0], [3.8, 76.0], [3.9, 77.0], [4.0, 77.0], [4.1, 78.0], [4.2, 78.0], [4.3, 79.0], [4.4, 80.0], [4.5, 80.0], [4.6, 81.0], [4.7, 81.0], [4.8, 82.0], [4.9, 82.0], [5.0, 83.0], [5.1, 83.0], [5.2, 84.0], [5.3, 84.0], [5.4, 85.0], [5.5, 85.0], [5.6, 86.0], [5.7, 86.0], [5.8, 87.0], [5.9, 87.0], [6.0, 88.0], [6.1, 88.0], [6.2, 88.0], [6.3, 89.0], [6.4, 90.0], [6.5, 90.0], [6.6, 91.0], [6.7, 91.0], [6.8, 92.0], [6.9, 92.0], [7.0, 93.0], [7.1, 93.0], [7.2, 94.0], [7.3, 94.0], [7.4, 95.0], [7.5, 95.0], [7.6, 96.0], [7.7, 96.0], [7.8, 97.0], [7.9, 97.0], [8.0, 98.0], [8.1, 98.0], [8.2, 99.0], [8.3, 99.0], [8.4, 100.0], [8.5, 100.0], [8.6, 101.0], [8.7, 101.0], [8.8, 101.0], [8.9, 102.0], [9.0, 102.0], [9.1, 103.0], [9.2, 103.0], [9.3, 104.0], [9.4, 104.0], [9.5, 105.0], [9.6, 105.0], [9.7, 106.0], [9.8, 106.0], [9.9, 107.0], [10.0, 107.0], [10.1, 108.0], [10.2, 108.0], [10.3, 109.0], [10.4, 109.0], [10.5, 110.0], [10.6, 110.0], [10.7, 111.0], [10.8, 111.0], [10.9, 112.0], [11.0, 112.0], [11.1, 113.0], [11.2, 114.0], [11.3, 114.0], [11.4, 114.0], [11.5, 115.0], [11.6, 115.0], [11.7, 116.0], [11.8, 117.0], [11.9, 117.0], [12.0, 118.0], [12.1, 118.0], [12.2, 119.0], [12.3, 119.0], [12.4, 120.0], [12.5, 121.0], [12.6, 121.0], [12.7, 121.0], [12.8, 122.0], [12.9, 122.0], [13.0, 123.0], [13.1, 124.0], [13.2, 124.0], [13.3, 125.0], [13.4, 125.0], [13.5, 126.0], [13.6, 127.0], [13.7, 127.0], [13.8, 128.0], [13.9, 128.0], [14.0, 129.0], [14.1, 129.0], [14.2, 130.0], [14.3, 130.0], [14.4, 131.0], [14.5, 131.0], [14.6, 132.0], [14.7, 132.0], [14.8, 133.0], [14.9, 134.0], [15.0, 134.0], [15.1, 134.0], [15.2, 135.0], [15.3, 136.0], [15.4, 136.0], [15.5, 137.0], [15.6, 137.0], [15.7, 138.0], [15.8, 139.0], [15.9, 139.0], [16.0, 140.0], [16.1, 140.0], [16.2, 141.0], [16.3, 142.0], [16.4, 143.0], [16.5, 143.0], [16.6, 144.0], [16.7, 144.0], [16.8, 145.0], [16.9, 145.0], [17.0, 146.0], [17.1, 147.0], [17.2, 147.0], [17.3, 148.0], [17.4, 148.0], [17.5, 149.0], [17.6, 150.0], [17.7, 150.0], [17.8, 151.0], [17.9, 152.0], [18.0, 152.0], [18.1, 153.0], [18.2, 153.0], [18.3, 154.0], [18.4, 155.0], [18.5, 155.0], [18.6, 157.0], [18.7, 157.0], [18.8, 158.0], [18.9, 159.0], [19.0, 159.0], [19.1, 160.0], [19.2, 161.0], [19.3, 162.0], [19.4, 162.0], [19.5, 163.0], [19.6, 164.0], [19.7, 164.0], [19.8, 165.0], [19.9, 166.0], [20.0, 166.0], [20.1, 167.0], [20.2, 168.0], [20.3, 169.0], [20.4, 170.0], [20.5, 171.0], [20.6, 172.0], [20.7, 173.0], [20.8, 174.0], [20.9, 175.0], [21.0, 176.0], [21.1, 177.0], [21.2, 178.0], [21.3, 180.0], [21.4, 181.0], [21.5, 182.0], [21.6, 183.0], [21.7, 184.0], [21.8, 184.0], [21.9, 185.0], [22.0, 186.0], [22.1, 187.0], [22.2, 188.0], [22.3, 189.0], [22.4, 190.0], [22.5, 191.0], [22.6, 192.0], [22.7, 193.0], [22.8, 194.0], [22.9, 195.0], [23.0, 196.0], [23.1, 197.0], [23.2, 198.0], [23.3, 200.0], [23.4, 200.0], [23.5, 202.0], [23.6, 203.0], [23.7, 205.0], [23.8, 207.0], [23.9, 209.0], [24.0, 210.0], [24.1, 211.0], [24.2, 212.0], [24.3, 214.0], [24.4, 215.0], [24.5, 217.0], [24.6, 219.0], [24.7, 220.0], [24.8, 222.0], [24.9, 223.0], [25.0, 225.0], [25.1, 226.0], [25.2, 228.0], [25.3, 230.0], [25.4, 231.0], [25.5, 234.0], [25.6, 236.0], [25.7, 238.0], [25.8, 240.0], [25.9, 242.0], [26.0, 244.0], [26.1, 245.0], [26.2, 247.0], [26.3, 249.0], [26.4, 251.0], [26.5, 253.0], [26.6, 255.0], [26.7, 256.0], [26.8, 258.0], [26.9, 260.0], [27.0, 262.0], [27.1, 264.0], [27.2, 267.0], [27.3, 271.0], [27.4, 273.0], [27.5, 276.0], [27.6, 278.0], [27.7, 281.0], [27.8, 283.0], [27.9, 285.0], [28.0, 287.0], [28.1, 290.0], [28.2, 292.0], [28.3, 296.0], [28.4, 298.0], [28.5, 301.0], [28.6, 304.0], [28.7, 307.0], [28.8, 312.0], [28.9, 314.0], [29.0, 318.0], [29.1, 322.0], [29.2, 326.0], [29.3, 329.0], [29.4, 332.0], [29.5, 335.0], [29.6, 338.0], [29.7, 342.0], [29.8, 346.0], [29.9, 352.0], [30.0, 355.0], [30.1, 362.0], [30.2, 366.0], [30.3, 370.0], [30.4, 375.0], [30.5, 380.0], [30.6, 389.0], [30.7, 396.0], [30.8, 402.0], [30.9, 410.0], [31.0, 418.0], [31.1, 428.0], [31.2, 440.0], [31.3, 450.0], [31.4, 464.0], [31.5, 475.0], [31.6, 483.0], [31.7, 499.0], [31.8, 520.0], [31.9, 535.0], [32.0, 559.0], [32.1, 576.0], [32.2, 604.0], [32.3, 631.0], [32.4, 650.0], [32.5, 672.0], [32.6, 695.0], [32.7, 725.0], [32.8, 769.0], [32.9, 799.0], [33.0, 831.0], [33.1, 857.0], [33.2, 884.0], [33.3, 925.0], [33.4, 954.0], [33.5, 986.0], [33.6, 1014.0], [33.7, 1031.0], [33.8, 1053.0], [33.9, 1091.0], [34.0, 1120.0], [34.1, 1132.0], [34.2, 1144.0], [34.3, 1155.0], [34.4, 1166.0], [34.5, 1180.0], [34.6, 1188.0], [34.7, 1198.0], [34.8, 1218.0], [34.9, 1235.0], [35.0, 1241.0], [35.1, 1249.0], [35.2, 1256.0], [35.3, 1263.0], [35.4, 1282.0], [35.5, 1301.0], [35.6, 1311.0], [35.7, 1327.0], [35.8, 1338.0], [35.9, 1348.0], [36.0, 1366.0], [36.1, 1381.0], [36.2, 1402.0], [36.3, 1422.0], [36.4, 1436.0], [36.5, 1454.0], [36.6, 1468.0], [36.7, 1490.0], [36.8, 1521.0], [36.9, 1541.0], [37.0, 1565.0], [37.1, 1600.0], [37.2, 1622.0], [37.3, 1637.0], [37.4, 1658.0], [37.5, 1682.0], [37.6, 1700.0], [37.7, 1718.0], [37.8, 1734.0], [37.9, 1749.0], [38.0, 1769.0], [38.1, 1792.0], [38.2, 1807.0], [38.3, 1817.0], [38.4, 1833.0], [38.5, 1844.0], [38.6, 1852.0], [38.7, 1861.0], [38.8, 1869.0], [38.9, 1873.0], [39.0, 1880.0], [39.1, 1888.0], [39.2, 1895.0], [39.3, 1898.0], [39.4, 1902.0], [39.5, 1906.0], [39.6, 1909.0], [39.7, 1913.0], [39.8, 1919.0], [39.9, 1923.0], [40.0, 1928.0], [40.1, 1931.0], [40.2, 1936.0], [40.3, 1943.0], [40.4, 1949.0], [40.5, 1955.0], [40.6, 1959.0], [40.7, 1965.0], [40.8, 1971.0], [40.9, 1976.0], [41.0, 1987.0], [41.1, 1992.0], [41.2, 2000.0], [41.3, 2014.0], [41.4, 2027.0], [41.5, 2038.0], [41.6, 2056.0], [41.7, 2067.0], [41.8, 2082.0], [41.9, 2094.0], [42.0, 2106.0], [42.1, 2119.0], [42.2, 2135.0], [42.3, 2150.0], [42.4, 2161.0], [42.5, 2176.0], [42.6, 2188.0], [42.7, 2201.0], [42.8, 2211.0], [42.9, 2222.0], [43.0, 2229.0], [43.1, 2236.0], [43.2, 2241.0], [43.3, 2253.0], [43.4, 2261.0], [43.5, 2279.0], [43.6, 2294.0], [43.7, 2303.0], [43.8, 2314.0], [43.9, 2325.0], [44.0, 2333.0], [44.1, 2345.0], [44.2, 2355.0], [44.3, 2360.0], [44.4, 2368.0], [44.5, 2376.0], [44.6, 2385.0], [44.7, 2395.0], [44.8, 2408.0], [44.9, 2415.0], [45.0, 2422.0], [45.1, 2428.0], [45.2, 2439.0], [45.3, 2448.0], [45.4, 2459.0], [45.5, 2475.0], [45.6, 2486.0], [45.7, 2498.0], [45.8, 2512.0], [45.9, 2523.0], [46.0, 2536.0], [46.1, 2544.0], [46.2, 2553.0], [46.3, 2563.0], [46.4, 2575.0], [46.5, 2587.0], [46.6, 2603.0], [46.7, 2617.0], [46.8, 2625.0], [46.9, 2637.0], [47.0, 2645.0], [47.1, 2652.0], [47.2, 2659.0], [47.3, 2669.0], [47.4, 2676.0], [47.5, 2691.0], [47.6, 2698.0], [47.7, 2704.0], [47.8, 2710.0], [47.9, 2718.0], [48.0, 2734.0], [48.1, 2744.0], [48.2, 2754.0], [48.3, 2767.0], [48.4, 2780.0], [48.5, 2794.0], [48.6, 2807.0], [48.7, 2821.0], [48.8, 2838.0], [48.9, 2856.0], [49.0, 2868.0], [49.1, 2879.0], [49.2, 2887.0], [49.3, 2897.0], [49.4, 2907.0], [49.5, 2920.0], [49.6, 2929.0], [49.7, 2937.0], [49.8, 2950.0], [49.9, 2954.0], [50.0, 2964.0], [50.1, 2973.0], [50.2, 2984.0], [50.3, 2993.0], [50.4, 3002.0], [50.5, 3012.0], [50.6, 3017.0], [50.7, 3028.0], [50.8, 3041.0], [50.9, 3052.0], [51.0, 3064.0], [51.1, 3080.0], [51.2, 3098.0], [51.3, 3111.0], [51.4, 3123.0], [51.5, 3135.0], [51.6, 3146.0], [51.7, 3156.0], [51.8, 3166.0], [51.9, 3174.0], [52.0, 3187.0], [52.1, 3195.0], [52.2, 3200.0], [52.3, 3220.0], [52.4, 3236.0], [52.5, 3250.0], [52.6, 3261.0], [52.7, 3274.0], [52.8, 3286.0], [52.9, 3302.0], [53.0, 3317.0], [53.1, 3330.0], [53.2, 3341.0], [53.3, 3350.0], [53.4, 3357.0], [53.5, 3364.0], [53.6, 3371.0], [53.7, 3379.0], [53.8, 3389.0], [53.9, 3400.0], [54.0, 3407.0], [54.1, 3415.0], [54.2, 3426.0], [54.3, 3435.0], [54.4, 3450.0], [54.5, 3459.0], [54.6, 3468.0], [54.7, 3477.0], [54.8, 3492.0], [54.9, 3503.0], [55.0, 3515.0], [55.1, 3522.0], [55.2, 3535.0], [55.3, 3546.0], [55.4, 3552.0], [55.5, 3567.0], [55.6, 3575.0], [55.7, 3588.0], [55.8, 3605.0], [55.9, 3616.0], [56.0, 3629.0], [56.1, 3640.0], [56.2, 3649.0], [56.3, 3668.0], [56.4, 3682.0], [56.5, 3693.0], [56.6, 3701.0], [56.7, 3713.0], [56.8, 3730.0], [56.9, 3739.0], [57.0, 3750.0], [57.1, 3764.0], [57.2, 3777.0], [57.3, 3785.0], [57.4, 3797.0], [57.5, 3807.0], [57.6, 3819.0], [57.7, 3830.0], [57.8, 3838.0], [57.9, 3850.0], [58.0, 3872.0], [58.1, 3890.0], [58.2, 3900.0], [58.3, 3914.0], [58.4, 3926.0], [58.5, 3941.0], [58.6, 3954.0], [58.7, 3967.0], [58.8, 3980.0], [58.9, 3997.0], [59.0, 4017.0], [59.1, 4035.0], [59.2, 4051.0], [59.3, 4064.0], [59.4, 4080.0], [59.5, 4094.0], [59.6, 4107.0], [59.7, 4125.0], [59.8, 4139.0], [59.9, 4159.0], [60.0, 4177.0], [60.1, 4189.0], [60.2, 4204.0], [60.3, 4227.0], [60.4, 4247.0], [60.5, 4267.0], [60.6, 4289.0], [60.7, 4303.0], [60.8, 4330.0], [60.9, 4349.0], [61.0, 4374.0], [61.1, 4388.0], [61.2, 4402.0], [61.3, 4417.0], [61.4, 4446.0], [61.5, 4459.0], [61.6, 4475.0], [61.7, 4490.0], [61.8, 4506.0], [61.9, 4523.0], [62.0, 4540.0], [62.1, 4557.0], [62.2, 4573.0], [62.3, 4588.0], [62.4, 4604.0], [62.5, 4619.0], [62.6, 4628.0], [62.7, 4646.0], [62.8, 4653.0], [62.9, 4663.0], [63.0, 4678.0], [63.1, 4687.0], [63.2, 4693.0], [63.3, 4706.0], [63.4, 4733.0], [63.5, 4750.0], [63.6, 4765.0], [63.7, 4776.0], [63.8, 4790.0], [63.9, 4803.0], [64.0, 4812.0], [64.1, 4828.0], [64.2, 4848.0], [64.3, 4862.0], [64.4, 4876.0], [64.5, 4888.0], [64.6, 4899.0], [64.7, 4911.0], [64.8, 4925.0], [64.9, 4950.0], [65.0, 4969.0], [65.1, 4978.0], [65.2, 4996.0], [65.3, 5012.0], [65.4, 5027.0], [65.5, 5044.0], [65.6, 5070.0], [65.7, 5081.0], [65.8, 5097.0], [65.9, 5121.0], [66.0, 5145.0], [66.1, 5160.0], [66.2, 5178.0], [66.3, 5205.0], [66.4, 5221.0], [66.5, 5244.0], [66.6, 5269.0], [66.7, 5290.0], [66.8, 5305.0], [66.9, 5322.0], [67.0, 5347.0], [67.1, 5368.0], [67.2, 5386.0], [67.3, 5410.0], [67.4, 5436.0], [67.5, 5460.0], [67.6, 5478.0], [67.7, 5506.0], [67.8, 5523.0], [67.9, 5545.0], [68.0, 5565.0], [68.1, 5583.0], [68.2, 5607.0], [68.3, 5624.0], [68.4, 5642.0], [68.5, 5661.0], [68.6, 5672.0], [68.7, 5687.0], [68.8, 5711.0], [68.9, 5723.0], [69.0, 5744.0], [69.1, 5764.0], [69.2, 5778.0], [69.3, 5793.0], [69.4, 5812.0], [69.5, 5825.0], [69.6, 5842.0], [69.7, 5862.0], [69.8, 5879.0], [69.9, 5889.0], [70.0, 5906.0], [70.1, 5924.0], [70.2, 5939.0], [70.3, 5948.0], [70.4, 5962.0], [70.5, 5970.0], [70.6, 5984.0], [70.7, 5992.0], [70.8, 6008.0], [70.9, 6018.0], [71.0, 6029.0], [71.1, 6040.0], [71.2, 6058.0], [71.3, 6077.0], [71.4, 6095.0], [71.5, 6111.0], [71.6, 6132.0], [71.7, 6143.0], [71.8, 6155.0], [71.9, 6164.0], [72.0, 6179.0], [72.1, 6189.0], [72.2, 6199.0], [72.3, 6213.0], [72.4, 6230.0], [72.5, 6246.0], [72.6, 6267.0], [72.7, 6279.0], [72.8, 6295.0], [72.9, 6313.0], [73.0, 6330.0], [73.1, 6341.0], [73.2, 6358.0], [73.3, 6373.0], [73.4, 6388.0], [73.5, 6400.0], [73.6, 6423.0], [73.7, 6439.0], [73.8, 6457.0], [73.9, 6466.0], [74.0, 6481.0], [74.1, 6503.0], [74.2, 6514.0], [74.3, 6538.0], [74.4, 6553.0], [74.5, 6569.0], [74.6, 6580.0], [74.7, 6591.0], [74.8, 6614.0], [74.9, 6633.0], [75.0, 6662.0], [75.1, 6675.0], [75.2, 6690.0], [75.3, 6704.0], [75.4, 6718.0], [75.5, 6730.0], [75.6, 6738.0], [75.7, 6762.0], [75.8, 6785.0], [75.9, 6824.0], [76.0, 6841.0], [76.1, 6859.0], [76.2, 6882.0], [76.3, 6899.0], [76.4, 6921.0], [76.5, 6948.0], [76.6, 6961.0], [76.7, 6976.0], [76.8, 6991.0], [76.9, 7013.0], [77.0, 7034.0], [77.1, 7044.0], [77.2, 7057.0], [77.3, 7078.0], [77.4, 7101.0], [77.5, 7120.0], [77.6, 7130.0], [77.7, 7160.0], [77.8, 7175.0], [77.9, 7197.0], [78.0, 7219.0], [78.1, 7237.0], [78.2, 7267.0], [78.3, 7304.0], [78.4, 7327.0], [78.5, 7353.0], [78.6, 7375.0], [78.7, 7394.0], [78.8, 7426.0], [78.9, 7447.0], [79.0, 7467.0], [79.1, 7485.0], [79.2, 7506.0], [79.3, 7523.0], [79.4, 7559.0], [79.5, 7592.0], [79.6, 7601.0], [79.7, 7629.0], [79.8, 7663.0], [79.9, 7686.0], [80.0, 7717.0], [80.1, 7740.0], [80.2, 7757.0], [80.3, 7784.0], [80.4, 7810.0], [80.5, 7837.0], [80.6, 7881.0], [80.7, 7919.0], [80.8, 7966.0], [80.9, 8005.0], [81.0, 8039.0], [81.1, 8079.0], [81.2, 8127.0], [81.3, 8172.0], [81.4, 8196.0], [81.5, 8247.0], [81.6, 8281.0], [81.7, 8308.0], [81.8, 8347.0], [81.9, 8387.0], [82.0, 8414.0], [82.1, 8447.0], [82.2, 8486.0], [82.3, 8523.0], [82.4, 8576.0], [82.5, 8612.0], [82.6, 8653.0], [82.7, 8692.0], [82.8, 8718.0], [82.9, 8755.0], [83.0, 8790.0], [83.1, 8826.0], [83.2, 8864.0], [83.3, 8888.0], [83.4, 8913.0], [83.5, 8961.0], [83.6, 8995.0], [83.7, 9047.0], [83.8, 9115.0], [83.9, 9173.0], [84.0, 9213.0], [84.1, 9279.0], [84.2, 9320.0], [84.3, 9378.0], [84.4, 9428.0], [84.5, 9479.0], [84.6, 9522.0], [84.7, 9563.0], [84.8, 9597.0], [84.9, 9624.0], [85.0, 9670.0], [85.1, 9720.0], [85.2, 9777.0], [85.3, 9806.0], [85.4, 9828.0], [85.5, 9847.0], [85.6, 9856.0], [85.7, 9883.0], [85.8, 9932.0], [85.9, 9977.0], [86.0, 10017.0], [86.1, 10083.0], [86.2, 10168.0], [86.3, 10273.0], [86.4, 10328.0], [86.5, 10399.0], [86.6, 10445.0], [86.7, 10500.0], [86.8, 10620.0], [86.9, 10734.0], [87.0, 10833.0], [87.1, 10928.0], [87.2, 11009.0], [87.3, 11111.0], [87.4, 11229.0], [87.5, 11302.0], [87.6, 11398.0], [87.7, 11479.0], [87.8, 11579.0], [87.9, 11655.0], [88.0, 11780.0], [88.1, 11938.0], [88.2, 12068.0], [88.3, 12146.0], [88.4, 12250.0], [88.5, 12355.0], [88.6, 12437.0], [88.7, 12597.0], [88.8, 12737.0], [88.9, 12837.0], [89.0, 13000.0], [89.1, 13124.0], [89.2, 13206.0], [89.3, 13329.0], [89.4, 13479.0], [89.5, 13620.0], [89.6, 13837.0], [89.7, 14018.0], [89.8, 14127.0], [89.9, 14235.0], [90.0, 14351.0], [90.1, 14481.0], [90.2, 14624.0], [90.3, 14741.0], [90.4, 14930.0], [90.5, 15228.0], [90.6, 15400.0], [90.7, 15583.0], [90.8, 15777.0], [90.9, 15900.0], [91.0, 16045.0], [91.1, 16168.0], [91.2, 16352.0], [91.3, 16548.0], [91.4, 16833.0], [91.5, 16989.0], [91.6, 17121.0], [91.7, 17214.0], [91.8, 17370.0], [91.9, 17578.0], [92.0, 17776.0], [92.1, 18014.0], [92.2, 18217.0], [92.3, 18433.0], [92.4, 18722.0], [92.5, 19052.0], [92.6, 19217.0], [92.7, 19357.0], [92.8, 19666.0], [92.9, 19873.0], [93.0, 20109.0], [93.1, 20373.0], [93.2, 20548.0], [93.3, 20827.0], [93.4, 21164.0], [93.5, 21430.0], [93.6, 21642.0], [93.7, 21893.0], [93.8, 22177.0], [93.9, 22341.0], [94.0, 22510.0], [94.1, 22710.0], [94.2, 22949.0], [94.3, 23271.0], [94.4, 23574.0], [94.5, 23793.0], [94.6, 24105.0], [94.7, 24362.0], [94.8, 24755.0], [94.9, 24912.0], [95.0, 25231.0], [95.1, 25429.0], [95.2, 25571.0], [95.3, 25869.0], [95.4, 26042.0], [95.5, 26231.0], [95.6, 26450.0], [95.7, 26694.0], [95.8, 26891.0], [95.9, 27141.0], [96.0, 27288.0], [96.1, 27524.0], [96.2, 27741.0], [96.3, 28029.0], [96.4, 28172.0], [96.5, 28448.0], [96.6, 28787.0], [96.7, 29150.0], [96.8, 29426.0], [96.9, 29582.0], [97.0, 29808.0], [97.1, 30060.0], [97.2, 30329.0], [97.3, 30797.0], [97.4, 31000.0], [97.5, 31196.0], [97.6, 31352.0], [97.7, 31530.0], [97.8, 31886.0], [97.9, 32150.0], [98.0, 32522.0], [98.1, 32838.0], [98.2, 33160.0], [98.3, 33715.0], [98.4, 34003.0], [98.5, 34424.0], [98.6, 34712.0], [98.7, 35182.0], [98.8, 35757.0], [98.9, 36069.0], [99.0, 36550.0], [99.1, 36921.0], [99.2, 37505.0], [99.3, 37913.0], [99.4, 38521.0], [99.5, 39207.0], [99.6, 39725.0], [99.7, 40712.0], [99.8, 42667.0], [99.9, 45218.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 2153.0, "series": [{"data": [[0.0, 1202.0], [100.0, 2153.0], [33700.0, 4.0], [32900.0, 3.0], [34500.0, 5.0], [36100.0, 5.0], [35300.0, 2.0], [36900.0, 4.0], [38500.0, 5.0], [37700.0, 4.0], [39300.0, 5.0], [42500.0, 1.0], [43300.0, 2.0], [44100.0, 1.0], [45700.0, 1.0], [48100.0, 1.0], [50500.0, 1.0], [200.0, 738.0], [300.0, 336.0], [400.0, 136.0], [500.0, 71.0], [600.0, 61.0], [700.0, 41.0], [800.0, 45.0], [900.0, 50.0], [1000.0, 54.0], [1100.0, 113.0], [1200.0, 111.0], [1300.0, 100.0], [1400.0, 76.0], [1500.0, 54.0], [1600.0, 72.0], [1700.0, 81.0], [1800.0, 168.0], [1900.0, 270.0], [2000.0, 105.0], [2100.0, 111.0], [2200.0, 136.0], [2300.0, 158.0], [2400.0, 142.0], [2500.0, 124.0], [2600.0, 150.0], [2700.0, 129.0], [2800.0, 116.0], [2900.0, 151.0], [3000.0, 120.0], [3100.0, 141.0], [3200.0, 101.0], [3300.0, 144.0], [3400.0, 143.0], [3500.0, 129.0], [3600.0, 112.0], [3700.0, 125.0], [3800.0, 111.0], [3900.0, 103.0], [4000.0, 91.0], [4200.0, 73.0], [4300.0, 73.0], [4100.0, 89.0], [4500.0, 94.0], [4600.0, 127.0], [4400.0, 80.0], [4800.0, 108.0], [4700.0, 86.0], [4900.0, 89.0], [5000.0, 83.0], [5100.0, 66.0], [5200.0, 73.0], [5300.0, 67.0], [5400.0, 63.0], [5500.0, 68.0], [5600.0, 88.0], [5700.0, 85.0], [5800.0, 86.0], [5900.0, 120.0], [6000.0, 92.0], [6100.0, 113.0], [6200.0, 89.0], [6300.0, 98.0], [6400.0, 84.0], [6500.0, 94.0], [6600.0, 74.0], [6700.0, 83.0], [6800.0, 69.0], [6900.0, 77.0], [7000.0, 78.0], [7100.0, 77.0], [7200.0, 54.0], [7300.0, 61.0], [7400.0, 65.0], [7500.0, 61.0], [7600.0, 53.0], [7700.0, 60.0], [7800.0, 39.0], [7900.0, 35.0], [8000.0, 39.0], [8100.0, 37.0], [8400.0, 39.0], [8200.0, 36.0], [8600.0, 41.0], [9000.0, 26.0], [8800.0, 47.0], [9200.0, 21.0], [9400.0, 29.0], [9600.0, 33.0], [9800.0, 70.0], [10200.0, 17.0], [10000.0, 24.0], [10400.0, 27.0], [10600.0, 16.0], [10800.0, 14.0], [11000.0, 17.0], [11200.0, 15.0], [11600.0, 11.0], [11400.0, 17.0], [12000.0, 12.0], [12200.0, 11.0], [11800.0, 6.0], [12600.0, 10.0], [12400.0, 11.0], [12800.0, 12.0], [13000.0, 9.0], [13200.0, 14.0], [13400.0, 13.0], [13600.0, 8.0], [13800.0, 9.0], [14000.0, 15.0], [14200.0, 17.0], [14800.0, 7.0], [14600.0, 12.0], [14400.0, 13.0], [15000.0, 2.0], [15200.0, 6.0], [15400.0, 9.0], [15800.0, 11.0], [15600.0, 6.0], [16200.0, 10.0], [16000.0, 13.0], [17200.0, 11.0], [16400.0, 4.0], [16800.0, 5.0], [17600.0, 9.0], [18400.0, 3.0], [18000.0, 2.0], [19200.0, 10.0], [18800.0, 3.0], [20400.0, 7.0], [20000.0, 8.0], [19600.0, 3.0], [21200.0, 5.0], [20800.0, 7.0], [21600.0, 6.0], [22400.0, 10.0], [22800.0, 2.0], [23200.0, 5.0], [24400.0, 6.0], [23600.0, 9.0], [24000.0, 1.0], [25200.0, 10.0], [24800.0, 6.0], [25600.0, 4.0], [26000.0, 6.0], [26400.0, 5.0], [27200.0, 8.0], [26800.0, 13.0], [27600.0, 10.0], [28400.0, 4.0], [28000.0, 7.0], [29200.0, 5.0], [29600.0, 7.0], [28800.0, 4.0], [30000.0, 10.0], [30400.0, 4.0], [31200.0, 8.0], [31600.0, 3.0], [30800.0, 6.0], [32000.0, 6.0], [32400.0, 3.0], [34400.0, 7.0], [33600.0, 3.0], [32800.0, 3.0], [36000.0, 3.0], [36800.0, 4.0], [35200.0, 2.0], [37600.0, 5.0], [38400.0, 4.0], [39200.0, 4.0], [40000.0, 2.0], [40800.0, 3.0], [41600.0, 1.0], [42400.0, 1.0], [43200.0, 2.0], [50400.0, 1.0], [33900.0, 6.0], [33100.0, 6.0], [34700.0, 5.0], [35500.0, 5.0], [36300.0, 1.0], [38700.0, 1.0], [37900.0, 4.0], [37100.0, 1.0], [39500.0, 3.0], [41100.0, 1.0], [41900.0, 1.0], [43500.0, 1.0], [44300.0, 1.0], [45900.0, 2.0], [17300.0, 8.0], [16500.0, 8.0], [16900.0, 13.0], [17700.0, 9.0], [18100.0, 10.0], [18500.0, 5.0], [19300.0, 8.0], [18900.0, 7.0], [20100.0, 5.0], [19700.0, 6.0], [20500.0, 7.0], [21300.0, 6.0], [20900.0, 4.0], [21700.0, 5.0], [22100.0, 12.0], [22500.0, 6.0], [23300.0, 6.0], [22900.0, 2.0], [24100.0, 10.0], [23700.0, 6.0], [24500.0, 1.0], [25300.0, 4.0], [24900.0, 9.0], [25700.0, 6.0], [26100.0, 9.0], [26500.0, 5.0], [26900.0, 7.0], [27300.0, 5.0], [28100.0, 10.0], [28500.0, 4.0], [27700.0, 5.0], [29300.0, 5.0], [28900.0, 1.0], [30100.0, 3.0], [30500.0, 3.0], [29700.0, 3.0], [31700.0, 5.0], [31300.0, 7.0], [30900.0, 7.0], [32500.0, 3.0], [32100.0, 5.0], [33000.0, 6.0], [33800.0, 5.0], [34600.0, 3.0], [35400.0, 3.0], [36200.0, 2.0], [38600.0, 2.0], [37000.0, 2.0], [37800.0, 3.0], [39400.0, 2.0], [40200.0, 1.0], [42600.0, 2.0], [41000.0, 1.0], [45000.0, 1.0], [43400.0, 1.0], [34100.0, 4.0], [33300.0, 1.0], [34900.0, 5.0], [36500.0, 6.0], [35700.0, 3.0], [38900.0, 4.0], [37300.0, 3.0], [38100.0, 2.0], [39700.0, 2.0], [40500.0, 2.0], [41300.0, 1.0], [45300.0, 1.0], [8700.0, 40.0], [8500.0, 35.0], [8300.0, 41.0], [8900.0, 37.0], [9100.0, 29.0], [9500.0, 39.0], [9700.0, 29.0], [9300.0, 29.0], [9900.0, 32.0], [10100.0, 16.0], [10300.0, 23.0], [10500.0, 12.0], [10700.0, 11.0], [11100.0, 14.0], [10900.0, 16.0], [11500.0, 16.0], [11700.0, 18.0], [11300.0, 16.0], [11900.0, 10.0], [12100.0, 20.0], [12300.0, 15.0], [12700.0, 12.0], [12500.0, 11.0], [13100.0, 18.0], [13300.0, 7.0], [12900.0, 9.0], [13500.0, 7.0], [13700.0, 8.0], [13900.0, 6.0], [14300.0, 8.0], [14100.0, 8.0], [14500.0, 9.0], [14700.0, 11.0], [15300.0, 10.0], [14900.0, 6.0], [15100.0, 7.0], [15700.0, 8.0], [15500.0, 9.0], [16300.0, 9.0], [15900.0, 11.0], [16100.0, 8.0], [17000.0, 11.0], [16600.0, 4.0], [17400.0, 7.0], [18200.0, 7.0], [17800.0, 7.0], [19000.0, 5.0], [18600.0, 6.0], [19400.0, 8.0], [20200.0, 3.0], [19800.0, 7.0], [20600.0, 8.0], [21000.0, 2.0], [21400.0, 6.0], [21800.0, 6.0], [22200.0, 6.0], [23000.0, 5.0], [23400.0, 3.0], [22600.0, 8.0], [24200.0, 2.0], [23800.0, 3.0], [24600.0, 5.0], [25400.0, 10.0], [25000.0, 3.0], [25800.0, 5.0], [26200.0, 4.0], [26600.0, 8.0], [27400.0, 7.0], [27000.0, 3.0], [27800.0, 6.0], [28200.0, 8.0], [28600.0, 4.0], [29400.0, 10.0], [29000.0, 4.0], [29800.0, 5.0], [30200.0, 4.0], [30600.0, 3.0], [31000.0, 7.0], [31400.0, 8.0], [31800.0, 3.0], [32600.0, 4.0], [32200.0, 4.0], [34800.0, 2.0], [33200.0, 1.0], [34000.0, 3.0], [35600.0, 2.0], [36400.0, 3.0], [37200.0, 4.0], [38000.0, 1.0], [40400.0, 2.0], [42800.0, 1.0], [46000.0, 1.0], [45200.0, 2.0], [33500.0, 3.0], [34300.0, 4.0], [35900.0, 3.0], [36700.0, 2.0], [35100.0, 1.0], [38300.0, 4.0], [37500.0, 2.0], [39100.0, 2.0], [39900.0, 2.0], [40700.0, 3.0], [41500.0, 1.0], [43100.0, 1.0], [43900.0, 1.0], [49500.0, 1.0], [52700.0, 1.0], [59900.0, 1.0], [68600.0, 1.0], [17100.0, 14.0], [16700.0, 4.0], [17500.0, 5.0], [18300.0, 10.0], [17900.0, 3.0], [18700.0, 4.0], [19100.0, 9.0], [19900.0, 6.0], [20300.0, 8.0], [19500.0, 3.0], [21500.0, 7.0], [20700.0, 4.0], [21100.0, 6.0], [21900.0, 5.0], [22300.0, 8.0], [22700.0, 12.0], [23100.0, 7.0], [23500.0, 3.0], [24300.0, 4.0], [23900.0, 9.0], [24700.0, 7.0], [25500.0, 7.0], [25100.0, 3.0], [26300.0, 8.0], [25900.0, 12.0], [27100.0, 9.0], [27500.0, 4.0], [26700.0, 4.0], [27900.0, 4.0], [28300.0, 2.0], [28700.0, 8.0], [29500.0, 11.0], [29100.0, 4.0], [30300.0, 5.0], [30700.0, 3.0], [29900.0, 5.0], [31100.0, 9.0], [31500.0, 9.0], [31900.0, 4.0], [32700.0, 6.0], [32300.0, 6.0], [34200.0, 3.0], [33400.0, 3.0], [35000.0, 2.0], [36600.0, 4.0], [35800.0, 6.0], [37400.0, 1.0], [40600.0, 1.0], [39000.0, 1.0], [41400.0, 3.0], [45400.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 68600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 722.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 9113.0, "series": [{"data": [[0.0, 4565.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 722.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 9113.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 52.923547400611604, "minX": 1.6869123E12, "maxY": 600.0, "series": [{"data": [[1.68691236E12, 587.788784281622], [1.68691248E12, 52.923547400611604], [1.6869123E12, 600.0], [1.68691242E12, 367.3063115228709]], "isOverall": false, "label": "RestApi", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68691248E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 44.0, "minX": 1.0, "maxY": 24595.0, "series": [{"data": [[2.0, 677.0], [3.0, 635.6666666666667], [4.0, 60.0], [5.0, 52.0], [6.0, 1603.6], [7.0, 44.0], [8.0, 890.0], [9.0, 3875.5], [10.0, 2058.0], [11.0, 117.0], [12.0, 2756.0], [13.0, 2353.0], [14.0, 64.66666666666667], [16.0, 3999.1818181818176], [17.0, 337.0], [18.0, 6592.125000000001], [19.0, 112.0], [20.0, 3271.0], [21.0, 44.0], [22.0, 3111.0], [23.0, 50.0], [24.0, 2991.0], [25.0, 1774.0], [26.0, 91.0], [27.0, 122.0], [28.0, 60.0], [29.0, 3176.0], [30.0, 7163.5], [31.0, 47.0], [33.0, 100.0], [32.0, 4714.666666666666], [35.0, 8966.285714285716], [34.0, 89.0], [37.0, 8426.75], [36.0, 52.0], [39.0, 269.6666666666667], [38.0, 4490.75], [41.0, 6442.0], [40.0, 60.5], [43.0, 4097.0], [42.0, 969.2], [44.0, 141.0], [47.0, 8149.5], [46.0, 4743.666666666666], [49.0, 2214.0], [48.0, 214.0], [51.0, 7714.4285714285725], [50.0, 75.5], [53.0, 1935.4999999999998], [52.0, 4923.8], [55.0, 103.0], [54.0, 3267.7999999999997], [57.0, 11175.0], [56.0, 71.0], [59.0, 5341.625], [58.0, 110.0], [61.0, 101.0], [60.0, 99.0], [63.0, 8649.916666666666], [62.0, 7542.666666666667], [66.0, 6929.0], [65.0, 69.0], [64.0, 139.0], [70.0, 5552.0], [69.0, 397.0], [68.0, 83.0], [75.0, 14584.0], [74.0, 1287.142857142857], [72.0, 9981.75], [79.0, 1728.1666666666665], [78.0, 10184.0], [77.0, 58.0], [76.0, 71.0], [83.0, 60.0], [82.0, 8443.875], [81.0, 603.0], [80.0, 121.0], [87.0, 104.0], [85.0, 1754.4999999999998], [84.0, 11004.0], [91.0, 4942.454545454545], [90.0, 11727.666666666668], [89.0, 4435.0], [88.0, 15524.142857142855], [95.0, 11065.333333333332], [94.0, 3581.9], [93.0, 110.5], [92.0, 8106.499999999999], [99.0, 626.5], [98.0, 86.66666666666667], [96.0, 3662.6], [102.0, 8250.5], [101.0, 5932.2307692307695], [100.0, 3444.0], [107.0, 1381.3999999999999], [104.0, 148.0], [111.0, 8265.333333333332], [110.0, 56.0], [109.0, 7207.083333333333], [108.0, 104.5], [115.0, 8134.499999999999], [114.0, 16714.85714285714], [113.0, 18003.5], [112.0, 11406.0], [119.0, 11990.777777777777], [118.0, 122.0], [117.0, 7377.833333333333], [116.0, 5163.3], [123.0, 3862.2857142857138], [122.0, 642.2], [121.0, 12666.833333333334], [120.0, 130.0], [127.0, 53.0], [126.0, 24595.0], [125.0, 13012.5], [124.0, 801.7142857142858], [135.0, 4928.8], [134.0, 8109.749999999998], [133.0, 110.0], [132.0, 4531.5], [131.0, 8614.666666666666], [130.0, 5188.2], [129.0, 84.0], [128.0, 6370.833333333333], [142.0, 1045.0], [141.0, 1426.7777777777778], [140.0, 96.5], [139.0, 6417.444444444444], [138.0, 154.0], [137.0, 133.66666666666666], [136.0, 163.0], [151.0, 7767.888888888887], [149.0, 160.5], [148.0, 7602.133333333333], [147.0, 242.0], [146.0, 11491.2], [145.0, 113.5], [144.0, 16934.07142857143], [159.0, 67.0], [158.0, 7304.777777777777], [157.0, 7695.714285714285], [156.0, 102.0], [155.0, 9478.285714285716], [154.0, 199.75], [153.0, 8959.81818181818], [152.0, 15331.8], [167.0, 169.0], [166.0, 11875.5], [165.0, 13408.333333333332], [164.0, 60.0], [163.0, 7032.062499999999], [161.0, 4601.0], [160.0, 83.0], [175.0, 270.5], [174.0, 14557.0], [173.0, 1291.1333333333334], [172.0, 87.0], [171.0, 6552.363636363636], [170.0, 106.33333333333333], [169.0, 12707.5], [168.0, 748.8], [183.0, 12540.0], [182.0, 594.0], [181.0, 544.0], [180.0, 790.7500000000001], [178.0, 11551.0], [177.0, 18647.555555555555], [191.0, 5487.4], [190.0, 6899.750000000001], [189.0, 6956.400000000001], [188.0, 10892.777777777777], [187.0, 6937.0], [186.0, 186.5], [185.0, 5102.4], [184.0, 10783.125], [199.0, 1313.6666666666665], [198.0, 16207.8], [197.0, 134.5], [196.0, 17787.428571428572], [195.0, 4612.0], [194.0, 12877.1875], [193.0, 111.5], [207.0, 11004.5], [206.0, 6639.285714285714], [205.0, 193.5], [203.0, 1158.4444444444446], [202.0, 119.0], [201.0, 59.0], [200.0, 480.0], [215.0, 21231.5], [214.0, 96.5], [213.0, 4570.538461538463], [212.0, 5515.857142857143], [211.0, 11746.333333333332], [210.0, 10740.333333333334], [209.0, 5902.666666666666], [208.0, 11677.222222222223], [222.0, 17966.25], [221.0, 138.0], [220.0, 142.33333333333334], [219.0, 3639.5555555555557], [217.0, 5550.555555555555], [216.0, 376.4], [231.0, 4137.75], [230.0, 105.5], [229.0, 4225.4], [228.0, 7820.75], [227.0, 2405.333333333333], [226.0, 9865.0], [225.0, 188.5], [224.0, 5253.458333333333], [239.0, 10592.333333333332], [238.0, 98.5], [237.0, 20381.0], [236.0, 4954.333333333334], [235.0, 10014.0], [234.0, 104.5], [233.0, 13201.25], [232.0, 7538.2], [247.0, 110.5], [245.0, 1585.8749999999998], [244.0, 83.0], [243.0, 10508.166666666666], [242.0, 3534.333333333333], [241.0, 97.0], [240.0, 4471.285714285715], [255.0, 3046.1666666666665], [254.0, 15180.0], [253.0, 9214.555555555555], [252.0, 63.0], [251.0, 8163.090909090909], [250.0, 4100.250000000001], [249.0, 8552.916666666666], [248.0, 75.0], [270.0, 90.0], [271.0, 17415.000000000004], [269.0, 2377.0434782608695], [268.0, 5621.333333333334], [267.0, 3936.0], [266.0, 186.0], [265.0, 68.0], [264.0, 5022.0], [263.0, 97.0], [257.0, 7325.5], [256.0, 107.0], [259.0, 280.0], [258.0, 6698.0], [261.0, 175.0], [260.0, 11658.875000000002], [286.0, 19167.8], [287.0, 7158.500000000001], [285.0, 1085.1666666666667], [284.0, 771.5], [283.0, 13092.399999999998], [282.0, 539.4444444444445], [281.0, 2746.0000000000005], [280.0, 6344.75], [279.0, 1950.25], [273.0, 12689.0], [272.0, 95.0], [275.0, 6979.333333333334], [274.0, 106.0], [278.0, 78.66666666666667], [276.0, 79.0], [302.0, 5576.5], [303.0, 4429.909090909091], [301.0, 503.5], [300.0, 12095.0], [299.0, 108.0], [298.0, 8353.444444444445], [297.0, 118.0], [295.0, 5008.2222222222235], [289.0, 9667.857142857143], [288.0, 6839.625], [291.0, 3225.3529411764707], [290.0, 17836.0], [294.0, 6640.25], [293.0, 8986.375], [292.0, 5871.499999999999], [318.0, 68.0], [319.0, 175.0], [317.0, 9944.6], [316.0, 11630.2], [315.0, 9074.25], [314.0, 292.0], [313.0, 13217.57142857143], [312.0, 10597.416666666666], [311.0, 88.0], [306.0, 9633.666666666668], [304.0, 3850.6060606060614], [310.0, 102.0], [309.0, 18382.0], [308.0, 150.0], [334.0, 3914.2], [335.0, 4411.636363636364], [333.0, 7417.999999999999], [332.0, 7131.285714285715], [331.0, 6481.058823529413], [330.0, 17480.85714285714], [329.0, 2390.0], [328.0, 2070.5], [327.0, 4571.542857142857], [321.0, 113.0], [320.0, 682.0], [323.0, 10544.666666666666], [322.0, 6265.5], [326.0, 19603.0], [325.0, 4216.75], [324.0, 1227.75], [350.0, 13810.0], [351.0, 80.0], [349.0, 5512.016949152544], [348.0, 1530.625], [347.0, 8567.190476190475], [346.0, 102.5], [345.0, 2935.636363636364], [344.0, 9950.2], [343.0, 68.0], [337.0, 9544.0], [336.0, 5824.285714285716], [339.0, 3866.5], [338.0, 2319.0], [342.0, 3156.5], [341.0, 2288.0], [340.0, 5898.666666666666], [366.0, 8748.533333333333], [367.0, 9858.666666666668], [365.0, 3959.2], [364.0, 14265.0], [363.0, 2794.5], [362.0, 6905.833333333333], [361.0, 7987.000000000001], [359.0, 92.5], [352.0, 76.0], [354.0, 4254.5], [353.0, 6791.75], [358.0, 7370.0], [357.0, 4267.0], [356.0, 128.5], [382.0, 9652.300000000001], [383.0, 13797.5], [381.0, 11186.090909090906], [380.0, 6902.0], [379.0, 120.0], [378.0, 15799.5], [377.0, 11096.857142857143], [376.0, 2449.0], [375.0, 8523.142857142859], [369.0, 12745.454545454546], [368.0, 2808.0], [371.0, 7548.714285714286], [370.0, 91.0], [374.0, 68.0], [373.0, 91.0], [372.0, 12885.90909090909], [398.0, 69.0], [399.0, 6111.5], [397.0, 10728.5], [396.0, 14246.666666666666], [395.0, 7613.2], [394.0, 117.0], [393.0, 4209.0], [392.0, 76.0], [391.0, 17775.9], [384.0, 14691.666666666668], [387.0, 111.0], [386.0, 12428.0], [390.0, 13782.777777777777], [389.0, 3210.5714285714284], [388.0, 7480.500000000001], [414.0, 9505.5], [415.0, 115.0], [413.0, 15471.0], [412.0, 9554.8], [411.0, 3060.3], [410.0, 4779.7692307692305], [409.0, 5304.25], [408.0, 6021.727272727272], [407.0, 100.0], [401.0, 12207.75], [400.0, 9874.0], [403.0, 8836.857142857143], [402.0, 6659.374999999999], [406.0, 126.0], [405.0, 6429.916666666667], [404.0, 14374.5], [430.0, 3376.3333333333335], [431.0, 7467.0], [429.0, 6834.733333333334], [428.0, 12107.538461538463], [427.0, 9395.75], [426.0, 8153.272727272728], [425.0, 10436.714285714288], [424.0, 65.0], [423.0, 80.0], [417.0, 6142.609375000001], [416.0, 76.0], [419.0, 9783.72], [418.0, 6951.215384615384], [422.0, 13042.625], [421.0, 7106.125], [420.0, 3155.666666666667], [446.0, 8527.533333333331], [447.0, 4240.666666666666], [445.0, 7189.500000000001], [444.0, 6780.333333333334], [443.0, 9798.2], [442.0, 4588.0], [441.0, 10432.666666666668], [440.0, 13857.933333333332], [439.0, 8981.999999999998], [433.0, 7988.0], [432.0, 11285.999999999998], [435.0, 77.0], [434.0, 13107.666666666668], [438.0, 10171.5], [437.0, 102.5], [436.0, 3373.5], [462.0, 118.66666666666667], [463.0, 7197.6], [461.0, 122.0], [460.0, 6424.947368421053], [459.0, 11500.882352941177], [458.0, 67.0], [457.0, 6609.6], [456.0, 86.5], [455.0, 9287.0], [449.0, 96.66666666666667], [448.0, 108.0], [451.0, 13465.5], [450.0, 12045.2], [454.0, 7658.166666666667], [453.0, 1281.3333333333335], [452.0, 18341.42857142857], [478.0, 8853.057142857144], [479.0, 6946.0], [477.0, 5436.272727272727], [476.0, 3754.9999999999995], [475.0, 4715.346153846152], [474.0, 2513.0], [473.0, 4989.8], [472.0, 1161.5], [471.0, 2871.4166666666665], [465.0, 7756.4], [464.0, 95.0], [467.0, 9683.5625], [466.0, 4472.899999999999], [470.0, 8909.0], [469.0, 2458.4], [468.0, 9964.5], [494.0, 7645.25], [495.0, 4165.000000000001], [493.0, 16820.875], [492.0, 7636.5], [491.0, 7615.000000000001], [490.0, 11158.199999999999], [489.0, 6218.0], [488.0, 4571.777777777777], [487.0, 7405.8125], [481.0, 8304.548387096773], [480.0, 106.0], [483.0, 5781.0], [482.0, 10258.190476190477], [486.0, 8663.142857142857], [484.0, 7453.949999999999], [510.0, 7545.034482758623], [511.0, 8748.09090909091], [509.0, 13894.0], [508.0, 8265.111111111111], [507.0, 12882.555555555558], [506.0, 12457.119999999999], [505.0, 7585.071428571427], [504.0, 87.0], [503.0, 5108.166666666666], [497.0, 73.0], [496.0, 11489.51724137931], [499.0, 4393.0], [498.0, 9450.846153846152], [502.0, 8255.444444444445], [501.0, 6308.5], [500.0, 9018.300000000001], [536.0, 6737.734693877552], [540.0, 10021.934426229507], [543.0, 1491.5], [529.0, 1496.3333333333333], [528.0, 11931.714285714286], [532.0, 11415.523809523811], [531.0, 9014.166666666666], [542.0, 8441.250000000002], [541.0, 5398.0], [539.0, 9727.583333333334], [538.0, 6770.857142857143], [537.0, 11280.956521739132], [527.0, 11476.194444444443], [513.0, 235.0], [512.0, 6069.264150943396], [515.0, 705.5], [514.0, 851.0], [517.0, 6950.661971830987], [516.0, 1746.5], [519.0, 111.0], [518.0, 7513.888000000001], [526.0, 5452.666666666666], [525.0, 9263.380952380952], [524.0, 9842.083333333332], [523.0, 4821.499999999999], [522.0, 11269.75], [521.0, 3805.5], [520.0, 8765.5], [535.0, 8293.642857142859], [533.0, 111.0], [572.0, 8526.773333333333], [575.0, 8958.5593220339], [561.0, 8103.882352941177], [560.0, 7213.333333333333], [563.0, 5200.0], [562.0, 11812.9], [565.0, 14702.750000000002], [564.0, 12264.6], [574.0, 5515.612244897962], [573.0, 197.0], [571.0, 6639.227272727272], [570.0, 125.0], [569.0, 12194.272727272728], [568.0, 6517.666666666666], [559.0, 11690.28571428571], [545.0, 4275.743902439023], [544.0, 4376.359999999999], [547.0, 7567.0], [546.0, 6060.0], [549.0, 6240.777777777777], [548.0, 6785.240000000001], [551.0, 6227.357142857142], [550.0, 7533.2631578947385], [558.0, 126.0], [557.0, 14183.9], [556.0, 6935.6551724137935], [555.0, 7462.000000000001], [554.0, 9894.352941176472], [553.0, 6881.5625], [552.0, 7154.357142857144], [567.0, 2620.090909090909], [566.0, 4360.125], [592.0, 6576.7469135802485], [596.0, 8976.715789473677], [600.0, 4008.1264796706173], [583.0, 6943.775862068967], [582.0, 5744.68], [581.0, 285.0], [580.0, 7215.78787878788], [579.0, 13550.105263157893], [578.0, 8140.249999999999], [577.0, 5858.714285714286], [576.0, 9842.222222222219], [599.0, 8020.476190476192], [598.0, 10890.359999999999], [597.0, 6688.274368231049], [595.0, 12218.014492753626], [594.0, 5471.557692307692], [593.0, 6484.373493975901], [591.0, 2710.863636363636], [590.0, 10086.285714285716], [589.0, 6010.163265306122], [588.0, 6871.947368421054], [587.0, 8074.727272727272], [586.0, 8676.638888888892], [585.0, 10491.847826086956], [584.0, 135.0], [1.0, 1943.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[527.619305555554, 5508.988263888902]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 600.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1091.6666666666667, "minX": 1.6869123E12, "maxY": 2.3853317983333334E7, "series": [{"data": [[1.68691236E12, 2.057963965E7], [1.68691248E12, 3035233.966666667], [1.6869123E12, 8545934.366666667], [1.68691242E12, 2.3853317983333334E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68691236E12, 21150.583333333332], [1.68691248E12, 1091.6666666666667], [1.6869123E12, 26778.566666666666], [1.68691242E12, 13785.1]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68691248E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3431.817547531841, "minX": 1.6869123E12, "maxY": 7489.881586566295, "series": [{"data": [[1.68691236E12, 6607.626893164155], [1.68691248E12, 4586.865443425078], [1.6869123E12, 3431.817547531841], [1.68691242E12, 7489.881586566295]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68691248E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 299.4281345565747, "minX": 1.6869123E12, "maxY": 3183.8438862724565, "series": [{"data": [[1.68691236E12, 2939.3086369218136], [1.68691248E12, 299.4281345565747], [1.6869123E12, 3183.8438862724565], [1.68691242E12, 2229.499710480596]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68691248E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 13.042813455657502, "minX": 1.6869123E12, "maxY": 250.36473050758747, "series": [{"data": [[1.68691236E12, 63.81702824396232], [1.68691248E12, 13.042813455657502], [1.6869123E12, 250.36473050758747], [1.68691242E12, 23.548349739432535]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68691248E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 37.0, "minX": 1.6869123E12, "maxY": 68668.0, "series": [{"data": [[1.68691236E12, 59957.0], [1.68691248E12, 39358.0], [1.6869123E12, 17704.0], [1.68691242E12, 68668.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68691236E12, 55.0], [1.68691248E12, 38.0], [1.6869123E12, 39.0], [1.68691242E12, 37.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68691236E12, 19422.5], [1.68691248E12, 15857.199999999993], [1.6869123E12, 7506.0], [1.68691242E12, 27245.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68691236E12, 35413.11000000001], [1.68691248E12, 37556.59999999999], [1.6869123E12, 10498.98], [1.68691242E12, 40573.049999999996]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68691236E12, 3568.0], [1.68691248E12, 140.0], [1.6869123E12, 2934.0], [1.68691242E12, 2083.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.68691236E12, 26628.949999999975], [1.68691248E12, 26902.79999999997], [1.6869123E12, 9063.800000000001], [1.68691242E12, 33809.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68691248E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 56.0, "minX": 2.0, "maxY": 7744.0, "series": [{"data": [[2.0, 682.0], [6.0, 56.0], [15.0, 1469.0], [19.0, 116.0], [20.0, 2088.5], [25.0, 160.0], [26.0, 278.5], [27.0, 168.0], [30.0, 128.5], [32.0, 6348.0], [35.0, 1183.5], [37.0, 5401.5], [39.0, 5383.0], [41.0, 2546.0], [42.0, 3859.5], [43.0, 3956.0], [45.0, 310.0], [44.0, 440.0], [47.0, 207.0], [46.0, 890.0], [49.0, 4732.0], [48.0, 347.0], [50.0, 2897.5], [51.0, 2614.0], [53.0, 3215.5], [52.0, 186.0], [55.0, 2452.0], [57.0, 248.0], [56.0, 769.0], [58.0, 583.5], [59.0, 150.0], [60.0, 3427.0], [61.0, 4265.0], [62.0, 3264.5], [63.0, 1199.0], [64.0, 1978.0], [66.0, 3731.0], [69.0, 2805.0], [68.0, 1316.5], [70.0, 502.0], [75.0, 2081.5], [73.0, 6695.5], [72.0, 1342.0], [79.0, 3127.0], [76.0, 4993.0], [83.0, 1990.0], [82.0, 509.0], [86.0, 2060.5], [91.0, 3413.0], [88.0, 3196.0], [92.0, 4348.0], [97.0, 3610.0], [98.0, 3194.0], [96.0, 2728.5], [102.0, 5061.0], [106.0, 3607.5], [107.0, 2705.0], [105.0, 2347.0], [115.0, 4061.0], [112.0, 6154.5], [117.0, 4374.0], [118.0, 6151.0], [121.0, 2381.5], [122.0, 5099.5], [124.0, 5985.0], [128.0, 5718.5], [134.0, 6337.5], [131.0, 7744.0], [140.0, 2645.5], [142.0, 3312.0], [138.0, 5484.5], [143.0, 2709.0], [144.0, 2494.0], [146.0, 6918.0], [154.0, 6457.5], [152.0, 6334.0], [158.0, 3201.5], [162.0, 2370.0], [174.0, 3897.0], [168.0, 3218.5], [189.0, 3092.0], [201.0, 2750.0], [206.0, 3548.0], [211.0, 1912.0], [260.0, 2993.0], [261.0, 4626.0], [273.0, 4397.0], [291.0, 3350.0], [296.0, 3496.5], [331.0, 1256.0], [370.0, 2531.5], [378.0, 2319.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 378.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 56.0, "minX": 2.0, "maxY": 7281.0, "series": [{"data": [[2.0, 76.0], [6.0, 56.0], [15.0, 102.0], [19.0, 102.0], [20.0, 1964.5], [25.0, 160.0], [26.0, 270.5], [27.0, 134.0], [30.0, 100.5], [32.0, 2188.0], [35.0, 549.5], [37.0, 2270.5], [39.0, 1312.0], [41.0, 962.0], [42.0, 1744.0], [43.0, 1737.5], [45.0, 170.0], [44.0, 126.5], [47.0, 190.0], [46.0, 291.5], [49.0, 2800.0], [48.0, 160.5], [50.0, 256.5], [51.0, 1965.0], [53.0, 1915.5], [52.0, 135.5], [55.0, 2439.5], [57.0, 179.0], [56.0, 372.5], [58.0, 329.5], [59.0, 137.5], [60.0, 1397.0], [61.0, 1544.0], [62.0, 1746.5], [63.0, 916.0], [64.0, 1586.0], [66.0, 1452.5], [69.0, 1656.0], [68.0, 722.0], [70.0, 158.0], [75.0, 2056.0], [73.0, 2564.0], [72.0, 1341.5], [79.0, 2272.0], [76.0, 2210.5], [83.0, 1965.0], [82.0, 297.5], [86.0, 2024.0], [91.0, 2902.5], [88.0, 2794.0], [92.0, 4167.5], [97.0, 3546.0], [98.0, 3194.0], [96.0, 2434.0], [102.0, 4525.0], [106.0, 2833.0], [107.0, 2704.0], [105.0, 2235.0], [115.0, 3799.0], [112.0, 6099.5], [117.0, 4206.0], [118.0, 5810.0], [121.0, 1969.5], [122.0, 5035.0], [124.0, 5624.0], [128.0, 5327.5], [134.0, 6331.5], [131.0, 7281.0], [140.0, 2201.5], [142.0, 3312.0], [138.0, 5484.5], [143.0, 2709.0], [144.0, 2384.0], [146.0, 5324.5], [154.0, 6397.0], [152.0, 5649.0], [158.0, 3120.5], [162.0, 2350.0], [174.0, 3559.0], [168.0, 2981.5], [189.0, 3092.0], [201.0, 2650.0], [206.0, 3417.0], [211.0, 1909.0], [260.0, 2557.0], [261.0, 4528.0], [273.0, 4397.0], [291.0, 3097.0], [296.0, 3496.5], [331.0, 1207.0], [370.0, 2531.5], [378.0, 2319.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 378.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3.85, "minX": 1.6869123E12, "maxY": 105.55, "series": [{"data": [[1.68691236E12, 80.41666666666667], [1.68691248E12, 3.85], [1.6869123E12, 105.55], [1.68691242E12, 50.18333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68691248E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 5.45, "minX": 1.6869123E12, "maxY": 95.55, "series": [{"data": [[1.68691236E12, 81.43333333333334], [1.68691248E12, 5.45], [1.6869123E12, 95.55], [1.68691242E12, 57.56666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68691248E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 5.45, "minX": 1.6869123E12, "maxY": 95.55, "series": [{"data": [[1.68691236E12, 81.43333333333334], [1.68691248E12, 5.45], [1.6869123E12, 95.55], [1.68691242E12, 57.56666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68691248E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 5.45, "minX": 1.6869123E12, "maxY": 95.55, "series": [{"data": [[1.68691236E12, 81.43333333333334], [1.68691248E12, 5.45], [1.6869123E12, 95.55], [1.68691242E12, 57.56666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68691248E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

